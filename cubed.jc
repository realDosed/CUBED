event<world_start>{
    world::set_world_simulation_distance(32);
    g`PROTOCOL` = 767;
    code::start_process("CLEAR_ENT_W");
    code::call_function("LoadData");
    g`ShulkerListForRays` = "none";
    g`SandListForRays` = "none";
    g`TurretUUIDList` = [];
    g`SpiderUUIDList` = [];
    g`MAX_RAY_COUNT` = 4;
    g`MPlatSpeedSymbol` = variable::create_map_from_values(["0.05", "0.1", "0.2", "0.25"], [m"<font:smallcaps><bold><#ffb657>› <#abc4d6>›› ››› ››››", m"<font:smallcaps><bold><#abc4d6>› <#ffb657>›› <#abc4d6>››› ››››", m"<font:smallcaps><bold><#abc4d6>› ›› <#ffb657>››› <#abc4d6>››››", m"<font:smallcaps><bold><#abc4d6>› ›› ››› <#ffb657>››››"]);
    code::call_function("LoadItems");
    code::call_function("ResSecDoors");
    code::call_function(p"init rem");
}

function LoadData{
    g`ActivatorList` = [];
    code::call_function(p"LoadLvlDataMap");
    SNDTMP1 = variable::create_map_from_values(["one_more_day", "chrysopoeia_a", "chrysopoeia_b", "chrysopoeia_c", "bromeliad_a", "bromeliad_b", "a_familiar_room_a", "a_familiar_room_b", "echo_in_the_wind_a", "echo_in_the_wind_b", "floating_dream_a", "floating_dream_b", "left_to_bloom_a", "left_to_bloom_b", "infinite_amethyst"], [sound("minecraft:music.game", 1, 2, "one_more_day", "RECORD"), sound("minecraft:music.nether.crimson_forest", 1, 2, "chrysopoeia", "RECORD"), sound("minecraft:music.nether.crimson_forest", 1, 1.26, "chrysopoeia", "RECORD"), sound("minecraft:music.nether.crimson_forest", 1, 1.587, "chrysopoeia", "RECORD"), sound("minecraft:music.overworld.bamboo_jungle", 1, 1.26, "bromeliad", "RECORD"), sound("minecraft:music.overworld.bamboo_jungle", 1, 1.587, "bromeliad", "RECORD"), sound("minecraft:music.game", 1, 1.26, "a_familiar_room", "RECORD"), sound("minecraft:music.game", 1, 1.587, "a_familiar_room", "RECORD"), sound("minecraft:music.overworld.badlands", 1, 1.26, "echo_in_the_wind", "RECORD"), sound("minecraft:music.overworld.badlands", 1, 1.587, "echo_in_the_wind", "RECORD"), sound("minecraft:music.overworld.forest", 1, 1.26, "floating_dream", "RECORD"), sound("minecraft:music.overworld.forest", 1, 1.587, "floating_dream", "RECORD"), sound("minecraft:music.game", 1, 1.26, "left_to_bloom", "RECORD"), sound("minecraft:music.game", 1, 1.587, "left_to_bloom", "RECORD"), sound("minecraft:music.overworld.dripstone_caves", 1, 2, "infinite_amethyst", "RECORD")]);
    SNDTMP2 = variable::create_map_from_values(["wending", "comforting_memories_a", "comforting_memories_b", "concrete_halls_a", "concrete_halls_b", "ancestry_a", "ancestry_b", "so_below_a", "so_below_b", "ambience", "endless_a", "endless_b", "featherfall_a", "featherfall_b", "komorebi_a"], [sound("minecraft:music.overworld.dripstone_caves", 1, 2, "wending", "RECORD"), sound("minecraft:music.game", 1, 1.26, "comforting_memories", "RECORD"), sound("minecraft:music.game", 1, 1.587, "comforting_memories", "RECORD"), sound("minecraft:music.nether.basalt_deltas", 1, 1.587, "concrete_halls", "RECORD"), sound("minecraft:music.nether.basalt_deltas", 1, 2, "concrete_halls", "RECORD"), sound("minecraft:music.overworld.deep_dark", 1, 1.26, "ancestry", "RECORD"), sound("minecraft:music.overworld.deep_dark", 1, 1.587, "ancestry", "RECORD"), sound("minecraft:music.nether.soul_sand_valley", 1, 1.587, "so_below", "RECORD"), sound("minecraft:music.nether.soul_sand_valley", 1, 2, "so_below", "RECORD"), sound("minecraft:cubed.music.ambience", 1, 1, "RECORD"), sound("minecraft:music.menu", 1, 1.26, "endless", "RECORD"), sound("minecraft:music.menu", 1, 0.841, "endless", "RECORD"), sound("minecraft:music.menu", 1, 1.26, "featherfall", "RECORD"), sound("minecraft:music.menu", 1, 0.841, "featherfall", "RECORD"), sound("minecraft:music.game", 1, 1.26, "komorebi", "RECORD")]);
    SNDTMP3 = variable::create_map_from_values(["komorebi_b", "blue_darkness_a", "blue_darkness_b", "drums_and_riffs_a", "drums_and_riffs_b", "electric_guitar_ambiance_a", "electric_guitar_ambiance_b", "loneliness_a", "loneliness_b", "lose_loose_bounds_a", "lose_loose_bounds_b", "lose_loose_bounds_alt", "majixx_a", "majixx_b", "proxy_a"], [sound("minecraft:music.game", 1, 1.587, "komorebi", "RECORD"), sound("minecraft:cubed.music.blue_darkness", 1, 1, "RECORD"), sound("minecraft:cubed.music.blue_darkness", 1, 0.841, "RECORD"), sound("minecraft:cubed.music.drums_and_riffs", 0.9, 1, "RECORD"), sound("minecraft:cubed.music.drums_and_riffs", 0.9, 1.26, "RECORD"), sound("minecraft:cubed.music.electric_guitar_ambiance", 0.9, 1, "RECORD"), sound("minecraft:cubed.music.electric_guitar_ambiance", 0.9, 0.841, "RECORD"), sound("minecraft:cubed.music.loneliness", 0.9, 1, "RECORD"), sound("minecraft:cubed.music.loneliness", 0.9, 1.26, "RECORD"), sound("minecraft:cubed.music.lose_loose_bounds", 0.9, 1, "RECORD"), sound("minecraft:cubed.music.lose_loose_bounds", 0.9, 1.26, "RECORD"), sound("minecraft:cubed.music.lose_loose_bounds_alt", 0.9, 1, "RECORD"), sound("minecraft:cubed.music.majixx", 0.9, 1, "RECORD"), sound("minecraft:cubed.music.majixx", 0.9, 1.26, "RECORD"), sound("minecraft:cubed.music.proxy", 0.9, 1, "RECORD")]);
    SNDTMP4 = variable::create_map_from_values(["proxy_b", "wasteland_nostalgia", "eld_unknown_a", "eld_unknown_b", "yakusoku_a", "yakusoku_b", "jungle_drums", "typography"], [sound("minecraft:cubed.music.proxy", 0.9, 1.26, "RECORD"), sound("minecraft:cubed.music.wasteland_nostalgia", 0.9, 1.26, "RECORD"), sound("minecraft:music.menu", 1, 1.26, "eld_unknown", "RECORD"), sound("minecraft:music.menu", 1, 0.841, "eld_unknown", "RECORD"), sound("minecraft:music.game", 1, 1.26, "yakusoku", "RECORD"), sound("minecraft:music.game", 1, 0.841, "yakusoku", "RECORD"), sound("minecraft:cubed.music.jungle_drums", 0.9, 0.841, "RECORD"), sound("minecraft:cubed.music.typography", 0.9, 0.841, "RECORD")]);
    g`SOUNDDATA_VALUES` = SNDTMP1.append_map(SNDTMP2);
    g`SOUNDDATA_VALUES` = g`SOUNDDATA_VALUES`.append_map(SNDTMP3);
    g`SOUNDDATA_VALUES` = g`SOUNDDATA_VALUES`.append_map(SNDTMP4);
    SNDTMP1 = variable::create_map_from_values(["one_more_day", "chrysopoeia_a", "chrysopoeia_b", "chrysopoeia_c", "bromeliad_a", "bromeliad_b", "a_familiar_room_a", "a_familiar_room_b", "echo_in_the_wind_a", "echo_in_the_wind_b", "floating_dream_a", "floating_dream_b", "left_to_bloom_a", "left_to_bloom_b", "infinite_amethyst"], [2780, 3030, 4810, 3818, 4952, 3932, 3810, 3038, 4698, 3730, 3254, 2584, 5428, 4310, 2710]);
    SNDTMP2 = variable::create_map_from_values(["wending", "comforting_memories_a", "comforting_memories_b", "concrete_halls_a", "concrete_halls_b", "ancestry_a", "ancestry_b", "so_below_a", "so_below_b", "ambience", "endless_a", "endless_b", "featherfall_a", "featherfall_b", "komorebi_a"], [3140, 4366, 3466, 3264, 2590, 5444, 4322, 4008, 3180, 2400, 6382, 9560, 5476, 8204, 4572]);
    SNDTMP3 = variable::create_map_from_values(["komorebi_b", "blue_darkness_a", "blue_darkness_b", "drums_and_riffs_a", "drums_and_riffs_b", "electric_guitar_ambiance_a", "electric_guitar_ambiance_b", "loneliness_a", "loneliness_b", "lose_loose_bounds_a", "lose_loose_bounds_b", "lose_loose_bounds_alt", "majixx_a", "majixx_b", "proxy_a"], [3630, 3300, 3924, 3540, 2810, 2400, 2854, 3860, 3064, 3600, 2858, 2560, 5900, 4682, 3860]);
    SNDTMP4 = variable::create_map_from_values(["proxy_b", "wasteland_nostalgia", "eld_unknown_a", "eld_unknown_b", "yakusoku_a", "yakusoku_b", "jungle_drums", "typography"], [3064, 3112, 4698, 7040, 4302, 6444, 2450, 2878]);
    g`SOUNDDATA_TIME` = SNDTMP1.append_map(SNDTMP2);
    g`SOUNDDATA_TIME` = g`SOUNDDATA_TIME`.append_map(SNDTMP3);
    g`SOUNDDATA_TIME` = g`SOUNDDATA_TIME`.append_map(SNDTMP4);
}

function LoadItems{
    g`ItemEmpty` = "H4sIAAAAAAAA/3WQQUvEMBCFX3fd0kYve1BYvPorvHjxN4i3kCazbNg0U5oJ6M2f7hSEVsRcQpLvvXkvBtjj9tWJe6O5RM7A8b3DLgY8jDGTn91ZnqXOksgWX4X2OHiuWQA0BsbzOHGmLKXfKrzLdkrOk+VsFN11aIfE/lq2VBGV2qGK7liJp5WYOMVyoWAHNbv+4g3uN/Oqvo02u5EatFFcil4db4Q+NGkDU3OgOSkfoMrTphtzkjjZEIsG/mxwd4mB7M910+Oo50DZrk27pft/bdX98U+ukQMlG/Sbe7TnxE7KYTF5+cKyvgHMHwxohgEAAA==".set_item_custom_tag("item_type", "empty");
    g`ItemPortalGunBlue` = "H4sIAAAAAAAA/8WUz2sTQRTHX5ofZldUKlQQERf0qOCheOilqMU/Qbwts7uT7pjJTJiZpfaW1ovQgkdBBQ/9B0IxUlti/oU3/5Fvq3ETNKYHwcPusjPfee/zfTPzQoA6XN5ijj3nxgqtAFZftGFFZHC9JxRPDeu4jdRoaxO9U4dmqgvlAKAWQpjqXl8rrpwN4MaMmqm4L1nKY61Ckq60oZVInXbtrMo6WhonhaMvVIp7laKvpbA5z+KEgnXn9AFcrXRSG17madSgJRyTIoUahIXKuJEkyuivkWiZURbCJzU0d3LhOIl00ilsyty56Ip1RnS5y40utnNSNxx/5WANj3DiBzjEYzzDEY7xBEcbsCxZAE1abdjPCsxlnoZuR/gB3+PHqEK7dPfxk6frW4+mkvsPInxHuSf+td/z+3ji9/1h5PcIogT5GuEEv/kBzQzxDC5oCf4V/acl9Ot/pC+BaXCMX6icx/7gv7qoR8/+YuAhGTjCzyXWFH6Ip6UTOg1jQh/NofuDi8OHsFad4UIlhrMuSySfn0gLOvi9WLEeX+R2GvIObUdFckj1Hfq30Xnt3+ApDn+ZbO1yKfUOJbpZJXJaSyf6cSYsXd7dAFZzkWVcxdUtb0PZLRZQL2gAcHtmPGdmm+5z3+iXPHVCcksMt34z29MZl3FGTSmAVkdq5myz3O3NAb2DJRHLva796GDXKiEzZr590fMdZAsZMvwEAAA=".set_item_custom_tag("item_type", "portal_gun");
    g`ItemPortalGunOrange` = "H4sIAAAAAAAA/8WUz2sUMRTH33Z/uDui0kIFEXFAjwoeioeetBb/BPE2ZGaynbjZZEkyrL219SK04FFQwUP/gaG4UlvW/Rde/iPfVNfZRbftQfAwM0zyzXuf70vyAoA6XN1kjr3gxgqtAJZftmFJpLDSF4onhnXdemK0tbEe1qGZ6Fw5AKgFECS6P9CKK2c7cHNGzVQ0kCzhkVYBSZfa0IqlTnp2VmUdLY3i3NEXKsX9SjHQUtiMp1FMwXpz+g5cr3RSG17madSgJRyTIoEaBLlKuZEkSumvEWuZUhbCJzU0h5lwnEQ67uY2Ye5MdM06I3rcZUbnWxmpG46/drCKhzjxO1jgEZ7iCMd4jKN1uChZB5q02rBfFZjLPA3dDvEjfsBPYYV25d7TjWdrm4+nkgcPQ3xPuSf+jd/1e3js9/xB6HcJogT5FuIEv/sdminwFC5pCf4V/ecL6Nf+Sl8C0+AYv1I5j/z+f3VRD5+fY+ARGTjELyXWFL7Ak9IJnYYxoY/m0P3+5eEDWK3OcK5iw1mPxZLPTyQ5Hfx+pFifL3I7DXmXtqMiOaD6Fv5deFb7t3iCxW+TrW0upR5SoltVIqe1dGIQpcLS5d3uwHIm0pSrqLrlbSi7xQLqBQ0A7syMZ8xs0X0eGP2KJ05Ibonh9h9m+zrlMkqpKXWg1ZWaOdssd/sJvWhPz49Y7nXtZwe7UQmZMfPti54f93NOrPwEAAA=".set_item_custom_tag("item_type", "portal_gun");
    g`ItemGravityGun` = "H4sIAAAAAAAA/71VXWsTQRS9aZuYrKhUqCBFWKgPihQfLD70qWpffRLUt2V2d9IdM9kJs7PEvvUDRGm1iG8qSvEPpNVI+pX+hTv/yLtp6zZKbamlD0nYmbN3zjk5944DMAgXp5lhT7lOhIoBhp+XYUCEcLUuYh5oVjWTgVZJ4qvmIBQDlcYGAAoOOIGqN1TMY5NU4NohNIu9hmQB91TsEHSgDCVfqqCWwM0c1VBSJBEPPZ+gtcRQIc9PDf1Cjj9UtQ9Rgcv5jlSaZ+eUClAShkkRQAGcNA65lgQK6WnIVzKkukSf0FBsRsJwAim/miYBMz3QpcRoUeMm0iqdiQg9ZPhLAyP4DXftHLZwHbewjTvYwfYkHHdYBYr0tmb7DvSdfFC67OIn/Iif3ZzahbEHDx9NTN8/gDwed/GLXbAL2KXTN3HHLtLTsoubdhHX3Lsu7mKb2GW8Wr95dnoY+5YWs83v2LWvsWXn4ISa4azkfT1G3rPxDNPFH0R45U9xuOnaeVK2hu2eUFLSISXzZEaLlHXPRejpQnMbVzOWds4u4YZLrBZ6/8xPWnpn35CMjX2RZxOkUZd8poDY92RYh2LSdXHbLpEXnX+YP7pv/nrPu37zzzcpY+6TSFSNe+dUOm6RjlWCb9nlLBZZS/yvKAdG8gGTxr7mrMZ8yfs3gpSmUt2LWZ2fOEalWS6lap6QyT38kLc0hedV1gEkcmcvV9u9RuhQayyS+pVsSlD2HbieczRKSSMaXigSGsqzFRiORBjy2MundxmyW+AIwUcMdrhxaD1ieoYmeUOrFzwwQvKEOIz+5VNdhVx6IV02FShVpWImKWYBmpqi78oxFbP4FPZupis5kGndfy3R5xe0D3Uj1AYAAA==".set_item_custom_tag("item_type", "gravity_gun");
    g`ItemSettingIntroON` = "H4sIAAAAAAAA/4WOTUoDQRCF3xgnTFoQI7hPrpF1zhDcDU1PKQ39E3p6SLIbsnGhuPACXkEUQZTkDNU3SmeV7NwVj+99rwQwwNVcRrmg0GrvgPF9hQvd4NZqRyrIhzgz2lLdbGiAUvnORQCFgFDeLr0jF9sRrs9oH0gckQJDHaXRCgVE5xoKJkMNKlxGWkfc8Bv/8l96TU/8zTveV0d/rqN8DEQOAncnrera6G3tpKX/xFN+Tz3v+Ye/Up+e+ZM/0ja9THKwy0d/tjTckDF+ld89AHP4CwkLAQAA".set_item_custom_tag("setting_type", "intro");
    g`ItemSettingIntroOFF` = "H4sIAAAAAAAA/4WOQUoDMRSG/7FjmaYgWHBfr9F1zyDdDSHzlEAmkUyGOruhGxeWLnoBryCKIEp7hpcbmVm1u+4ePx/f9wQwwnQpg3wg32hngdtVgStdYVZrS8rLx7B48rIrq45GuFautQFAJiCUq5+dJRuaCW5OtHGexIBkGOsgjVbIIFpbkTcJqlAgD/QSMON9fONf/ou7+MrffOBjMRSSAPnQhMDdyavaJri6tLKmS+Z7fo89H/mHv2KfGp/8ETdxO0/DIR39WWjckTFunf79B+XjCpEMAQAA".set_item_custom_tag("setting_type", "intro");
    g`ItemSettingTipsON` = "H4sIAAAAAAAA/4WOTUoDQRCF3+SPsQNiAu7d5Q5ZewZxF5qeMjT0j/T0oFnqxoUhCy/gFYIkKEriFapvlA5C4i6bWrz66nslgDb61zLKGwq19g4Y3JZo6QpDqx2pIO/i2GhLk2pGbXSVb1wEUAgI5e29d+RifYbzf7QPJPZIgZ6O0miFAqJxFQWToQolOpEeIy74jb/5Jy3SC695w9ty78/n6E4DkYPA5VGrmjp6O3HS0inxiN95m9VL/kyv/MHL9JzmV/ybw1V6+lvk+XXo683IGP+Qn94Bis3GyBEBAAA=".set_item_custom_tag("setting_type", "tips");
    g`ItemSettingTipsOFF` = "H4sIAAAAAAAA/4WOsWoCQRCG/4tGLisEIqS38x1S5xkknSx7k7Cwtyt7e8QrkyaFYpEXyCtIUJSE6CvMvpF7BLS0mWLm4/tGAB30H2WQY/KVdha4e8pxpQsMSm1JefkcHl68bCZFQx1cK1fbACATEMqVU2fJhuoGt2faOE+iRTL0dJBGK2QQtS3ImwQVyNENNAsY8Gec8w//xmX84A3/8T5vC0mAbtuEwP3Zq+oquHJiZUmXzCP+4n0yr3ibCt+8iu9xMeRDWq7j2/8hzd0p12vIGPeavj4CahB1XxIBAAA=".set_item_custom_tag("setting_type", "tips");
    g`ItemSettingLaserHIGH` = "H4sIAAAAAAAA/4WPsUoDQRRF75qYbCYgBBTbQHoLm5B0Qb9B7MIw+4SB2ZlldhZNFy2SfxA/YlFEQcw3vP0jJxYJpEl9D+dwBdBC/1YGeUe+1M4Cg/sUJzrDea4tKS8fwrSofGFoni2ohVPlKhsAJAJCubxwlmwoezjb88Z5ElskQUcHabRCAlHZjLyJUIYU7UBPAZf8xr+84Q/eDJs1181z88LfzSrdZqIF3dF4cj2b3UDgYu9XVRlcPrcyp2OFK36N/p8oXfPnv/79oDWMa81fcV1yvQt3FmSMe4wn/gA/QThhIwEAAA==".set_item_custom_tag("setting_type", "laser");
    g`ItemSettingLaserMEDIUM` = "H4sIAAAAAAAA/4WPvWoCQRSFz8ZE1wkIKewFexutLGWfIaSTYfZGBuZHdmcx2yUpkncIeYhFkAgBn+HuG2W0SIKN9Xfud84VQAe3mQzynopSewfcPaS40jmGVjtShXwMcytX5IJc5jV1cKN85QKAREAob9feRVj2Mfg7ML4gcYwk6OogjVZIICqXU2FiKEeK60BPAUP+5Ia/+TBq37lpX9pX3rdv6bEkOtAbL7LZbDGF+D9HVWXwdumkpUv+CX/wIfr3Ub876bdnXaNIG/6K9Jmb3+JuTcb4TXzhB9haza4iAQAA".set_item_custom_tag("setting_type", "laser");
    g`ItemSettingLaserLOW` = "H4sIAAAAAAAA/4WPsUoDQRRF7xqTrCMEFNIv2FuLnbj+gtiFYfYFBmdnwu4smk4ttPELUvgNiyAGTPINb/4osxYG0ti+eziHJ4AejnPp5S1VtXYWOLlLcaALnJbakqrk1F/OtL2fFHPqoa9cYz2AREAoV86cJevrI4x2tHEViQ5JMNBeGq2QQDS2oMpEqECKQ0+PHhl/hDf+4nV4z3jFLf/wJouXNjyHF16G17TrRR2GZzf5RX51DYHxLqSa2rtyYmVJ/6XOecGb6F92wV/9514ri2vL33F94vYvPJiTMe4hfrMFefUbnioBAAA=".set_item_custom_tag("setting_type", "laser");
    g`ItemSettingOptifineON` = "H4sIAAAAAAAA/7WSv0oDQRDGJ+YP8URRwcLuKitBbK3t7cQurHebZPFuN+ztoelMAlqICoLgY4TgwZmY8xVm38jJRYyxuibNzszyMd+Pb9cBKMPGKTPsnOtIKAmwc1GHNeHDbigk9zRrmpNAhLzhd3kZqp6KpQGAkgOOp8KOklyaaB22/qiV5g5JqiWoCcMC4UEJnFj6XAck8mmqXKrAh/psHamh0tKsSxp12Ywjj5lcsxkZLa64aWsVt9okrhh+Y+AYX20PJ5i6OLIPLk4xoQ5TfMfU9mfDJ2Y0JD8azGAlHEdk38fM3pLbh4tjKlN7R+eI+uTQzevEPtn7OddqKPbto+3bwSyGoe1Rm+Pg2A6W/ZZ2Lbv/27zAmTtAcfBqS3MuC5Jv48tvQAnhZ+DA3uITeXFkVNiQLOSF/WtdHgTquiDAAb7RR/qixIb0VpMcIrXPbn6VumcdI5rkQwF8A+PwkpMlAwAA".set_item_custom_tag("setting_type", "optifine");
    g`ItemSettingOptifineOFF` = "H4sIAAAAAAAA/7WSsUoDQRCGJyaReKJgwMLuKitBbK3t7cQubO42yeLdbtjbQ9OZBLQIKgiCjxGCB2dizleYfSPnLmKIVZo0OzPLz/wf/64DUIbdC2bYFdeRUBLg4LoGW8KHeigk9zRrmfO2Zr2G3+NlqHoqlgYASg44ngq7SnJpoh3YX6oDpblDkmoJtoVhgfCgBE4sfa4DEvk0VZoq8KGWryM1VHID0qhmK448ZgrNXmS0uOGmo1Xc7pC4YvidgTN8s32cYerixI5cnGNCHab4gakd5MMXZjQkvxrMYCMcp2Q/wMzek9uni1Mqc/tA54T65MQt6sw+28cF12YojuyTHdhhHsPY9qktcHBqh6t+K7tW3f9tXuIsHGAz4HV8taO/hBLiz8CBw+Uv8uLIqLAhWcjXBtju8SBQt2siHOM7/aRvimxMjzUrIFL74hZXqXvZNaJFPpTAD4t3Qi0mAwAA".set_item_custom_tag("setting_type", "optifine");
    g`ItemMenuNormal` = "H4sIAAAAAAAA/2WOQQrCMBREJ9aWGkVw4UK8iSsXnkHclZj8YiDJL80v6u2NIrhwlsM85mmgwvJkxJxpzJ4TsLm0mHmHdfSJ7Gh6OVz5HirUlqckAJSGthwHTpQka2x/Sztl4dglE0mh8WKCt2gxF3oUUkFPydEYyt4BGrsfKcxB/NA5n4dgngqrm3fUfetCYv93E9lR6FyxX6DpAxvJ9dvviE9e/y3NVN0AAAA=".set_item_custom_tag("menu_type", "ui_normal");
    g`ItemMenuFull` = "H4sIAAAAAAAA/2WOsQrCMBiEL9aWGkVwcBDfxMXFZxC3EJMUA0n+0vxF3Xx0UxA6eONxH/dJoML6ollf3ZA9JWB3a7HwFtvokzOD7vh0p2eoUBsaEwMQEtJQ7Cm5xFliPy/NmJmiSjo6gcazDt6gxZLdq5ACckzWDaHsLSBxmEkmCux7ZX3ug34LbB7eOvWrC4nj300k64KyxX6FpgukOdeT3/mDKV/lmV1Q3QAAAA==".set_item_custom_tag("menu_type", "ui_full");
    g`ItemMenuButton_1` = "H4sIAAAAAAAA/2WPQQrCMBREp9ZKjW5EXIg3cePGM4i7EJMUAz/5pfkF3Xl0UxAUnOUwj5lRQI3V2Yi5+CEHTsDm2mIWHLYxJG8H08nRknnqmyGq0VgekwCoFJTl2HPySbLC7ic+ZuGok4m+wiKIoWDRYi7+UcgKakzOD1TyDlDYf0lhJgm9diH3pbPC+h6c1x+7kDj81UR2nrQrF5ZYdMRGcjPtO70w6Q2bkH574gAAAA==".set_item_custom_tag("menu_type", "ui_button_1");
    g`ItemMenuButton_2` = "H4sIAAAAAAAA/2WPQQrCMBREp9aWGt2IuBBv4sqFZxB3ISYpfkjyS/MLenujCArOcpjHzCigxvJkxJz9mIkTsL50mJHDJlLydjS9HGwwD301IdRoLE9JAFQKynIcOPkkWWH7E5+ycNTJRF+hJTGBLDrMxd8LWUFNyfkxlLwDFHZfUpiD0KAd5aF0VljdyHn9sQuJ/V9NZOeDduXCAm0f2EhuXvuOeOsJgSTuf+IAAAA=".set_item_custom_tag("menu_type", "ui_button_2");
    g`ItemMenuButton_3` = "H4sIAAAAAAAA/2WPQQrCMBREp9ZKjW5EXIg3cdWFZxB3ISa/GEjyS/MLentTEBSc5TCPmVFAjc3FiLnSmD0nYHdrsfAO++gT2dH0crbBvPTdhFCjsTwlAVApKMtx4ERJssLhJz5l4aiTiVRh5cUEb9FiKfQsZAU1JUdjKHkHKBy/pDAH8YN2Pg+ls8L24R3pj11InP5qIjsK2pULa6z6wEZyM+/rOsx6A+0utnDiAAAA".set_item_custom_tag("menu_type", "ui_button_3");
    g`ItemMenuButton_4` = "H4sIAAAAAAAA/2WPQQrCMBREp9ZKjW5EXIg3ceXCM4i7EJMUAz/5pfkF3Xl0UxAUnOUwj5lRQI3V2Yi5+CEHTsDm2mIWHLYxJG8H08nRknnqmyGq0VgekwCoFJTl2HPySbLC7ic+ZuGok4m+wiKIoWDRYi7+UcgKakzOD1TyDlDYf0lhJgm9diH3pbPC+h6c1x+7kDj81UR2nrQrF5ZYdMRGcjPtO70w6Q1ZMF5h4gAAAA==".set_item_custom_tag("menu_type", "ui_button_4");
    g`ItemMenuButton_5` = "H4sIAAAAAAAA/2WPQQrCMBREp9ZKjW5EXIg3ceXCM4i7EJMUAz/5pfkFvY1HNQVBwVkO85gZBdRYnY2Yix9y4ARsri1mwWEbQ/J2MJ0cLZmnvhmiGo3lMQmASkFZjj0nnyQr7H7iYxaOOpnoKyyCGAoWLebiH4WsoMbk/EAl7wCF/ZcUZpLQaxdyXzorrO/Bef2xC4nDX01k50m7cmGJRUdsJDfTvtMLk95vNfJm4gAAAA==".set_item_custom_tag("menu_type", "ui_button_5");
    g`ItemMenuButton_6` = "H4sIAAAAAAAA/2WPQQrCMBREp9aWGl0o4kK8iTvBM4i7EJMUAz/5pfkFvb0RBAVnOcxjZhRQY3k2Yi5+zIETsLl2mAWHbQzJ29H0crRknvpmiGo0lqckACoFZTkOnHySrLD7iU9ZOOpkoq/QBjEULDrMxT8KWUFNyfmRSt4BCvsvKcwkYdAu5KF0Vljdg/P6YxcSh7+ayM6TduXCAm1PbCQ3732nNd56Aa4tT9riAAAA".set_item_custom_tag("menu_type", "ui_button_6");
    g`ItemNewGame` = "H4sIAAAAAAAA/62Sz0pCQRTGj1lmNwgq2o+0deGiTGoRlvoI0U4u905w4d6ZuI6UO/8QCUqB+95BLcMo7RXOeaOO/ZUW3U2LmYHD4fd93zljAcRhtWAb+0SGFU8rgPXTJCx4LmwEnpJOaJ+Zfd8LZNmtyTgsObqqDADELLAcHZxrJZWprMDaXLcOpcUtiRgkPGP7ngMxsKrKlaHPTS4kYdHISwNp7FFH4AOO8Ika1MQhjvke4TN1cYJTQVc45cJ7MTnTZjQsb+ePjncKWYjCp5jRp2s+TeqKGRCH1KIbgWO8pzq1Dv9iflF+wSNVM9hjxbbAV6qzIgvhiMM1BA6oNctKTUENHHCyNkedpOZMlErZYrb4DyYO8A77+IgvH7NLC7rmd8oWOiJqKnN+9vK5TG4XLNj62a5TrRgdlJUdyCgXm+yC6Sx1+0nH/jc9UZO+ry/4n7wBCWpa4oQCAAA=".set_item_custom_tag("menu_type", "ui_newgame");
    g`ItemEnding1` = "H4sIAAAAAAAA/7WQsUoDQRCG/0vOEFcUUqS/WgSxtfYZxC5s9jbJ4t6u7O2h12kULbS2E19BhUgIer7C7Cv4JK42KbRIYzPDMB8z3wwD2tg44J4fSlcqa4DeURctlaNXKCOF4yO/72Q+yGvZxpqwlfEAEgYmbHFijTS+XMfWEtbWSRaRVoKO8lwrgQSsMrl0OkJ5rNKh1Tm63+MijXTseB0ZOxxVpeD+h9ksvVPH0k+crcaTCKdennns0gM90Su90TxMabaThZuYG3oOtxl9UBMuYqsJ03BOsxjv8C8WfVrEne/hOsYXWoTL7PPqfg8M/eUfRFV6WwwML+TKDp1aam1PV7TYpsffB2d/qwFfJW0CWesBAAA=".set_item_custom_tag("ending_button", "end1");
    g`ItemEnding2` = "H4sIAAAAAAAA/7WTzU7bQBSFb0ISESMqVSpiOzugAiGx7IJV9t1V3UWDPUksHE80HivNDtKfLFqVFYgN6iu4UV2ZBMIr3HkFnqTXCRAlFOEs2Iz/ju/57pk7FsASrFS45h+EClzpA7z+uAx514E3TdcXtuI1/U4q7tdF1emIJSjaMvQ1AOQssGzZbElf+Doow6up3pNKWCQp5aDkau65NuTACn1HKI9EDj0VDqTnwHJajtRQqCveIY08qIWBzfVYsxpo5R4K3VAyrDdIXNDik4ZdvMAI/+IVJqaL8TYzPbqO8Lf5zvAGR+aYPo1M1xxhTOsPeBGKNRyQ57X5RmsfB+Yzu/1ytjfrNVNn1nmu6hRlUh2yQxfbDVeLjNQVPKV4hpgw7KdxXWNMd5jgn0mYaYCxOSIN9TZOOdpOBQMcmp+mNxE9y1aGIpkpns5A/gG01BGeJ9v3KBt4TjY3tEsRGQwxJsPEnLDxq4S9b2m3RlXZfKf3/69jP+WPzPF4q0d4SZSR+foo+CeiWCDissPVYXWB4djfTGd0hixhO/ssW8tbYMHa9DTZYaBls+rzpshMfJd1Rty3+OvxsWH/H3CAf6gGG440BAAA".set_item_custom_tag("ending_button", "end2");
    code::call_function("LoadItems2");
}

function LoadItems2{
    g`HoloPos1` = location(4.5, 4.5, 4.5, 0, 0);
    g`HoloPos2` = location(-3.5, 4.5, 4.5, 0, 0);
    g`ItemPauseMenu` = "H4sIAAAAAAAA/2WOQQrCMBREJ9aWGkVw4UK8iasuPIO4CzFJMZDkl+YX9famIHThLId5zJNAhe1Vs765MXtKwOHeYuUt9tEnZ0bd8+VBr1ChNjQlBiAkpKE4UHKJs8RxWZopM0WVdHQCjWcdvEGLNbt3IQXklKwbQ9lbQOK0kEwU2A/K+jwE/RHYPb116lcXEue/m0jWBWWL/QZNH0hzrme/rsOcL5MnlVvdAAAA".set_item_custom_tag("menu_type", "ui_pause_bg");
    g`ItemPauseButton1` = "H4sIAAAAAAAA/2WPQQrCMBREp9ZKjW5EXIg3ceXCM4i7EJMUAz/5pfkFvZ1HMwVBwVkO85gZBdRYnY2Yix9y4ARsri1mwWEbQ/J2MJ0cLZmnvhmiGo3lMQmASkFZjj0nnyQr7H7iYxaOOpnoKyyCGAoWLebiH4WsoMbk/EAl7wCF/ZcUZpLQaxdyXzorrO/Bef2xC4nDX01k50m7cmGJRUdsJDfTvtMLk941OgZu4gAAAA==".set_item_custom_tag("menu_type", "ui_pause_b1");
    g`ItemPauseButton2` = "H4sIAAAAAAAA/2WPQQrCMBREp9ZKjW5EXIg3ceXCM4i7EJMUAz/5pfkFva1HMQVBwVkO85gZBdRYnY2Yix9y4ARsri1mwWEbQ/J2MJ0cLZmnvhmiGo3lMQmASkFZjj0nnyQr7H7iYxaOOpnoKyyCGAoWLebiH4WsoMbk/EAl7wCF/ZcUZpLQaxdyXzorrO/Bef2xC4nDX01k50m7cmGJRUdsJDfTvtMLk94DP6pp4gAAAA==".set_item_custom_tag("menu_type", "ui_pause_b2");
    g`ItemPauseButton3` = "H4sIAAAAAAAA/2WPQQrCMBREp9aWGt2IuBBv4k7wDOIuxCTFD0l+aX5Bb28UQcFZDvOYGQXUWJ6MmLMfM3EC1pcOM3LYRErejqaXgw3moa8mhBqN5SkJgEpBWY4DJ58kK2x/4lMWjjqZ6Cu0JCaQRYe5+HshK6gpOT+GkneAwu5LCnMQGrSjPJTOCqsbOa8/diGx/6uJ7HzQrlxYoO0DG8nNa98Rbz0BNS+Z2eIAAAA=".set_item_custom_tag("menu_type", "ui_pause_b3");
    g`ItemPauseButton4` = "H4sIAAAAAAAA/2WPQQrCMBREp9aWGt2IuBA3nsOd4BnEXYhJioGf/NL8gt7eCIKCsxzmMTMKqLE8GzEXP+bACVhfO8yCwyaG5O1oejlaMk99M0Q1GstTEgCVgrIcB04+SVbY/sSnLBx1MtFXaIMYChYd5uIfhaygpuT8SCXvAIXdlxRmkjBoF/JQOius7sF5/bELif1fTWTnSbtyYYG2JzaSm/e+0wFvvQADKjXe4gAAAA==".set_item_custom_tag("menu_type", "ui_pause_b4");
    g`ItemSpeedrunMode` = "H4sIAAAAAAAA/5WRsUrEQBCGJ97liBEEBQutAjYWV1hb+wxid4RkPRaSXUk2aLozV1yhaGkl+Ah3HjnikYuvMPtGTgJGESRYTLWz3/fPjA3Qg51zV7kXLIq5FAB7lxZscR/2Qy6YF7lX6izgIRv5KeuB6clEKAAwbLA9GV5LwYSKt2H3R7eMmE0tpgEDrtyAe2CAnQifRQE1+WBBX7FbBSf4ijmusMBy6OCbg2usdEY1wQpLBzd6Sq8brKzaS1jojyM3hS7uMX40iHeCFQTWd/rRIctST/S0tsxx/U/kIZYEbMI4uND3hMzIkWP+J+jr6y9ip+oUXyjgioQF5c+Hjp7VS6mttBKc6xlVph/aidoE5jhiTIANB9/H8JJYyXAk3JB1iY/wmcQLGmrZiOrN1SOW+qlVDFIWBPKGrvsJzfYSVjoCAAA=".set_item_custom_tag("menu_type", "ui_speedrun");
    g`ItemLevelSelect` = "H4sIAAAAAAAA/4WPTUoDQRCF3yQxjC0ICiIIQg7gCVx7BnEXmp5SGvpHenrQ2YW4cJGA4N47xEDEhZkzVN8onY0RN1lVLd77vioB9HF0I6O8pVBr74CTuxI9XeHUakcqyPt4bbSlcdVSHwfKNy4CKASE8vbRO3KxPsTxn7QPJHKkV2CoozRaoYBoXEXB5FCFEoNIzxEX/MEL/uIf/k5TXl2N0mueHX+mWbk1ZRAGD0G22Ee65GWa5d6EF2ma5qP0kteOl7zidZr/gwmc7Y5VTR29HTtpaZ/knN+3Eu7SZCdYp7df/LAlY/xTfn0DsDf7FVcBAAA=".set_item_custom_tag("menu_type", "ui_levelselect");
    g`ItemBonusLevels` = "H4sIAAAAAAAA/4WQTUoDQRCF3yQxjC0ICi7F2QqewLVnEHehmWmloX+kpwedXYwLF+PGA3iHJDASwXiG6htZboy6yabq8Xi8rygBDLF3IaO8VKHW3gEHVzkGusKh1U6VQV7Hc6OtmlStGmKn9I2LADIBUXp7651ysd7F/q+0D0pwZJBhrKM0ukQG0bhKBcOhCjlGUd1HnNIrzemNPmiVZtSfFemJ9yctUlfQMnUspjRPs/Scf4O5F6ObIFtsKz6hBdes02N64NnRe8FyytaSejb+1wkcba4vmzp6O3HSqm2YY3r5g+k3mDWtfiDjVhnj7/gjX81bqTpuAQAA".set_item_custom_tag("menu_type", "ui_bonuslevels");
    g`ItemSettingLevelTimerON` = "H4sIAAAAAAAA/4WOvWoCQRhF77pRNhMIKlik8zmsfQZJJ8PsFxmYnzA7S7QTLNIl4CP4BCJYxL9n+OaNsjYxnf2551wB5HgayygnFCrtHdB7LdDSJfpWO1JBvsWR0Zam5YJytJWvXQSQCQjl7bt35GL1iOd/tA8krkiGjo7SaIUMonYlBdNAJQo8RJpHdHnNBz6mr/TJez7zpbj6mznas0DkIDC4aVVdRW+nTlq6J37hDW/5h0+8T8thWqUlX3jH5/T9V+gsyBj/0dz8BVA9HNADAQAA".set_item_custom_tag("setting_type", "leveltimer");
    g`ItemSettingLevelTimerOFF` = "H4sIAAAAAAAA/4XOMWoCQRjF8bfZKJsJBBRS2OUc1jmD2C3D7GcYmJ0Js7PodoKFhaDgETxBCGyRRD3DNzfK2mhp/+f3ngBSPL/LICfkK+0sMJhmeNAFhqW2pLychfGHl01eNJSip1xtA4BEQChXfjpLNlRPeLnVxnkSlyRBXwdptEICUduCvOmiAhkeAy0ChryPG/7lv7iNa275xOfsstABSH0XCrzeWFVXwZW5lSXdg0d84C/+4SO3cfkWV3HJZ/7mU9xd/X5Dxrh5d/MfDK3a6QMBAAA=".set_item_custom_tag("setting_type", "leveltimer");
    g`ItemNewSpeedrun` = "H4sIAAAAAAAA/62Sz0rDQBDGp1ZrjCAoeF/xoIceetBavEhr20cQbyUkKwSSrKRbtDdbkRZaEHr3HfrH+gfb+Aozb+REEYsHq+Bhd9mP4ft+M7smQBJWi5a2TmRYdVUAsH5qwILrwIbvBtIOrTN96Lm+rDh1mYQlW9UCDQAJE0xb+ecqkIGursDaTLUKpcklqQSkXG15rg0JMGuBI0OPixwwYFHLSw1p7FFH4D2O8Zka1MQhPvE+xhfq4hQjQTcYsfAuGnE2W8Pydr5wvFfMwjz7XfboU4tXk7oCH7GPAzYfiVgXOKQrvk3o9ugn60+zbxlzwzPY4+C2wFeOiXAUh3GPDYEDuo5bpqagBgNF1GaM6dYMRLmcLWVL/wBRwDtu+gEnHyNMC2rxGTFCR/xyODNYB/lcJrcPJmx+vbVdq2rlVwLLl/NgdmKYvySm6tLz1AX/pDexmB72pgIAAA==".set_item_custom_tag("menu_type", "ui_newspeedrun");
    g`ItemBonusLvl1` = "H4sIAAAAAAAA/42QTUsCQRzGn3XV1o2CAg/dFjovGOQLe9MWP0J0k3F31KXZmZiZpbxJHfJW975F4C36DLvfqNEQtYi8zcDv/7y5gI3DkGhyTaVKBAdObhyUkhinacJpJMlIB2NJpoN4Sm1UIpFxDcBy4UYivROccq1qON7QTEjqGsS2UE00YUkEC27GYyqZgWLzKw8Fi+Es5QyNg/N2t9PoNA0mhqNMRUSvsCOlZXJL9USKbDwxfFnTB416/pq/F4/5ZzELPEkJC4Va8Vt2Ozq75j9UN2m+1YH/ctdQMaAky5KlrRLd3tVl2FrrnOVvxVPxXMzzRb7wTOCZeXwUL4G3Xbzf77Wa7fVNxfcD3/+V/48dABf1ze5RprRIB5ykdO/lq1PKmLjf09AZCp4pv3FhrL8AOcjXGDoCAAA=".set_item_custom_tag("bonus_lvl", 101);
    g`ItemBonusLvl2` = "H4sIAAAAAAAA/42QTUsCQRzGn3XV1o2CAg/dFjovSOQLe9MWP0J0k3F31KXZmZiZpbxJHfJW975F4C36DLvfqNEQtYi8zcDv/7y5gI3DkGhyTaVKBAdObhyUkhinacJpJMlIB2NJpoN4Sm1UIpFxDcBy4UYivROccq1qON7QTEjqGsS2UE00YUkEC27GYyqZgWLzKw8Fi+Es5QyNg/N2t9PoNA0mhqNMRUSvsCOlZXJL9USKbDwxfFnTB416/pq/F4/5ZzELPEkJC4Va8Vt2Ozq75j9UN2m+1YH/ctdQMaAky5KlrRLd3tVl2FrrnOVvxVPxXMzzRb7wTOCZeXwUL4G3Xbzf77Wa7fVNxfcD3/+V/48dABf1ze5RprRIB5ykdO/lq1PKmLjf09AZCp4pv3FhrL8A12diCjoCAAA=".set_item_custom_tag("bonus_lvl", 102);
}

event<player_join>{
    world::hide_event_message();
    if(player::name_equals("none")){
        player::kick();
        code::break();
    }
    g`%player%_FirstJoined` = 1;
    g`%player%_IsAlive` = "0";
    code::wait(1);
    code::call_function("FirstJoin");
    code::call_function("FixMaxLevels");
    g`%player%_Level` = "0";
    code::call_function(p"ResetVars");
    g`%player%_ActivePrtlsCount` = "0";
    g`%player%_CubePicked` = "0.0";
    g`%player%_PickedUUID` = "none";
    g`%player%_PushUUID` = 0;
    g`%player%_GravityPickUUID` = 0;
    g`%player%_WalkVect` = vector(0, 0, 0);
    code::start_process(p"ViewDistAsync");
    player::set_boss_bar("timer_bar", "%empty%", 0, color="PINK");
    player::set_boss_bar("empty_bar_1", "%empty%", 0, color="PINK");
    player::set_boss_bar("empty_bar_2", "%empty%", 0, "FOG_AND_DARK_SKY", color="PINK");
    player::set_chat_completions(["@menu", "@online", "@restart", "@discord", "@help", "@pause"], "SET");
    if(player::has_privilege("WHITELISTED")){
        player::set_chat_completions(["@level", "@clearscore"]);
    }
    FromJoin = 1;
    code::call_function("MENU");
}

function FirstJoin{
    player::set_skin("http://textures.minecraft.net/texture/23e9ea9d0de13c8da07503688b28f4c3da5a787c48e6d5cbefc229022944dbd9");
    player::set_gamemode("SPECTATOR");
    player::set_allow_flying();
    player::set_pvp("FALSE");
    player::set_death_drops("FALSE");
    player::set_inventory_kept();
    player::set_collidable("FALSE");
    player::set_nametag_visible("FALSE");
    player::set_instant_respawn();
    player::set_simulation_distance(32);
    player::set_world_border(location(0, 0, 0, 0, 0), 1088, "0.0");
    player::set_flying();
    player::set_movement_speed("0", "FLY");
    player::teleport(location(0.5, 19.5, 9.5, 0, 0), "FALSE");
    player::give_potion_effect(potion("minecraft:blindness", 0, 2147483647), "FALSE", "FALSE", "NONE");
    player::send_title("&#7a8085Загрузка ресурспака...", "&8Если загрузился, напишите @play", "0.0", 300, "0.0");
    if(value::protocol_version<default>.not_equals(g`PROTOCOL`)){
        player::message(["&c Вы играете с версии Minecraft, которая может быть", "&c не совместима с этим миром! Играйте с версии &n1.21.1&c!"], "SEPARATE_LINES");
    }
    repeat::multi_times(amount=60){
        if(g`%player%_SkipFristLoading`.equals(1)){
            variable::purge("%player%_SkipFristLoading");
            code::stop_repeat();
        }
        code::wait(5);
    }
    if(world::has_player("%player%")){
        g`%player%_FirstJoined` = 0;
        g`%player%_IsAlive` = "1";
        player::clear_potion_effects();
        player::send_title("%empty%", "%empty%", 0, 2, 0);
        player::message("%display_name% &fзашёл в мир");
    }
    else{
        code::break();
    }
}

event<player_quit>{
    world::hide_event_message();
    if(player::name_equals("none")){
        code::break();
    }
    TEMP = value::location<default>.get_block_material();
    if(g`%player%_FirstJoined`.equals(0)){
        player::message("%display_name% &fвышел из мира");
    }
    player::set_item_cooldown(0, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
    player::hide_entity(["portal_frame", "gravity_frame"], "FALSE");
    player::stop_sound([]);
    g`%player%_IsAlive` = "0";
    g`%player%_EnableLOOP` = "0";
    g`%player%_EnableMenuLOOP` = "0";
    if(g`%player%_InMenu`.equals(0)){
        CurrentLevel = g`%player%_Level`;
        NextLevel = 0;
        code::call_function("Lvl_UNLOAD");
    }
    g`%player%_Level` = 0;
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("intro*%player%"));
    if(CurrentLevel.equals(25)){
        select::add_entity_by_conditional(value::name<victim_entity>.text_starts_with(["fitem*stand*%player%", "fitem*display*%player%"]));
    }
    if(value::selection_size.greater("0.0")){
        entity::remove();
    }
    variable::purge("%player%", match="NAME_CONTAINS");
}

function Respawn{
    code::wait(1);
    code::call_function("DeathScreen");
    player::set_gamemode("ADVENTURE");
    player::set_allow_flying("FALSE");
    player::set_pvp("FALSE");
    player::set_death_drops("FALSE");
    player::set_inventory_kept();
    player::set_collidable("FALSE");
    player::set_nametag_visible("FALSE");
    player::set_instant_respawn("TRUE");
    player::set_simulation_distance(32);
    player::set_world_border(location(0, 0, 0, 0, 0), 1088, 0);
    player::set_attack_speed("100");
    player::give_potion_effect(potion("minecraft:haste", 255, -1), "FALSE", "FALSE", "NONE");
    player::set_flying("FALSE");
    player::play_animation_action("WAKE_UP");
    player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_hotbar_slot("4");
    player::hide_entity("portal_frame", "FALSE");
    g`%player%_InMenu` = 0;
    g`%player%_IsAlive` = "1.0";
    DisplayLvl = g`%player%_Level`.absolute();
    player::set_experience(DisplayLvl, "LEVEL");
    if(g`%player%_RespawnPoint`.not_equals(0)){
        if(g`%player%_HasPortalGunOnDeath`.equals("1")){
            g`%player%_GivePortalGun` = "1";
            g`%player%_HasPortalGunOnDeath` = 0;
        }
        if(g`%player%_HasGravityGunOnDeath`.equals("1")){
            g`%player%_GiveGravityGun` = "1";
            g`%player%_HasGravityGunOnDeath` = 0;
        }
    }
    code::call_function("LevelTP");
    if(g`%player%_RespawnPoint`.not_equals(0)){
        player::teleport(g`%player%_RespawnPoint`, "FALSE");
    }
    player::play_sound(sound("minecraft:item.trident.return", 1000, 0.5, "MASTER"), value::eye_location<default>);
    if(g`%player%_EnableLOOP`.equals("0.0")){
        g`%player%_EnableLOOP` = "1";
        code::start_process("PlLOOP");
    }
}

function DeathScreen{
    g`%player%_BloodTicks` = 0;
    player::stop_sound([]);
    player::clear_potion_effects();
    player::clear_inventory();
    player::send_action_bar("&r");
    player::set_boss_bar("empty_bar_1", "&r", 0);
    player::set_gamemode("SPECTATOR");
    player::set_allow_flying();
    player::set_pvp("FALSE");
    player::set_death_drops("FALSE");
    player::set_inventory_kept();
    player::set_collidable("FALSE");
    player::set_nametag_visible("FALSE");
    player::set_instant_respawn();
    player::set_world_border(location(0, 0, 0, 0, 0), 1088, 1088);
    code::start_process(p"ViewDistAsync");
    player::set_movement_speed(0, "FLY");
    player::teleport(g`%player%_DeathPos`, "FALSE");
    player::set_flying();
    player::send_title("&#46502a█", "&r", 0, 100, 0);
    player::play_sound(sound("minecraft:entity.allay.death", 1, 0.5, "MASTER"), value::eye_location<default>);
    code::wait(5, "SECONDS");
}

event<player_death>{
    world::cancel_event();
    TEMP = value::location<default>.get_block_material();
    g`%player%_InMenu` = "1";
    g`%player%_IsAlive` = "0";
    g`%player%_EnableLOOP` = "0";
    g`%player%_BloodTicks` = 0;
    g`%player%_PushUUID` = 0;
    g`%player%_DeathPos` = value::location<default>.shift_coordinate(-1, "Y");
    if(s`%player%_SettingEnableLvlTimer`.equals(1)){
        if(g`%player%_RespawnPoint`.equals(0)){
            g`%player%_IsLvlTimerEnabled` = 0;
            g`%player%_CurrentLvlTime` = 0;
        }
    }
    g`%player%_HasPortalGunOnDeath` = g`%player%_HasPortalGun`;
    g`%player%_HasGravityGunOnDeath` = g`%player%_HasGravityGun`;
    code::call_function(p"ResetVars");
    CurrentLevel = g`%player%_Level`;
    code::call_function("UnloadPrtls");
    code::call_function("ClearRoomCubes");
    code::call_function(p"UNLOAD_BallB");
    if(g`%player%_Level`.equals(25)){
        select::entity_by_conditional("%selected%".text_starts_with(["fitem*stand*%player%", "fitem*display*%player%"]));
        if(value::selection_size.greater(0)){
            entity::remove();
        }
        select::reset();
        variable::purge("%player%_FItem", match="NAME_CONTAINS");
    }
    variable::purge("TrigData*%player%*", match="NAME_CONTAINS");
    code::call_function(p"Respawn");
}

event<player_move>{
    if(g`%player%_InMenu`.equals(0)){
        NewPlayerPos = value::event_new_location<default>;
        if(g`%player%_EndCorner1`.not_equals(0)){
            if(NewPlayerPos.location_in_range(g`%player%_EndCorner1`, g`%player%_EndCorner2`, "FULL_BLOCK_RANGE")){
                if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                    code::call_function("LevelChange");
                }
            }
        }
        if(g`%player%_Clear1Corner1`.not_equals(0)){
            if(g`%player%_ClearUnused`.equals(0)){
                if(NewPlayerPos.location_in_range(g`%player%_Clear1Corner1`, g`%player%_Clear1Corner2`, "FULL_BLOCK_RANGE")){
                    g`%player%_ClearUnused` = 1;
                    code::call_function("UnloadPrtls");
                    code::call_function("ClearRoomCubes");
                    CurrentLevel = g`%player%_Level`;
                    code::call_function(p"UNLOAD_BallB");
                    if(g`%player%_PossibleRespawnPos`.not_equals(0)){
                        g`%player%_RespawnPoint` = g`%player%_PossibleRespawnPos`;
                    }
                }
            }
        }
        code::call_function("MoveEvent2");
    }
    else{
        world::cancel_event();
    }
}

function MoveEvent2{
    if(g`%player%_Dialog1Corner1`.not_equals(0)){
        if((g`%player%_DialogTrigger.0`).equals(0)){
            if(NewPlayerPos.location_in_range(g`%player%_Dialog1Corner1`, g`%player%_Dialog1Corner2`, "FULL_BLOCK_RANGE")){
                g`%player%_DialogTrigger.0` = 1;
                code::call_function(p"MoveDialogs.0");
            }
        }
    }
    if(g`%player%_Dialog2Corner1`.not_equals(0)){
        if((g`%player%_DialogTrigger.1`).equals(0)){
            if(NewPlayerPos.location_in_range(g`%player%_Dialog2Corner1`, g`%player%_Dialog2Corner2`, "FULL_BLOCK_RANGE")){
                g`%player%_DialogTrigger.1` = 1;
                code::call_function(p"MoveDialogs.1");
            }
        }
    }
}

function FirstLevelLoad{
    g`%player%_Level` = -1;
    NextLevel = 0;
    code::call_function("Lvl_LOAD");
    g`%player%_Level` = NextLevel;
    code::call_function(p"MusicPlay");
    FancyTitleArgs = ["« CUBED »", "&#ffb657&l", "%empty%", "%empty%", 50, 10, 5, 20, 0, 0, 0, 0, 0, "smallcaps"];
    code::start_process(p"FancyTitleAsync", "COPY");
    if(s`%player%_SettingDisableIntro`.equals("0.0")){
        g`%player%_IntroStarted` = 1;
        player::teleport(location(0.5, 6, 23.5, 90, 0), "FALSE");
        player::play_animation_action("WAKE_UP");
        code::call_function("IntroMount");
        g`%player%_ShowDialog` = 1;
        WaitTicks = 20;
        code::call_function(p"DialogWait");
        Messages = ["audio|cubed.dialog.intro_1", "text|Добро пожаловать в Исследовательский Центр Бионических Грузовых Кубов|94", "text|корпорации NEWTECH. Мы надеемся, что ваше пробуждение прошло успешно.|106", "text|Меня зовут P.E.R.S.O.N.A., и сегодня я буду вашим ассистентом.|80", "text|Ваша задача — пройти серию испытаний, направленных на изучение взаимодействия|100", "text|человека с грузовыми кубами в условиях контролируемой среды.|84", "text|Когда двери откроются, проследуйте к выходу, чтобы начать тестирование.|112"];
        code::call_function(p"DialogAudio");
        TPPos = value::location<default>.shift_coordinate("18.0", "Z");
        player::teleport(TPPos);
        g`%player%_IntroStarted` = 0;
    }
    else{
        player::teleport(location(0.5, 6, 41.5, 90, 0), "FALSE");
        player::play_animation_action("WAKE_UP");
        Messages = ["audio|cubed.dialog.intro_2", "text|Проследуйте к выходу, чтобы начать тестирование.|88"];
        code::start_process(p"DialogAudioAsync", "COPY");
    }
    player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(-1.5, 6.5, 41.5, 0, 0));
    player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(0.5, 6.5, 47.5, 0, 0));
}

function LevelChange{
    code::call_function(p"CheckIfDialog");
    CurrentLevel = g`%player%_Level`;
    NextLevel = g`%player%_NextLvl`;
    code::call_function("SecretChance");
    if(NextLevel.equals(21)){
        if(g`%player%_R20Ending`.equals(0)){
            code::call_function("R20_End");
            code::break();
        }
    }
    if(NextLevel.equals(30)){
        if(g`%player%_R29Ending`.equals(0)){
            code::call_function("R29_End");
            code::break();
        }
    }
    if(NextLevel.equals(-35)){
        if(g`%player%_R35Ending`.equals(0)){
            code::call_function("R35_End");
            code::break();
        }
    }
    if(CurrentLevel.equals([101, 102])){
        BonusLvlNum = variable::subtract([CurrentLevel, 100]);
        s`%player%_CompleteB%var_local(BonusLvlNum)` = 1;
        EndMsg = "&#abc4d6 Бонусный уровень &#ffb657%var_local(BonusLvlNum) &#abc4d6пройден!";
    }
    code::call_function("LevelChangeEnd");
}

function LevelChangeEnd{
    if(NextLevel.not_equals(0)){
        code::call_function("Lvl_UNLOAD");
        code::call_function("Lvl_LOAD");
        g`%player%_Level` = NextLevel;
        DisplayLvl = g`%player%_Level`.absolute();
        if(NextLevel.not_equals([-33, -35])){
            code::call_function("SaveLvlTime");
        }
        if(g`%player%_Level`.not_equals([101, 102])){
            s`%player%_SavedLevel` = g`%player%_Level`.absolute();
            if(s`%player%_MaxPlayedLevel`.less(s`%player%_SavedLevel`)){
                s`%player%_MaxPlayedLevel` = s`%player%_SavedLevel`;
            }
        }
        code::call_function(p"Transition");
        player::set_experience(DisplayLvl, "LEVEL");
        code::call_function(p"LevelTP");
    }
    else{
        player::stop_sound([]);
        code::call_function("SaveLvlTime");
        code::call_function(p"Transition");
        code::call_function("PlToMenu");
        player::message(EndMsg);
    }
}

function R20_End{
    g`%player%_R20Ending` = 1;
    code::call_function("Lvl_UNLOAD");
    code::call_function("Lvl_LOAD");
    g`%player%_Level` = NextLevel;
    code::call_function("SaveLvlTime");
    s`%player%_SavedLevel` = g`%player%_Level`;
    if(s`%player%_MaxPlayedLevel`.less(s`%player%_SavedLevel`)){
        s`%player%_MaxPlayedLevel` = s`%player%_SavedLevel`;
    }
    player::set_item_cooldown(60, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_item_cooldown(60, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
    code::wait(20);
    if not (value::location<default>.in_range(location(-105, 19, 107, 0, 0), location(-109, 24, 112, 0, 0))){
        player::teleport(location(-107.5, 20, 101.5, -90, 0), "FALSE", "TRUE");
    }
    else{
        R20_TPPos = value::location<default>.shift_coordinate(-8, "Z");
        player::teleport(R20_TPPos, keep_velocity="TRUE");
    }
    player::stop_sound([]);
    player::play_sound(sound("minecraft:block.iron_door.close", 1, 1.25, "MASTER"), location(-104.5, 20.5, 101.5, 0, 0));
    code::wait(40);
    code::call_function(p"Transition");
    player::set_experience(g`%player%_Level`, "LEVEL");
    code::call_function("LevelTP");
    g`%player%_R20Ending` = 0;
}

function LevelTP{
    code::call_function(p"ResetVars");
    TitleMsg = "";
    if(g`%player%_Level`.equals("1.0")){
        TitleMsg = "АКТ 1: Пробуждение";
        Messages = ["audio|cubed.dialog.lvl_1", "text|Добро пожаловать в первую испытательную комнату. Ваша задача — добраться|100", "text|до выхода, используя грузовые кубы для решения головоломок.|92", "text|Обращайте внимание на обучающие таблички. Они содержат важную информацию.|130"];
    }
    if(g`%player%_Level`.equals("2.0")){
        Messages = ["audio|cubed.dialog.lvl_2", "text|Вы успешно завершили первую испытательную комнату. Данный результат|96", "text|подтверждает вашу способность адаптироваться к поставленным задачам.|86", "text|Обратите внимание: грузовые кубы обладают высокой прочностью и могут|106", "text|использоваться в качестве платформ для доступа к труднодоступным местам.|112"];
    }
    if(g`%player%_Level`.equals("3.0")){
        Messages = ["audio|cubed.dialog.lvl_3", "text|Некоторые механизмы требуют активации нескольких нажимных плит. Некоторые|106", "text|из них могут находиться в специальных нишах в стенах. Осматривайте окружающее|100", "text|пространство внимательно, чтобы выявить все необходимые элементы для|86", "text|решения головоломки.|50"];
    }
    if(g`%player%_Level`.equals("4.0")){
        Messages = ["audio|cubed.dialog.lvl_4", "text|Вы уверенно продвигаетесь вперёд. По завершении всех испытаний для вас|104", "text|подготовлена награда. Ожидается, что она послужит дополнительной мотивацией|100", "text|для успешного прохождения тестов.|62"];
    }
    if(g`%player%_Level`.equals("5.0")){
        Messages = ["audio|cubed.dialog.lvl_5", "text|В этот раз для открытия дверного механизма потребуется активировать две|96", "text|нажимные плиты, расположенные в соседних комнатах. Будьте внимательны!|100", "text|Некоторые головоломки спроектированы таким образом, чтобы вводить|86", "text|испытуемых в заблуждение.|56"];
    }
    if(g`%player%_Level`.equals("8.0")){
        Messages = ["audio|cubed.dialog.lvl_8", "text|Вода в испытательных комнатах полностью безопасна для человека. Раз в месяц|118", "text|лаборатория проводила анализ её состава на наличие нежелательных|94", "text|микроорганизмов. Честно говоря, это выглядело как нецелесообразное|96", "text|расходование ресурсов. Эти средства можно было бы направить на более|84", "text|перспективные исследования. Но… «безопасность испытуемых превыше всего».|102", "text|В любом случае, старайтесь избегать попадания воды в дыхательные пути|98", "text|или пищеварительный тракт.|54"];
    }
    if(g`%player%_Level`.equals("9.0")){
        Messages = ["audio|cubed.dialog.lvl_9", "text|В этой комнате используются лазерные активаторы. Они предназначены для|96", "text|запуска или, в данном случае, блокировки механизмов. Возможно, вам покажется,|110", "text|что лазеры опасны. Это не так. Как и всё здесь, они полностью безопасны как|116", "text|для испытуемых, так и для оборудования. Ранее поступали жалобы на ухудшение|114", "text|самочувствия после длительного воздействия лазерных лучей. Конечно, эти слухи|116", "text|не имели под собой научных оснований… Скорее всего, это была попытка|94", "text|конкурентов очернить нашу работу и переманить испытуемых.|98"];
    }
    if(g`%player%_Level`.equals(11)){
        ActTitleMsg = "Конец АКТА 1";
        code::call_function("ActEnding");
        TitleMsg = "АКТ 2: Тени прошлого";
        Messages = ["audio|cubed.dialog.lvl_11", "text|Вот ты где. Ты попала в старый комплекс испытаний. Когда-то здесь|100", "text|тестировались первые модели грузовых кубов и другие прототипы технологий.|104", "text|Некоторые из этих разработок были успешными… другие — не совсем. Мне нужно|112", "text|время, чтобы просканировать местность и найти выход в новый комплекс.|90", "text|Пока что продолжай двигаться к выходу.|60"];
    }
    code::call_function("LevelTP2");
}

function LevelTP2{
    if(g`%player%_Level`.equals(12)){
        Messages = ["audio|cubed.dialog.lvl_12", "text|В этих зонах камеры наблюдения работают с перебоями. Мне сложнее определить|110", "text|твоё точное местоположение, а значит, поиск выхода может занять больше|98", "text|времени. Но ты ведь не собираешься теряться, верно?|86"];
    }
    if(g`%player%_Level`.equals(13)){
        Messages = ["audio|cubed.dialog.lvl_13", "text|О, похоже, ты нашла одно из наших ранних изобретений — переносное устройство|114", "text|создания порталов. Когда-то оно активно использовалось в тестированиях, но|104", "text|наши конкуренты оказались быстрее с патентами. Пришлось сменить вектор|94", "text|развития. С этого момента постарайся избегать контакта с водой. Встроенные|106", "text|в устройство компоненты не предназначены для взаимодействия с жидкостями…|88", "text|последствия могут быть непредсказуемыми.|70"];
    }
    if(g`%player%_Level`.equals(14)){
        Messages = ["audio|cubed.dialog.lvl_14", "text|Из-за нехватки ресурсов некоторые комнаты оснащены устаревшими моделями|108", "text|грузовых кубов MK1. Они тяжелее, но в целом мало чем уступают современным|120", "text|версиям. Разве что материалы не такие прочные. Это была первая разработка|110", "text|основателя нашей компании. Он покинул прежнее место работы, чтобы воплотить|96", "text|свою идею в жизнь… и смог создать нечто по-настоящему великое. Забавно, как|106", "text|всё начиналось с простой конструкции, не так ли?|74"];
    }
    if(g`%player%_Level`.equals(17)){
        Messages = ["audio|cubed.dialog.lvl_17", "text|Вот ещё одно из наших старых изобретений — сверхтяжелый грузовой куб.|108", "text|Разработанный специально для работы с… …с устройством создания порталов.|114", "text|После закрытия этого комплекса было принято решение прекратить|90", "text|их дальнейшую разработку.|52"];
    }
    if(g`%player%_Level`.equals(18)){
        Messages = ["audio|cubed.dialog.lvl_18", "text|Среди сотрудников ходили слухи, что именно сверхтяжелые грузовые кубы стали|122", "text|причиной того несчастного случая. В тот день несколько испытуемых проводили|104", "text|тесты с этими кубами и лазерными активаторами. Я следила за процессом через|104", "text|камеры и фиксировала данные, но внезапно… все камеры отключились.|98", "text|Что произошло дальше, мне не сообщили.|72"];
    }
    if(g`%player%_Level`.equals(19)){
        Messages = ["audio|cubed.dialog.lvl_19", "text|Направление луча лазерного активатора можно изменить с помощью порталов.|112", "text|При телепортации учитывается точка попадания: если луч входит в нижнюю часть портала,|122", "text|на выходе он тоже появится снизу, а если входит сверху — выйдет сверху.|112"];
    }
    if(g`%player%_Level`.equals(20)){
        Messages = ["audio|cubed.dialog.lvl_20", "text|Большинство камер в этой испытательной комнате повреждены. Но, согласно моим|98", "text|данным, в конце находится зона для персонала. Там должен быть лифт,|90", "text|ведущий в новый комплекс.|46"];
    }
    if(g`%player%_Level`.equals(21)){
        ActTitleMsg = "Конец АКТА 2";
        code::call_function("ActEnding");
        code::call_function("ACT3Intro");
    }
    if(g`%player%_Level`.equals(22)){
        Messages = ["audio|cubed.dialog.lvl_22", "text|Для оптимизации работы с лазерными системами было разработано специальное|108", "text|устройство – лазерное реле. Оно позволяет лучу проходить сквозь себя,|96", "text|одновременно активируя связанные с ним механизмы.|80"];
    }
    if(g`%player%_Level`.equals(24)){
        Messages = ["audio|cubed.dialog.lvl_24", "text|Ты справляешься удивительно хорошо, особенно учитывая сложность и… неожиданные|118", "text|обстоятельства. Испытуемые подобного уровня редкость. Обычно тестированию|116", "text|подвергаются те, чья жизнь… нуждается в новом направлении. Существует очередь,|122", "text|согласно которой испытуемые пробуждаются в своих камерах отдыха. Любопытно,|112", "text|что твоя очередь подошла так быстро. Но, полагаю, система знает, что делает.|126"];
    }
    code::call_function(p"LevelTP3");
    code::call_function("LevelTPEnd");
}

function LevelTP3{
    if(g`%player%_Level`.equals(25)){
        Messages = ["audio|cubed.dialog.lvl_25", "text|Прекрасно! В соответствии со стандартной процедурой тестирования,|90", "text|это – заключительное испытание основного курса. После его завершения тебе|110", "text|будет предоставлена особая награда, соответствующая показанным результатам.|116"];
    }
    if(g`%player%_Level`.equals(26)){
        TitleMsg = "АКТ 3.2: Последняя встреча";
        Messages = ["audio|cubed.dialog.lvl_26", "text|Стой. Давай не будем делать глупостей. Тебе лучше остаться на месте и|112", "text|дождаться помощи. Бродить по этому комплексу… скажем так, не рекомендуется.|114", "text|Хотя, конечно, если ты так отчаянно хочешь оказаться в списке|76", "text|«несчастных случаев», я не стану мешать.|76"];
    }
    if(g`%player%_Level`.equals(27)){
        Messages = ["audio|cubed.dialog.lvl_27", "text|Ну конечно. Очередное блестящее решение — полностью игнорировать мой совет.|118", "text|Знаешь, мне даже стало интересно, насколько далеко ты зайдёшь. Надеюсь, тебе|104", "text|понравится этот заброшенный комплекс. Судя по его состоянию, ты тут надолго.|138"];
    }
    if(g`%player%_Level`.equals(28)){
        Messages = ["audio|cubed.dialog.lvl_28", "text|Поздравляю, перед вами одно из величайших изобретений науки — энергетические|100|1", "text|шары! Маленькие сферы чистой, концентрированной энергии, которые могут|86|1", "text|активировать что угодно. Всё, что вам нужно, — перенаправить шар в приёмник.|106|1"];
    }
    if(g`%player%_Level`.equals(29)){
        Messages = ["audio|cubed.dialog.lvl_29", "text|Вижу, ты тут развлекаешься. На удивление, видеокамеры в этой части комплекса|128", "text|всё ещё работают. Похоже, твой сообщник так и не сумел сюда добраться. Эти|114", "text|аудиозаписи, как я понимаю, были созданы основателем ещё до того, как я была|146", "text|спроектирована. Мои познания о нём ограничиваются архивными документами,|76", "text|но кажется, он был весьма любопытным человеком.|90"];
    }
    if(g`%player%_Level`.equals(31)){
        Messages = ["audio|cubed.dialog.lvl_31", "text|Ты всё ещё жива? Впечатляет. Ты действительно достойный кандидат. Большинство|122", "text|твоих «коллег» не продержались так долго — они заканчивали свой путь ещё во|98", "text|втором комплексе. Да, кстати, он тоже был частью испытаний. Прости, что|106", "text|немного слукавила. Кажется, кто-то из твоих преданных фанатов даже добрался|92", "text|туда и попытался испортить оборудование. Но, похоже, всё, что у него|94", "text|вышло, — это слегка повредить камеры наблюдения. Как жаль.|112"];
    }
    if(g`%player%_Level`.equals(32)){
        Messages = ["audio|cubed.dialog.lvl_32", "text|Вы, возможно, задавались вопросом: «Если в кубе есть отражающая линза, может|92|1", "text|ли он отражать лазеры?» Ответ: да, вы догадливы. Но догадаетесь ли вы, что,|102|1", "text|чтобы повернуть куб, нужно установить его на специальный поворотный рельс?|78|1", "text|В следующий раз думайте шире, если хотите повышения.|88|1"];
    }
    if(g`%player%_Level`.equals(33)){
        Messages = ["audio|cubed.dialog.lvl_33", "text|Приятные новости! У меня теперь полный доступ к управлению этим комплексом.|118", "text|Так что я приготовила для тебя небольшой сюрприз. Просто стой спокойно…|92", "text|и наслаждайся градом пуль.|62"];
    }
    if(g`%player%_Level`.equals(34)){
        Messages = ["audio|cubed.dialog.lvl_34", "text|На этом этапе вам снова выдаётся переносное устройство создания порталов.|94|1", "text|Надеюсь, вы ещё помните, как им пользоваться. Если нет — можете оставить|80|1", "text|заявление на увольнение у меня в офисе.|61|1"];
    }
    if(g`%player%_Level`.equals(35)){
        Messages = ["audio|cubed.dialog.lvl_35", "text|Если вы слышите эту запись, значит, у вас есть шанс получить солидный бонус за|90|1", "text|свои успехи. Забудьте про 8 долларов в час. Теперь можете мечтать о 10… или|102|1", "text|даже 12. А если амбиции позволяют, вы можете подать заявку на должность|92|1", "text|проектировщика тестов. Привлекательно, не правда ли? Ах да, к слову, эту|94|1", "text|тестовую комнату спроектировала моя дочь, когда ей было всего 9 лет.|88|1", "text|Сожалею, но конкуренция у вас серьёзная.|80|1"];
    }
    if(g`%player%_Level`.equals(888)){
        Messages = 0;
        player::message(["&r", "&#abc4d6 ⧈ &#ffb657&lCUBED", m"<font:smallcaps><#abc4d6> Если вам понравился мир, то", m"<font:smallcaps><#abc4d6> поддержите его, поставив <#ffb657>/vote", "&r"], "SEPARATE_LINES");
        if(s`%player%_Ending2`.equals(1)){
            player::message(["&f Если вы не видили персонажа во второй концовке,", "&f включите &eИсправления при Optifine&f в настройках", "&8 (@menu -> Настройки -> Исправления при Optifine)", "&r"], "SEPARATE_LINES");
        }
    }
}

function LevelTPEnd{
    if(g`%player%_Level`.not_equals([21, -33, -35])){
        player::teleport(g`%player%_LvlSpawnPos`, "FALSE");
        player::play_animation_action("WAKE_UP");
    }
    if(g`%player%_RespawnPoint`.equals(0)){
        TitleSubtext = "Уровень №%var(%player%_Level)";
        TitleSubtextColor = "&#abc4d6";
        if(g`%player%_IsInSecret`.equals(1)){
            TitleSubtext = "Уровень №%math(%var(%player%_Level)*-1)?";
            TitleSubtextColor = "&#7a8085";
        }
        if(g`%player%_Level`.not_equals([888, 21, -33, -35])){
            FancyTitleArgs = [TitleMsg, "&#ffb657&l", TitleSubtext, TitleSubtextColor, 50, 10, 2, 20, 0, 0, 0, 0, 0, "smallcaps"];
            code::start_process(p"FancyTitleAsync", "COPY");
        }
    }
    player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`]);
    player::set_item_cooldown(999999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
    code::call_function("LevelTPItems");
    if(g`%player%_PortalStandPos`.not_equals(0)){
        player::hide_entity("portal_frame", "FALSE");
    }
    if(g`%player%_GravityStandPos`.not_equals(0)){
        player::hide_entity("gravity_frame", "FALSE");
    }
    if(g`%player%_Level`.not_equals(21)){
        player::stop_sound([]);
        g`%player%_GameMusic` = 0;
    }
    code::call_function(p"LevelTPEnd2");
}

function ButtonDeleteCube{
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("cube_stand*%player%*%var_local(ID)*"));
    if(value::selection_size.greater("0.0")){
        repeat::for_each_in_list(value_variable=StandUUID, list=value::selection_target_uuids){
            if(g`%player%_PickedUUID`.equals(StandUUID)){
                g`%player%_CubePicked` = "0";
                g`%player%_PickedUUID` = "none";
            }
            if(g`%player%_GravityPickUUID`.equals(StandUUID)){
                g`%player%_GravityPickUUID` = 0;
            }
            g`%var_local(StandUUID)_IsDeleted` = "1";
        }
    }
    select::reset();
}

function ClearRoomCubes{
    g`%player%_CubePicked` = "0";
    g`%player%_PickedUUID` = "none";
    g`%player%_GravityPickUUID` = 0;
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("cube_stand*%player%*"));
    if(value::selection_size.greater("0.0")){
        repeat::for_each_in_list(value_variable=StandUUID, list=value::selection_target_uuids){
            code::call_function("DeletePlCubes");
        }
    }
    select::reset();
}

function ActEnding{
    g`%player%_InActSwitch` = 1;
    player::set_gamemode("SPECTATOR");
    player::set_movement_speed("0", "FLY");
    player::give_potion_effect(potion("minecraft:blindness", 0, 2147483647), "FALSE", "FALSE", "NONE");
    player::set_boss_bar("empty_bar_1", "&r", 0);
    player::teleport(location(0.5, 19, 9.5, 0, 0), "FALSE");
    player::stop_sound([]);
    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.elytra.flying", 1, 0.5, "MASTER"));
    FancyTitleArgs = ["%empty%", "%empty%", ActTitleMsg, "&#ffb657&l", 90, 10, 2, "20", 0, 0, 0, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    code::wait(100);
    code::call_function(p"Transition");
    player::clear_potion_effects();
    player::stop_sound([]);
    player::set_gamemode("ADVENTURE");
    player::give_potion_effect(potion("minecraft:haste", 255, -1), "FALSE", "FALSE", "NONE");
    g`%player%_InActSwitch` = 0;
}

function WAIT{
    if(value::cpu_usage.greater_or_equals(90)){
        code::wait(2);
        FallVelocity = variable::add([FallVelocity, 0.2]);
        code::call_function("WAIT");
    }
}

function CLEAR_ENT{
    repeat::on_range(ChunkZ, -176, 143, 16){
        repeat::on_range(ChunkX, -144, 127, 16){
            TEMP = variable::set_all_coordinates(ChunkX, 20, ChunkZ);
            TEMP = TEMP.get_block_material();
        }
    }
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with(["intro*", "sign*", "cube_stand*", "cube_marker*", "cube_shulker*", "cube_sand*", "portal*", "laser*", "lpad*", "mplat*", "fan*", "fitem*", "ball*", "turret*", "spider*", "boss*", "ecore*", "decor*"]));
    select::add_entity_by_conditional(entity::has_custom_tag("name", ["cube_sand*", "ball*"], "STARTS_WITH"));
    if(value::selection_size.greater("0.0")){
        entity::remove();
    }
    select::reset();
}

function Dialog{
    g`%player%_ShowDialog` = 1;
    repeat::for_each_in_list(value_variable=Message, list=Messages){
        MessageList = Message.split_text("%empty%");
        SendedMessage = "&#abc4d6";
        repeat::for_each_in_list(value_variable=Character, list=MessageList){
            if(g`%player%_ShowDialog`.equals(0)){
                player::remove_boss_bar("dialog_bar");
                code::break();
            }
            SendedMessage = variable::set_text([SendedMessage, Character], "CONCATENATION");
            player::set_boss_bar("dialog_bar", SendedMessage, 0);
            player::play_sound_from_entity(value::name<default>, sound("minecraft:item.flintandsteel.use", 1, 2, "MASTER"));
            code::wait("1");
        }
        WaitTicks = 12;
        code::call_function("DialogWait");
    }
    WaitTicks = 32;
    code::call_function("DialogWait");
    g`%player%_ShowDialog` = 0;
    player::remove_boss_bar("dialog_bar");
}

process AsyncDialog{
    code::wait(1);
    g`%player%_ShowDialog` = 1;
    code::wait(19, "TICKS");
    repeat::for_each_in_list(value_variable=l`%player%_InnerMessages`, list=Messages){
        l`%player%_InnerMessagesList` = l`%player%_InnerMessages`.split_text(";");
        repeat::for_each_in_list(value_variable=l`%player%_Message`, list=l`%player%_InnerMessagesList`){
            l`%player%_MessageList` = l`%player%_Message`.split_text("%empty%");
            l`%player%_SendedMessage` = "&#abc4d6";
            if(AsyncIsSecret.equals(1)){
                l`%player%_SendedMessage` = "&#7a8085&kA&#7a8085";
                l`%player%_MessageList`.append_value("&kA");
            }
            repeat::for_each_in_list(value_variable=l`%player%_Character`, list=l`%player%_MessageList`){
                if(g`%player%_ShowDialog`.equals(0)){
                    player::remove_boss_bar("dialog_bar");
                    code::break();
                }
                if(AsyncIsSecret.equals(1)){
                    if(l`%player%_Character`.equals("%space%")){
                        l`%player%_Character` = "&kA&#7a8085";
                    }
                }
                l`%player%_SendedMessage` = variable::set_text([l`%player%_SendedMessage`, l`%player%_Character`], "CONCATENATION");
                player::set_boss_bar("dialog_bar", l`%player%_SendedMessage`, 0);
                if(AsyncIsSecret.equals(0)){
                    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.flintandsteel.use", 1, 2, "MASTER"));
                }
                else{
                    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.flintandsteel.use", 0.5, 0.5, "MASTER"));
                }
                code::wait("1");
            }
            l`%player%_WaitTicks` = 12;
            code::call_function("DialogWait");
        }
        l`%player%_WaitTicks` = 32;
        code::call_function("DialogWait");
    }
    l`%player%_WaitTicks` = 32;
    code::call_function("DialogWait");
    g`%player%_ShowDialog` = 0;
    player::remove_boss_bar("dialog_bar");
}

function SoundCollide{
    code::call_function("WAIT");
    if(l`%var_local(ID)_LocalCollided`.equals("1")){
        if(l`%var_local(ID)_SoundPlayed`.equals("0.0")){
            l`%var_local(ID)_SoundPlayed` = "1";
            player::play_sound_from_entity(value::uuid<current>, sound("minecraft:block.bone_block.break", 1, 1.26, "MASTER"));
            player::display_particle(particle("BLOCK", 10, 0, 0, 0, 0, 0, material="IRON_BLOCK"), EndCollisionPos);
        }
    }
    else{
        if(l`%var_local(ID)_SoundPlayed`.equals("1")){
            l`%var_local(ID)_SoundPlayed` = "0.0";
        }
    }
}

function TransformRot{
    code::call_function("WAIT");
    RotVectX = RotVect.get_vector_component();
    RotVectZ = RotVect.get_vector_component("Z");
    AbsRotVectX = RotVectX.absolute();
    AbsRotVectZ = RotVectZ.absolute();
    MaxRotVal = variable::max([AbsRotVectX, AbsRotVectZ]);
    if(MaxRotVal.equals(AbsRotVectX)){
        if(RotVectX.greater("0")){
            RotVect = variable::set_vector("1", "0", "0");
        }
        else{
            RotVect = variable::set_vector("-1", "0", "0");
        }
    }
    if(MaxRotVal.equals(AbsRotVectZ)){
        if(RotVectZ.greater("0")){
            RotVect = variable::set_vector("0", "0", "1");
        }
        else{
            RotVect = variable::set_vector("0", "0", "-1");
        }
    }
}

process EntityMoveUP{
    MovePos = value::location<default>.set_coordinate(Height, "Y");
    if(value::entity_type<default>.equals("player")){
        player::teleport(MovePos);
    }
    else{
        entity::teleport(MovePos);
    }
}

event<player_click_own_inventory>{
    if(player::has_privilege("WHITELISTED")){
        if(player::gamemode_equals("CREATIVE")){
            code::break();
        }
    }
    world::cancel_event();
}

event<player_click_inventory>{
    world::cancel_event();
    if(g`%player%_InMenu`.equals(1)){
        if(value::open_inventory_title<default>.equals("Настройки")){
            if(value::event_item.item_has_tag("setting_type", "intro")){
                if(s`%player%_SettingDisableIntro`.equals("0.0")){
                    s`%player%_SettingDisableIntro` = "1";
                    player::set_inventory_menu_item(g`ItemSettingIntroOFF`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
                else{
                    s`%player%_SettingDisableIntro` = "0";
                    player::set_inventory_menu_item(g`ItemSettingIntroON`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
            }
            if(value::event_item.item_has_tag("setting_type", "tips")){
                if(s`%player%_SettingDisableTips`.equals("0")){
                    s`%player%_SettingDisableTips` = "1";
                    player::set_inventory_menu_item(g`ItemSettingTipsOFF`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
                else{
                    s`%player%_SettingDisableTips` = "0";
                    player::set_inventory_menu_item(g`ItemSettingTipsON`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
            }
            if(value::event_item.item_has_tag("setting_type", "optifine")){
                if(s`%player%_IsUsingOptifine`.equals(0)){
                    s`%player%_IsUsingOptifine` = 1;
                    player::set_inventory_menu_item(g`ItemSettingOptifineON`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
                else{
                    s`%player%_IsUsingOptifine` = 0;
                    player::set_inventory_menu_item(g`ItemSettingOptifineOFF`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
            }
        }
    }
}

event<player_drag_inventory>{
    world::cancel_event();
}

event<player_drop_item>{
    world::cancel_event();
    g`%player%_IsHandSwing` = "1";
    code::wait(1);
    if(g`%player%_InMenu`.equals(0)){
        if not (player::gamemode_equals("SPECTATOR")){
            if(g`%player%_IntroStarted`.equals(0)){
                if(g`%player%_IsAlive`.equals("1")){
                    if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                        code::call_function("PlToPauseMenu");
                    }
                }
            }
        }
    }
}

event<player_rejoin>{
    world::cancel_event();
    if(g`%player%_FirstJoined`.equals(1)){
        g`%player%_SkipFristLoading` = 1;
    }
    else{
        if(g`%player%_InMenu`.equals(0)){
            if(g`%player%_IntroStarted`.equals(0)){
                if not (player::gamemode_equals("SPECTATOR")){
                    if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                        player::send_title("&r", "&r", 0, 2, 0);
                        code::call_function(p"PlToMenu");
                    }
                }
            }
        }
    }
}

event<player_food_level_change>{
    world::cancel_event();
    player::set_saturation(20);
}

event<player_jump>{
    if(g`%player%_InMenu`.equals(0)){
        g`%player%_IsJumped` = "1.0";
    }
}

event<player_take_damage>{
    if(world::damage_cause_equals("FALL")){
        world::cancel_event();
        code::break();
    }
    if(player::is_near(1, location(101.5, 63.5, -215.5, 0, 0), "TRUE")){
        world::cancel_event();
        code::break();
    }
    g`%player%_BloodTicks` = 50;
}

event<player_damage_entity>{
    world::cancel_event();
}

event<player_right_click_entity>{
    world::cancel_event();
}

event<hanging_break>{
    world::cancel_event();
}

function PlTimerTicks{
    NeedTimerBar = 0;
    TimerBarTxt = "%empty%";
    if(g`%player%_IsSpeedrun`.equals(1)){
        NeedTimerBar = 1;
        g`%player%_CurrentSpeedrunTime` = variable::add([g`%player%_CurrentSpeedrunTime`, 1]);
        SpeedrunTimeMillis = variable::multiply([g`%player%_CurrentSpeedrunTime`, 50]);
        SpeedrunTimeFormat = SpeedrunTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
        g`%player%_SpeedrunTimeBarTxt` = variable::set_text(["&#ffb657⌚", SpeedrunTimeFormat]);
        TimerBarTxt = variable::set_text([TimerBarTxt, g`%player%_SpeedrunTimeBarTxt`], "CONCATENATION");
    }
    if(s`%player%_SettingEnableLvlTimer`.equals(1)){
        if(g`%player%_IsLvlTimerEnabled`.equals(1)){
            NeedTimerBar = 1;
            g`%player%_CurrentLvlTime` = variable::add([g`%player%_CurrentLvlTime`, 1]);
            LvlTimeMillis = variable::multiply([g`%player%_CurrentLvlTime`, 50]);
            LvlTimeFormat = LvlTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
            LvlTimeBarTxt = variable::set_text(["&#ffb657⌛", LvlTimeFormat]);
            if(TimerBarTxt.equals("%empty%")){
                TimerBarTxt = variable::set_text([TimerBarTxt, LvlTimeBarTxt], "CONCATENATION");
            }
            else{
                TimerBarTxt = variable::set_text([TimerBarTxt, "&#ffb657 | &#ffb657", LvlTimeBarTxt], "CONCATENATION");
            }
        }
    }
    if(NeedTimerBar.equals(1)){
        player::set_boss_bar("timer_bar", TimerBarTxt, 0);
    }
}

function PlCheckRMB{
    if not (player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDLzcxLTS5KTCuxSkstyk3NK0lNiS8uyExJLYpPrUxlZmBNzi/NK2FgYGBkAABx/hYDRwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
        code::break();
    }
    if(g`%player%_IsButtonClicking`.equals("1")){
        g`%player%_ArmSwingEvent` = "1";
        g`%player%_IsButtonClicking` = "0";
        code::break();
    }
    code::call_function("MenuButtons");
}

event<player_chat>{
    if(g`%player%_InPauseMenu`.equals(0)){
        if(player::has_privilege("WHITELISTED")){
            if(value::event_chat_message.text_starts_with("@level")){
                world::cancel_event();
                player::stop_sound([]);
                if(g`%player%_InMenu`.equals(1)){
                    code::call_function(p"PlayerSetup");
                }
                player::set_boss_bar("timer_bar", "&r", 0);
                if(g`%player%_IsSpeedrun`.equals(1)){
                    g`%player%_IsSpeedrun` = 0;
                    g`%player%_CurrentSpeedrunTime` = 0;
                }
                if(s`%player%_SettingEnableLvlTimer`.equals(1)){
                    g`%player%_IsLvlTimerEnabled` = 0;
                    g`%player%_CurrentLvlTime` = 0;
                }
                if(g`%player%_ShowScoreList`.equals(1)){
                    g`%player%_ShowScoreList` = 0;
                    player::display_hologram(g`HoloPos1`);
                    player::display_hologram(g`HoloPos2`);
                }
                code::call_function("ResetVars");
                g`%player%_IsInSecret` = 0;
                CurrentLevel = g`%player%_Level`;
                CMD = value::event_chat_message.split_text();
                NextLevel = CMD.get_list_value("1");
                NextLevel = variable::add([NextLevel, "0"]);
                code::call_function("Lvl_UNLOAD");
                code::call_function("Lvl_LOAD");
                g`%player%_Level` = NextLevel;
                DisplayLvl = g`%player%_Level`.absolute();
                player::set_experience(DisplayLvl, "LEVEL");
                code::call_function("LevelTP");
                s`%player%_SavedLevel` = DisplayLvl;
                if(g`%player%_Level`.equals([-33, -35])){
                    player::teleport(g`%player%_LvlSpawnPos`, "FALSE");
                }
            }
        }
    }
}

event<player_chat>{
    if(value::event_chat_message.text_starts_with("@")){
        world::cancel_event();
    }
    if(g`%player%_InMenu`.equals(0)){
        if(player::has_privilege("WHITELISTED")){
            if(player::chat_message_equals("@cube")){
                world::cancel_event();
                SpawnPos = value::eye_location<default>;
                player::message("&#d877f2[!] &#abc4d6Куб создан!");
                ID = "0.0";
                CubeType = "beacon";
                code::call_function("CreateCube");
            }
        }
        if(player::chat_message_equals(["@restart", "@reset"])){
            world::cancel_event();
            if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                code::call_function(p"LvlRestart");
            }
        }
    }
    if(player::chat_message_equals(["@limit", "@limits"])){
        player::message(["&f Текущая нагрузка мира:", "\\n&f - ЦПУ: ", value::cpu_usage, "%", "\\n&f - Частицы: ", value::particle_cpu_usage, "%"], "CONCATENATION");
    }
}

function CreateCube{
    code::call_function("WAIT");
    player::play_sound(sound("minecraft:block.beacon.activate", 1, 2, "MASTER"), SpawnPos);
    CubeFirstSpawn = "1.0";
    CubeRandUUID = "%random_uuid%";
    NameStand = variable::set_text(["cube_stand*%player%*", ID, "*", CubeType, "*", CubeRandUUID], "CONCATENATION");
    NameMarker = variable::set_text(["cube_marker*%player%*", ID, "*", CubeType, "*", CubeRandUUID], "CONCATENATION");
    NameShulker = variable::set_text(["cube_shulker*%player%*", ID, "*", CubeType, "*", CubeRandUUID], "CONCATENATION");
    NameSand = variable::set_text(["cube_sand*%player%*", ID, "*", CubeType, "*", CubeRandUUID], "CONCATENATION");
    DisplayedBlock = "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+hoeENiM4yZ0eysG8j+9LzdEjF1DPjgAHHe7DwSK1nKnB67rHNEeeaNUkLk11zo/pXobwHjMJFDcDGwQnrTE1q3eHy92XpxuorYyo+/uYH7KbCYH1cw9sHK19F4mO2fAAAAA==";
    if(CubeType.equals("heavy")){
        DisplayedBlock = "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhU3YWHhDIgtCo6rRiQ2Stydo0Mn3v7pOaDH6RYs3Lm2pAKMjwN2KWIqSZhqmO0ibAvXZOyfWenVYyBdxQB0Do60vFVYrDmc/4jWZlp80cjZx9/hiP2cNVgbNnj9YOsLWGFW+YEAAAA=";
    }
    if(CubeType.equals("beacon")){
        DisplayedBlock = "H4sIAAAAAAAA/0WNsQ7CMAwFH1RFECZm+BIWFr4BsUUmcVGkxEa1s/PptBM3nnS6AAw43snpwbMVFeD03GNbMi6tCKeZJr++audoTovI8V3JbMCYtIsD2ASEpO2jwuIWcP53qZtri00z15iXyQG7qSq5jWt4+2LlBwZroYiEAAAA";
    }
    if(CubeType.equals("thrower")){
        DisplayedBlock = "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+hoeENKJ1lzg6ysG9RfOnzdEjF1DPjgA7He7DwSFPLVOA07LHNEeeaNckURru+WKJ/Fsq7Qy+c1QBsHJywfqhJrTlc/r7MzVh9ZUzFx9/8gN1YGKz1a3hbsPIFraguQXwAAAA=";
    }
    if(CubeType.equals("rail")){
        DisplayedBlock = "H4sIAAAAAAAA/0WNsQ7CMAwFH1RFECZm+BImBr4BsUUmcVGkxK5q5/8pLNx40ukCMOB4J6cHL1ZUgNNzj23JuLQinBaa/PqqnaM5rSLHdyWzAWPSLg5gExCStlmFxS3g/O9SN9cWm2auMa+TA3ZTVXIbv+ENPz4c3zGMhAAAAA==";
    }
    code::call_function(p"CbSpawnStand");
    code::call_function(p"CbSpawnMarker");
    code::call_function(p"CbSpawnShulker");
    code::call_function(p"CbSpawnSand");
    SavedStandPos = location(0, 0, 0, 0, 0);
    CheckTick = "3.0";
    PortalUUID = "none";
    code::start_process("CubeLOOP", "COPY");
}

function CbSpawnStand{
    code::call_function("WAIT");
    world::spawn_mob("H4sIAAAAAAAA/1WQwW7CQAxEZ4tKSdpG4kDVb+kRuHDppRLqLTIbByw2u9HuJoivb51yQPXNI/vNaEpghuctZdpzTBI8sPxe4EEavHfi2UZq88dpSOc69XTxNR+PMzzaMPgMwJQobej64NnnVGJ1/1FB8rVuFG0w/xKngrmRq/9kg+VmSDl0n9TxXpIcHMPgdUN+HZnO2xBiUmG+S2s6XE2BimyWkWtuW7aTryYxqNIpXOqeYhbrOOFm9nY3Ez9OdHEazOCJuoNoKC2goK530gpHJem+aIZIWdv40TEo/sBip3YMXnZ+HJznSJrT6P0vgwc2oUQBAAA=", SpawnPos, custom_name=NameStand, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    select::last_entity();
    StandUUID = value::uuid<current>;
    entity::set_aware("FALSE");
    entity::set_custom_name_visibility("FALSE");
    entity::set_silenced();
    entity::set_death_drops("FALSE");
    entity::set_collidable("FALSE");
    entity::set_invulnerable();
    entity::set_baby();
    entity::set_invisible();
    entity::set_despawning("FALSE");
    entity::set_attribute(0.04, "GENERIC_GRAVITY");
    entity::set_attribute(0.5, "GENERIC_STEP_HEIGHT");
    g`%var_local(StandUUID)_EntityType` = "cube_stand";
    g`%var_local(StandUUID)_Level` = g`%player%_Level`;
    g`%var_local(StandUUID)_CubeType` = CubeType;
    g`%var_local(StandUUID)_IsDeleted` = "0";
    g`%var_local(StandUUID)_IsPicked` = "0";
    g`%var_local(StandUUID)_IsThrowed` = "0";
    g`LvlCubeList_%var(%var_local(StandUUID)_Level)`.append_value(StandUUID);
}

function CbSpawnMarker{
    code::call_function("WAIT");
    world::spawn_armor_stand(DisplayedBlock, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", SpawnPos, NameMarker, "FALSE", "TRUE", "TRUE", "FALSE", "FALSE", "TRUE");
    select::last_entity();
    MarkerUUID = value::uuid<current>;
    entity::set_custom_name_visibility("FALSE");
    entity::set_collidable("FALSE");
    entity::set_invulnerable();
    g`%var_local(MarkerUUID)_EntityType` = "cube_marker";
    g`%var_local(MarkerUUID)_Level` = g`%player%_Level`;
    g`%var_local(MarkerUUID)_CubeType` = CubeType;
    g`%var_local(MarkerUUID)_StandUUID` = StandUUID;
    g`%var_local(StandUUID)_MarkerUUID` = MarkerUUID;
}

function CbSpawnShulker{
    code::call_function("WAIT");
    world::spawn_mob("H4sIAAAAAAAA/2XMsQrCMBCH8X8sBYlTByffxE0UH0HcwpGebbC9K8kV8e0NODi4fvD9PNBgdyGjG+eSVIDuvsUm9TjMSThmetixjOv05BzKQi8JPAwN2qirGADn4aPOiwqLFY/9b6sh2Tv0Vf+S3R/p0J510gwHfzKjOF4pcmXxAVTtRDCaAAAA", SpawnPos, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    select::last_entity();
    ShulkerUUID = value::uuid<current>;
    entity::set_gravity("FALSE");
    entity::set_custom_name(NameShulker);
    entity::set_custom_name_visibility("FALSE");
    entity::set_ai("FALSE");
    entity::set_silenced();
    entity::set_death_drops("FALSE");
    entity::set_invulnerable();
    entity::set_invisible();
    entity::set_despawning("FALSE");
    entity::ride_entity(MarkerUUID);
    g`%var_local(ShulkerUUID)_EntityType` = "cube_shulker";
    g`%var_local(ShulkerUUID)_Level` = g`%player%_Level`;
    g`%var_local(ShulkerUUID)_CubeType` = CubeType;
    g`%var_local(ShulkerUUID)_StandUUID` = StandUUID;
    g`%var_local(ShulkerUUID)_MarkerUUID` = MarkerUUID;
    g`%var_local(StandUUID)_ShulkerUUID` = ShulkerUUID;
    g`%var_local(ShulkerUUID)_IsFirstSpawned` = CubeFirstSpawn;
    if not (g`ShulkerListForRays`.list_contains_value(ShulkerUUID)){
        g`ShulkerListForRays`.append_value(ShulkerUUID);
    }
}

function CbSpawnSand{
    code::call_function("WAIT");
    world::spawn_falling_block("minecraft:cyan_stained_glass", SpawnPos, should_expire="FALSE");
    select::last_entity();
    SandUUID = value::uuid<current>;
    entity::set_gravity("FALSE");
    entity::set_custom_tag("name", NameSand);
    entity::set_death_drops("FALSE");
    entity::ride_entity(MarkerUUID);
    g`%var_local(SandUUID)_EntityType` = "cube_sand";
    g`%var_local(SandUUID)_Level` = g`%player%_Level`;
    g`%var_local(SandUUID)_CubeType` = CubeType;
    g`%var_local(SandUUID)_StandUUID` = StandUUID;
    g`%var_local(SandUUID)_MarkerUUID` = MarkerUUID;
    g`%var_local(SandUUID)_ShulkerUUID` = ShulkerUUID;
    g`%var_local(StandUUID)_SandUUID` = SandUUID;
    if not (g`SandListForRays`.list_contains_value(SandUUID)){
        g`SandListForRays`.append_value(SandUUID);
    }
}

process CubeLOOP{
    repeat::forever(){
        code::call_function("WAIT");
        select::entity_by_name(StandUUID);
        if(value::selection_size.less_or_equals("0.0")){
            code::break();
        }
        StandPos = value::location<current>;
        StandViewVect = value::direction_of_view<current>;
        if(NotActiveTicks.less_or_equals(0)){
            code::call_function(p"CbDeletion");
            code::call_function(p"CbLvlTrig");
            code::call_function("CbOnGround");
            code::call_function("CbThrow");
            if(g`%player%_ActivePrtlsCount`.equals("2")){
                PlayerCenterPos = StandPos.shift_coordinate("0.5", "Y");
                code::call_function("CbPrtlChoose");
                code::call_function("CbPrtlCollide");
                PlayerVelocity = value::velocity<current>.get_vector_length();
            }
            code::call_function("CbCollision");
            code::call_function(p"CbReaction");
            code::call_function(p"CbForceRespawn");
        }
        else{
            NotActiveTicks = variable::subtract([NotActiveTicks, 1]);
            MovePos = StandPos;
            player::display_particle(particle("DUST", 6, 0.5, 0.5, 0, 0, 0, color=11257046), StandPos);
        }
        select::entity_by_name(MarkerUUID);
        DistToMovePos = variable::locations_distance(value::location<current>, MovePos);
        if(DistToMovePos.greater("0.01")){
            entity::teleport(MovePos);
        }
        SavedStandPos = StandPos;
        code::wait("2.0");
    }
}

function CbOnGround{
    code::call_function("WAIT");
    if(entity::is_grounded()){
        if(CubeFirstSpawn.equals("1.0")){
            CubeFirstSpawn = "0";
            g`%var_local(ShulkerUUID)_IsFirstSpawned` = CubeFirstSpawn;
        }
        if(g`%var_local(StandUUID)_IsBeingThrowed`.equals(1)){
            g`%var_local(StandUUID)_IsBeingThrowed` = 0;
        }
    }
    if(g`%var_local(StandUUID)_IsPicked`.equals("0")){
        if(g`%var_local(StandUUID)_MPlatMoving`.equals(0)){
            if(g`%var_local(StandUUID)_FlyTime`.equals(0)){
                if(g`%player%_GravityPickUUID`.not_equals(StandUUID)){
                    if(entity::is_grounded()){
                        if(SoundPlayed.equals("0.0")){
                            SoundPlayed = "1";
                            player::play_sound_from_entity(value::uuid<current>, sound("minecraft:block.bone_block.break", 1, 1.26, "MASTER"));
                            player::display_particle(particle("BLOCK", 10, 0, 0, 0, 0, 0, material="IRON_BLOCK"), StandPos);
                        }
                    }
                    else{
                        if(SoundPlayed.equals("1")){
                            SoundPlayed = "0.0";
                        }
                    }
                }
            }
        }
    }
    if(g`%var_local(StandUUID)_MPlatMoving`.greater(0)){
        g`%var_local(StandUUID)_MPlatMoving` = variable::subtract([g`%var_local(StandUUID)_MPlatMoving`, 1]);
    }
    if(g`%var_local(StandUUID)_FlyTime`.greater(0)){
        g`%var_local(StandUUID)_FlyTime` = variable::subtract([g`%var_local(StandUUID)_FlyTime`, 1]);
        if(CubeFirstSpawn.equals("1.0")){
            CubeFirstSpawn = "0";
            g`%var_local(ShulkerUUID)_IsFirstSpawned` = CubeFirstSpawn;
        }
    }
}

function CbThrow{
    code::call_function("WAIT");
    if(g`%var_local(StandUUID)_IsPicked`.equals("0")){
        if(g`%var_local(StandUUID)_IsThrowed`.equals("1")){
            g`%var_local(StandUUID)_IsThrowed` = "0";
            g`%var_local(StandUUID)_IsBeingThrowed` = 1;
            entity::set_location(g`%var_local(StandUUID)_ThrowVect`, "FALSE");
        }
        if(g`%var_local(StandUUID)_Level`.equals([-33, -35])){
            if(CubeType.equals("heavy")){
                if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDIzcxLTS5KTCuxyi0tzkyOT8ksTo5PSyxiZmBNzi/NK2FgYGBkAACm20jAQQAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                    HurtSpeed = value::velocity<current>.get_vector_length();
                    if(HurtSpeed.greater_or_equals(0.08)){
                        HurtCorner1 = StandPos.shift_all_coordinates(-2.5, 0, -2.5);
                        HurtCorner2 = StandPos.shift_all_coordinates(2.5, 2, 2.5);
                        select::entity_by_name(g`SpiderUUIDList`);
                        select::filter_by_conditional(entity::in_area(HurtCorner1, HurtCorner2, "FALSE", "HITBOX"));
                        select::filter_by_distance(StandPos, 1, "FALSE");
                        if(value::selection_size.greater(0)){
                            player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDIzcxLTS5KTCuxyi0tzkyOT8ksTo5PSyxiZmBNzi/NK2FgYGBkAACm20jAQQAAAA==");
                            SpiderBodyUUID = value::uuid<current>;
                            g`%var_local(SpiderBodyUUID)_IsHurt` = 1;
                            HurtVect = variable::get_vector_between_locations(value::hitbox_midpoint_location<current>, StandPos);
                            HurtVect = HurtVect.set_vector_component(0.2, "Y");
                            HurtVect = variable::multiply_vector(HurtVect, 0.2);
                            select::entity_by_name(StandUUID);
                            entity::set_location(HurtVect, "FALSE");
                        }
                        else{
                            select::entity_by_name(StandUUID);
                        }
                    }
                }
            }
        }
    }
    code::call_function(p"CbPush");
}

function CbPush{
    code::call_function("WAIT");
    if(CubeType.equals("heavy")){
        if(g`%player%_InMenu`.equals(0)){
            if(g`%var_local(StandUUID)_IsPicked`.equals("0")){
                if(g`%player%_PushUUID`.equals([0, StandUUID])){
                    if(player::is_sneaking()){
                        PushAreaCorner_1 = StandPos.shift_all_coordinates("-1.25", -0.03, "-1.25");
                        PushAreaCorner_2 = StandPos.shift_all_coordinates("1.25", "0.95", "1.25");
                        if(player::in_area(PushAreaCorner_1, PushAreaCorner_2, "FALSE")){
                            g`%player%_PushUUID` = StandUUID;
                            g`%player%_PushTicks` = 2;
                            PushVect = value::direction_of_view<default>.set_vector_component("0", "Y");
                            PushVect = PushVect.set_vector_length("0.16");
                            entity::set_location(PushVect, "FALSE");
                            player::play_sound_from_entity(StandUUID, sound("minecraft:block.grindstone.use", 0.25, 2, "grindstone3", "MASTER"));
                        }
                    }
                }
            }
        }
    }
}

function CbReaction{
    code::call_function("WAIT");
    CubeCenterPos = StandPos.shift_coordinate("0.5", "Y");
    CubeCenterY = CubeCenterPos.get_coordinate("Y");
    if(CubeCenterY.less_or_equals("-32.0")){
        g`%var_local(StandUUID)_IsDeleted` = "1";
    }
    CubeSide_1 = StandPos;
    CubeSide_2 = StandPos.shift_coordinate("1", "Y");
    CubeSide_3 = StandPos.shift_all_coordinates("-0.5", "0.5", "0.0");
    CubeSide_4 = StandPos.shift_all_coordinates("0.5", "0.5", "0.0");
    CubeSide_5 = StandPos.shift_all_coordinates("0.0", "0.5", "-0.5");
    CubeSide_6 = StandPos.shift_all_coordinates("0.0", "0.5", "0.5");
    IsReacted = "0";
    if(world::block_equals(["water", "nether_portal"], CubeSide_1)){
        IsReacted = "1";
    }
    if(world::block_equals(["water", "nether_portal"], CubeSide_2)){
        IsReacted = "1";
    }
    if(world::block_equals(["water", "nether_portal"], CubeSide_3)){
        IsReacted = "1";
    }
    if(world::block_equals(["water", "nether_portal"], CubeSide_4)){
        IsReacted = "1";
    }
    if(world::block_equals(["water", "nether_portal"], CubeSide_5)){
        IsReacted = "1";
    }
    if(world::block_equals(["water", "nether_portal"], CubeSide_6)){
        IsReacted = "1";
    }
    if(IsReacted.equals("1")){
        player::play_sound_sequence([sound("minecraft:block.bone_block.break", 1, 0.5, "MASTER"), sound("minecraft:block.azalea_leaves.break", 1, 0.5, "MASTER")], StandPos, 0);
        player::display_particle(particle("DUST", 6, 0.5, 0.5, 0, 0, 0, color=11257046), CubeCenterPos);
        entity::set_gravity("FALSE");
        entity::set_location(vector(0, 0, 0), "FALSE");
        NotActiveTicks = 2;
        g`%var_local(StandUUID)_IsDeleted` = "1";
    }
}

function CbPrtlChoose{
    code::call_function("WAIT");
    if(CheckTick.greater_or_equals("3.0")){
        CheckTick = "0";
        select::entity_by_name([g`%player%_PrtlBlueUUID`, g`%player%_PrtlOrangeUUID`]);
        select::filter_by_distance(PlayerCenterPos, "1", "FALSE");
        if(value::selection_size.greater("0.0")){
            PortalUUID = value::uuid<current>;
        }
    }
    CheckTick = variable::add([CheckTick, "1"]);
}

function CbPrtlCollide{
    code::call_function(p"WAIT");
    select::entity_by_name(PortalUUID);
    if(value::selection_size.greater("0.0")){
        DistToPrtl = variable::locations_distance(PlayerCenterPos, value::location<current>);
        if(DistToPrtl.less_or_equals(3)){
            PrtlNameList = value::name<current>.split_text("*");
            PrtlOwner = PrtlNameList.get_list_value("1");
            if(g`PrtlIsLinked*portal*%var_local(PrtlOwner)*%selected_uuid%`.equals("1")){
                PrtlColorType = PrtlNameList.get_list_value("2.0");
                PlHitboxCorner_1 = StandPos.shift_all_coordinates("-0.499", "0", "-0.499");
                PlHitboxCorner_2 = StandPos.shift_all_coordinates("0.499", 0.999, "0.499");
                PortalCorner_1 = g`PrtlCorner_1*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                PortalCorner_2 = g`PrtlCorner_2*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                if(variable::range_intersects_range(PlHitboxCorner_1, PlHitboxCorner_2, PortalCorner_1, PortalCorner_2)){
                    if(IsTeleported.equals("0")){
                        IsTeleported = 1;
                        PrtlNormalVect = g`PrtlNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        PrtlCenterPos = g`PrtlCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        PrtlLinkedNormalVect = g`PrtlLinkedNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        PrtlLinkedCenterPos = g`PrtlLinkedCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        PrtlLinkedLowPos = g`PrtlLinkedLowPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        PortalUUID = g`PrtlLinkedUUID*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        PickReduce = 1;
                        if(g`%player%_PickedUUID`.equals(StandUUID)){
                            g`%player%_CubePicked` = "0.0";
                            g`%player%_PickedUUID` = "none";
                            g`%var_local(StandUUID)_IsPicked` = "0";
                            PickReduce = 5;
                        }
                        code::call_function("CbPrtlTeleport");
                    }
                }
                else{
                    code::call_function("PlPrtlNoTeleport");
                }
            }
        }
        else{
            code::call_function("PlPrtlNoTeleport");
        }
    }
    select::entity_by_name(StandUUID);
}

function CbPrtlTeleport{
    code::call_function("WAIT");
    if(g`%player%_GravityPickUUID`.equals(StandUUID)){
        g`%player%_GravityPickUUID` = 0;
        PickReduce = 5;
    }
    PrtlIsVertical = "0.0";
    PrtlVelocityAdder = 1;
    if(PrtlLinkedNormalVect.equals([vector(0, 0, 1), vector(0, 0, -1), vector(1, 0, 0), vector(-1, 0, 0)])){
        PrtlIsVertical = "1.0";
        PrtlVelocityAdder = 2.2;
        TeleportPos = PrtlLinkedLowPos.shift_location_in_direction("0.6");
    }
    if(PrtlLinkedNormalVect.equals(vector(0, 1, 0))){
        PrtlVelocityAdder = 1.5;
        TeleportPos = PrtlLinkedCenterPos.shift_location_in_direction("0.3");
    }
    if(PrtlLinkedNormalVect.equals(vector(0, -1, 0))){
        TeleportPos = PrtlLinkedCenterPos.shift_location_in_direction("1.3");
    }
    PlayerVelocity = variable::multiply([PlayerVelocity, PrtlVelocityAdder]);
    ThrowVect = PrtlLinkedNormalVect;
    code::call_function("PrtlSmallVel");
    ThrowVect = ThrowVect.set_vector_length(PlayerVelocity);
    code::call_function("CbTPPush");
    code::call_function(p"CbPrtlTeleport2");
    player::play_sound(sound("minecraft:entity.enderman.teleport", 1, 2, "MASTER"), PrtlCenterPos);
    player::play_sound(sound("minecraft:entity.enderman.teleport", 1, 2, "MASTER"), PrtlLinkedCenterPos);
    if(PrtlColorType.equals("BLUE")){
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=5592575), PrtlCenterPos);
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16755200), PrtlLinkedCenterPos);
    }
    else{
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16755200), PrtlCenterPos);
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=5592575), PrtlLinkedCenterPos);
    }
}

function CbCollision{
    code::call_function("WAIT");
    if(CubeFirstSpawn.equals("0")){
        if(g`%var_local(StandUUID)_IsPicked`.equals("0")){
            DistFromNewToOldStandPos = variable::locations_distance(StandPos, SavedStandPos);
            if(DistFromNewToOldStandPos.greater("0.01")){
                code::call_function("CbCheckCollision");
                MovePos = MovePos.set_location_direction(RotVect);
                if(IsCollided.equals("1")){
                    IsCollided = "0";
                    if(StandViewVect.not_equals(RotVect)){
                        TempDirPos = location(0, 0, 0, 0, 0).set_location_direction(RotVect);
                        NewHorizAngle = TempDirPos.get_coordinate("YAW");
                        entity::set_rotation(NewHorizAngle, "0");
                    }
                }
            }
        }
        else{
            MovePos = StandPos;
        }
    }
    else{
        MovePos = StandPos;
    }
}

function CbCheckCollision{
    code::call_function("WAIT");
    RayEntityList = g`ShulkerListForRays`.remove_list_value(ShulkerUUID);
    MovePos = StandPos;
    RotVect = MovePos.get_location_direction();
    IsCollided = "0.0";
    ID = "1.0";
    CollisionVect = vector(0, 1, 0);
    code::call_function("CbGetCollision");
    ID = "2.0";
    CollisionVect = vector(0, 0, 1);
    code::call_function("CbGetCollision");
    ID = "3.0";
    CollisionVect = vector(0, 0, -1);
    code::call_function("CbGetCollision");
    ID = "4.0";
    CollisionVect = vector(1, 0, 0);
    code::call_function("CbGetCollision");
    ID = "5.0";
    CollisionVect = vector(-1, 0, 0);
    code::call_function("CbGetCollision");
    if(("1.0").equals([2_LocalCollided, 3_LocalCollided, 4_LocalCollided, 5_LocalCollided])){
        code::call_function("TransformRot");
    }
}

function CbGetCollision{
    code::call_function("WAIT");
    l`%var_local(ID)_LocalCollided` = "0";
    StartCollisionSide = CollisionVect.vector_to_direction_name();
    StartCollisionPos = MovePos.set_location_direction(CollisionVect);
    StartCollisionPos = StartCollisionPos.shift_coordinate("0.5", "Y");
    EndCollisionPos, EndCollisionSide, EndCollisionUUID = variable::ray_trace_result(start=StartCollisionPos, ray_size="0.0", max_distance="0.6", entities=RayEntityList, ray_collision_mode="BLOCKS_AND_ENTITIES", fluid_collision_mode="NEVER");
    if(EndCollisionPos.not_equals("0")){
        if(EndCollisionUUID.not_equals(0)){
            if(EndCollisionSide.equals(StartCollisionSide)){
                code::return_function();
            }
        }
        CollisionDist = variable::locations_distance(StartCollisionPos, EndCollisionPos);
        CollisionShift = variable::subtract(["0.5", CollisionDist]);
        CollisionVect = variable::multiply_vector(CollisionVect, "-1");
        MovePos = MovePos.set_location_direction(CollisionVect);
        MovePos = MovePos.shift_location_in_direction(CollisionShift);
        l`%var_local(ID)_LocalCollided` = "1.0";
        IsCollided = "1";
    }
    code::call_function("SoundCollide");
}

function CbForceRespawn{
    code::call_function("WAIT");
    if(g`%var_local(StandUUID)_IsPicked`.equals("1")){
        if(IsForceRespawn.equals("0")){
            IsForceRespawn = "1";
        }
    }
    else{
        if(g`%var_local(ShulkerUUID)_StandUUID`.equals(0)){
            IsForceRespawn = "1";
        }
        if(IsForceRespawn.equals("1")){
            IsForceRespawn = "0";
            select::entity_by_name(ShulkerUUID);
            if(value::selection_size.greater("0.0")){
                entity::remove();
            }
            if(g`ShulkerListForRays`.list_contains_value(ShulkerUUID)){
                g`ShulkerListForRays` = g`ShulkerListForRays`.remove_list_value(ShulkerUUID);
            }
            variable::purge(ShulkerUUID, match="NAME_CONTAINS");
            SpawnPos = MovePos;
            code::call_function(p"CbSpawnShulker");
        }
    }
}

function CbDeletion{
    code::call_function("WAIT");
    if(g`%var_local(StandUUID)_IsDeleted`.equals("1")){
        if(g`LvlCubeList_%var(%var_local(StandUUID)_Level)`.equals(0)){
            g`LvlCubeList_%var(%var_local(StandUUID)_Level)` = [];
        }
        g`LvlCubeList_%var(%var_local(StandUUID)_Level)` = g`LvlCubeList_%var(%var_local(StandUUID)_Level)`.remove_list_value(StandUUID);
        if(value::selection_size.greater("0.0")){
            entity::remove();
        }
        select::entity_by_name([SandUUID, ShulkerUUID, MarkerUUID]);
        if(value::selection_size.greater("0.0")){
            entity::remove();
        }
        if(g`SandListForRays`.list_contains_value(SandUUID)){
            g`SandListForRays` = g`SandListForRays`.remove_list_value(SandUUID);
        }
        if(g`ShulkerListForRays`.list_contains_value(ShulkerUUID)){
            g`ShulkerListForRays` = g`ShulkerListForRays`.remove_list_value(ShulkerUUID);
        }
        variable::purge([StandUUID, MarkerUUID, ShulkerUUID, SandUUID], match="NAME_CONTAINS");
        code::break();
    }
}

function CbRespawn{
    code::call_function("WAIT");
    if(IsRespawn.equals("1")){
        IsRespawn = "0";
        select::entity_by_name(ShulkerUUID);
        if(value::selection_size.greater("0.0")){
            entity::remove();
        }
        if(g`ShulkerListForRays`.list_contains_value(ShulkerUUID)){
            g`ShulkerListForRays` = g`ShulkerListForRays`.remove_list_value(ShulkerUUID);
        }
        variable::purge(ShulkerUUID, match="NAME_CONTAINS");
        SpawnPos = MovePos;
        code::call_function(p"CbSpawnShulker");
    }
}

function DeletePlCubes{
    MarkerUUID = g`%var_local(StandUUID)_MarkerUUID`;
    ShulkerUUID = g`%var_local(StandUUID)_ShulkerUUID`;
    SandUUID = g`%var_local(StandUUID)_SandUUID`;
    if(g`LvlCubeList_%var(%var_local(StandUUID)_Level)`.not_equals(0)){
        g`LvlCubeList_%var(%var_local(StandUUID)_Level)` = g`LvlCubeList_%var(%var_local(StandUUID)_Level)`.remove_list_value(StandUUID);
    }
    if(value::selection_size.greater("0.0")){
        entity::remove();
    }
    select::entity_by_name([SandUUID, ShulkerUUID, MarkerUUID]);
    if(value::selection_size.greater("0.0")){
        entity::remove();
    }
    if(g`SandListForRays`.list_contains_value(SandUUID)){
        g`SandListForRays` = g`SandListForRays`.remove_list_value(SandUUID);
    }
    if(g`ShulkerListForRays`.list_contains_value(ShulkerUUID)){
        g`ShulkerListForRays` = g`ShulkerListForRays`.remove_list_value(ShulkerUUID);
    }
    variable::purge([StandUUID, MarkerUUID, ShulkerUUID, SandUUID], match="NAME_CONTAINS");
}

function CbTPPush{
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("cube_stand*"));
    select::filter_by_conditional(value::uuid<victim_entity>.not_equals(StandUUID));
    select::filter_by_conditional(entity::is_near_location(1.25, TeleportPos, "FALSE"));
    select::filter_by_conditional(g`%selected_uuid%_IsPicked`.equals("0"));
    if(value::selection_size.greater(0)){
        if(PrtlLinkedNormalVect.equals([vector(0, 0, 1), vector(0, 0, -1), vector(1, 0, 0), vector(-1, 0, 0)])){
            CbPrtlFromPos = PrtlLinkedLowPos;
            code::start_process("CbTPPushProc", "COPY", "FOR_EACH_IN_SELECTION");
        }
        if(PrtlLinkedNormalVect.equals(vector(0, 1, 0))){
            CbPrtlFromPos = PrtlLinkedCenterPos;
            code::start_process("CbTPPushProc", "COPY", "FOR_EACH_IN_SELECTION");
        }
    }
    select::entity_by_name(StandUUID);
}

event<player_swap_hands>{
    world::cancel_event();
    if(g`%player%_InMenu`.equals(0)){
        if(player::is_sneaking()){
            if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxKkosj88sys9jZmBNzi/NK2FgYGBkAADt+ipTOwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxKkosj88sys9jZmBNzi/NK2FgYGBkAADt+ipTOwAAAA==");
                select::entity_by_conditional(entity::has_custom_tag("name", "cube_sand*", "STARTS_WITH"));
                select::filter_by_raycast(origin=value::eye_location<default>, max_distance="5.0", ray_size="0.1");
                select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
                if(value::selection_size.greater("0.0")){
                    player::set_item_cooldown("60", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxKkosj88sys9jZmBNzi/NK2FgYGBkAADt+ipTOwAAAA==");
                    CubeCenterPos = value::location<current>.shift_coordinate("0.5", "Y");
                    player::play_sound(sound("minecraft:block.beacon.deactivate", 1, 2, "MASTER"), CubeCenterPos);
                    SandUUID = value::uuid<current>;
                    StandUUID = g`%var_local(SandUUID)_StandUUID`;
                    NameSand = value::name<current>.split_text("*");
                    Player = NameSand.get_list_value("1");
                    g`%var_local(Player)_CubePicked` = "0.0";
                    g`%var_local(Player)_PickedUUID` = "none";
                    g`%var_local(StandUUID)_IsDeleted` = "1";
                }
                else{
                    code::call_function("PlClearBall");
                }
            }
            else{
                player::message("&#ff6e6e Подождите немного!");
            }
        }
        else{
            code::call_function("PlClearPrtls");
        }
    }
}

event<player_right_click>{
    code::call_function("PlCheckRMB");
    if(g`%player%_InMenu`.equals(0)){
        if(g`%player%_CubePicked`.equals("0.0")){
            if(g`%player%_GravityPickUUID`.equals(0)){
                if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDJzcxLTS5KTCuxKkosj0/OLyhILWJmYE3OL80rYWBgYGQAAIFZbKY9AAAA", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                    select::entity_by_name(g`ShulkerListForRays`);
                    select::filter_by_conditional(value::name<victim_entity>.text_starts_with("cube_shulker*%player%*"));
                    select::filter_by_raycast(origin=value::eye_location<default>, max_distance="5.0", ray_size="0.1");
                    select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
                    if(value::selection_size.greater("0.0")){
                        world::cancel_event();
                        code::call_function("PlPickCube");
                    }
                    else{
                        select::reset();
                        code::call_function("RMB_ScrtMonitor");
                        code::call_function("PGunORANGE");
                    }
                }
                else{
                    code::call_function("RMB_ScrtMonitor");
                    code::call_function("PGunORANGE");
                }
            }
            else{
                code::call_function("CbGravityUnpick");
            }
        }
        else{
            world::cancel_event();
            player::play_sound_from_entity(value::name<default>, sound("minecraft:item.dye.use", 1, 0.6, "MASTER"));
            g`%player%_CubePicked` = "0.0";
            if(g`%player%_PickedUUID`.not_equals("none")){
                StandUUID = g`%player%_PickedUUID`;
                g`%var_local(StandUUID)_IsPicked` = "0";
                g`%player%_PickedUUID` = "none";
            }
        }
    }
}

event<player_right_click_entity>{
    if(value::event_equipment_slot.equals("hand")){
        player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDLzcxLTS5KTCuxSkstyk3NK0lNiS8uyExJLYpPrUxlZmBNzi/NK2FgYGBkAABx/hYDRwAAAA==");
        code::call_function(p"MenuButtons");
        if(g`%player%_InMenu`.equals(0)){
            if(g`%player%_CubePicked`.equals("0.0")){
                if(g`%player%_GravityPickUUID`.equals(0)){
                    if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDJzcxLTS5KTCuxKkosj0/OLyhILWJmYE3OL80rYWBgYGQAAIFZbKY9AAAA", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                        select::entity_by_name(g`ShulkerListForRays`);
                        select::filter_by_conditional(value::name<victim_entity>.text_starts_with("cube_shulker*%player%*"));
                        select::filter_by_raycast(origin=value::eye_location<default>, max_distance="5.0", ray_size="0.1");
                        select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
                        if(value::selection_size.greater("0.0")){
                            world::cancel_event();
                            code::call_function("PlPickCube");
                        }
                        else{
                            select::reset();
                            code::call_function("PGunORANGE");
                        }
                    }
                    else{
                        code::call_function("PGunORANGE");
                    }
                }
                else{
                    code::call_function("CbGravityUnpick");
                }
            }
            else{
                world::cancel_event();
                player::play_sound_from_entity(value::name<default>, sound("minecraft:item.dye.use", 1, 0.6, "MASTER"));
                g`%player%_CubePicked` = "0.0";
                if(g`%player%_PickedUUID`.not_equals("none")){
                    StandUUID = g`%player%_PickedUUID`;
                    g`%var_local(StandUUID)_IsPicked` = "0";
                    g`%player%_PickedUUID` = "none";
                }
            }
        }
    }
}

function PlPickCube{
    code::call_function("WAIT");
    player::set_item_cooldown("5.0", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDJzcxLTS5KTCuxKkosj0/OLyhILWJmYE3OL80rYWBgYGQAAIFZbKY9AAAA");
    code::call_function(p"SelectedItem");
    if(SelectedItem.not_equals("gravity_gun")){
        if(value::name<current>.text_contains(["*heavy*", "*rail*"])){
            select::reset();
            code::call_function("RMB_ScrtMonitor");
            code::call_function("PGunORANGE");
            code::break();
        }
    }
    else{
        if(value::name<current>.text_contains("*rail*")){
            code::call_function("CbGravityPick");
            code::break();
        }
    }
    ShulkerUUID = value::uuid<current>;
    if(g`%var_local(ShulkerUUID)_IsFirstSpawned`.equals("0")){
        player::play_sound_from_entity(value::name<default>, sound("minecraft:item.dye.use", 1, 1.2, "MASTER"));
        g`%player%_CubePicked` = "1.0";
        StandUUID = g`%var_local(ShulkerUUID)_StandUUID`;
        g`%var_local(StandUUID)_IsPicked` = "1";
        g`%player%_PickedUUID` = StandUUID;
        entity::remove();
        if(g`ShulkerListForRays`.list_contains_value(ShulkerUUID)){
            g`ShulkerListForRays` = g`ShulkerListForRays`.remove_list_value(ShulkerUUID);
        }
        variable::purge(ShulkerUUID, match="NAME_CONTAINS");
        if(g`%var_local(StandUUID)_MPlatMoving`.greater(0)){
            g`%var_local(StandUUID)_MPlatMoving` = 0;
        }
        if(g`%var_local(StandUUID)_FlyTime`.greater(0)){
            g`%var_local(StandUUID)_FlyTime` = 0;
        }
        g`%player%_CbPickDist` = 2;
        code::start_process("CbPickLOOP", "COPY");
    }
    else{
        select::reset();
        code::call_function("PGunORANGE");
    }
}

process CbPickLOOP{
    SavedTeleportPos = location(0, 0, 0, 0, 0);
    SavedPickMovePos = location(0, 0, 0, 0, 0);
    repeat::while(g`%player%_CubePicked`.equals("1")){
        code::call_function("WAIT");
        select::entity_by_name(StandUUID);
        if(value::selection_size.less_or_equals("0.0")){
            g`%player%_CubePicked` = "0.0";
            g`%player%_PickedUUID` = "none";
            code::break();
        }
        if(g`%player%_InMenu`.equals(1)){
            entity::teleport(SavedPickMovePos);
            code::wait("2.0");
            code::skip_iteration();
        }
        RayEntityList = g`ShulkerListForRays`;
        code::call_function("GetPickLen");
        TeleportPos, BlockSide = variable::ray_trace_result(start=value::eye_location<default>, ray_size="0.0", max_distance=CbPickDist, entities=RayEntityList, ray_collision_mode="BLOCKS_AND_ENTITIES");
        if(TeleportPos.equals("0")){
            TeleportPos = value::eye_location<default>.shift_location_in_direction(CbPickDist);
        }
        else{
            code::call_function("CbPickGetNormal");
            Normal = Normal.set_vector_length("0.1");
            TeleportPos = TeleportPos.shift_location_on_vector(Normal);
        }
        code::call_function("CbPickCollision");
        entity::teleport(PickMovePos);
        if(SelectedItem.equals("portal_gun")){
            code::call_function("ParticleViewStart");
            player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=6617343), ParticleViewStart);
        }
        if(SelectedItem.equals("gravity_gun")){
            code::call_function("ParticleViewStart");
            PickCenter = PickMovePos.shift_coordinate(0.5, "Y");
            player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart, PickCenter, 0.25, "DISTANCE");
        }
        SavedTeleportPos = TeleportPos;
        SavedPickMovePos = PickMovePos;
        code::wait("2.0");
    }

}

function CbPickGetNormal{
    code::call_function("WAIT");
    Normal = vector(0, 0, 0);
    if(BlockSide.equals("up")){
        Normal = vector(0, 1, 0);
    }
    if(BlockSide.equals("down")){
        Normal = vector(0, -1, 0);
    }
    if(BlockSide.equals("south")){
        Normal = vector(0, 0, 1);
    }
    if(BlockSide.equals("north")){
        Normal = vector(0, 0, -1);
    }
    if(BlockSide.equals("east")){
        Normal = vector(1, 0, 0);
    }
    if(BlockSide.equals("west")){
        Normal = vector(-1, 0, 0);
    }
}

function CbPickCollision{
    code::call_function("WAIT");
    DistFromNewToOldPos = variable::locations_distance(TeleportPos, SavedTeleportPos);
    if(DistFromNewToOldPos.greater("0.01")){
        code::call_function("CbPickChkCollision");
        PickMovePos = PickMovePos.shift_coordinate("-0.5", "Y");
        PickMovePos = PickMovePos.set_location_direction(RotVect);
    }
}

function CbPickChkCollision{
    code::call_function("WAIT");
    PickMovePos = TeleportPos;
    ID = "0.0";
    CollisionVect = vector(0, -1, 0);
    code::call_function("CbPickGetCollision");
    ID = "1.0";
    CollisionVect = vector(0, 1, 0);
    code::call_function("CbPickGetCollision");
    ID = "2.0";
    CollisionVect = vector(0, 0, 1);
    code::call_function("CbPickGetCollision");
    ID = "3.0";
    CollisionVect = vector(0, 0, -1);
    code::call_function("CbPickGetCollision");
    ID = "4.0";
    CollisionVect = vector(1, 0, 0);
    code::call_function("CbPickGetCollision");
    ID = "5.0";
    CollisionVect = vector(-1, 0, 0);
    code::call_function("CbPickGetCollision");
    if("1".equals([2_LocalCollided, 3_LocalCollided, 4_LocalCollided, 5_LocalCollided])){
        RotVect = value::direction_of_view<default>;
        code::call_function("TransformRot");
    }
    else{
        RotVect = value::direction_of_view<default>.set_vector_component("0", "Y");
    }
}

function CbPickGetCollision{
    code::call_function("WAIT");
    l`%var_local(ID)_LocalCollided` = "0";
    CollisionMaxLength = "0.5";
    if(ID.equals("1.0")){
        if(0_LocalCollided.equals("1.0")){
            code::return_function();
        }
        CollisionMaxLength = 0.45;
    }
    StartCollisionSide = CollisionVect.vector_to_direction_name();
    StartCollisionPos = PickMovePos.set_location_direction(CollisionVect);
    EndCollisionPos, EndCollisionSide, EndCollisionUUID = variable::ray_trace_result(start=StartCollisionPos, ray_size="0.0", max_distance="0.6", entities=RayEntityList, ray_collision_mode="BLOCKS_AND_ENTITIES", fluid_collision_mode="NEVER");
    if(EndCollisionPos.not_equals("0")){
        if(EndCollisionUUID.not_equals(0)){
            if(EndCollisionSide.equals(StartCollisionSide)){
                code::return_function();
            }
        }
        CollisionDist = variable::locations_distance(StartCollisionPos, EndCollisionPos);
        CollisionShift = variable::subtract([CollisionMaxLength, CollisionDist]);
        CollisionVect = variable::multiply_vector(CollisionVect, "-1");
        PickMovePos = PickMovePos.set_location_direction(CollisionVect);
        PickMovePos = PickMovePos.shift_location_in_direction(CollisionShift);
        l`%var_local(ID)_LocalCollided` = "1.0";
    }
    code::call_function("SoundCollide");
}

event<player_left_click>{
    code::call_function("MenuButtons");
    if(g`%player%_InMenu`.equals(0)){
        if(g`%player%_CubePicked`.equals("1.0")){
            if(g`%player%_PickedUUID`.not_equals("none")){
                world::cancel_event();
                code::call_function(p"SelectedItem");
                if(SelectedItem.equals("none")){
                    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.trident.throw", 1, 1.5, "MASTER"));
                }
                g`%player%_CubePicked` = "0.0";
                select::entity_by_name(g`%player%_PickedUUID`);
                CubeCenter = value::location<current>.shift_coordinate(0.5, "Y");
                if(SelectedItem.equals("portal_gun")){
                    code::call_function("ParticleViewStart");
                    player::display_particle(particle("EXPLOSION", 1, 0, 0, 0, 0, 0), ParticleViewStart);
                    player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=6617343), ParticleViewStart, CubeCenter, 0.25, "DISTANCE");
                    player::play_sound_from_entity(value::name<default>, sound("minecraft:entity.breeze.shoot", 1, 1.5, "MASTER"));
                }
                ThrowVect = variable::add_vectors([value::direction_of_view<default>, vector(0, 0.25, 0)]);
                if(value::name<current>.text_contains(["*thrower*", "*heavy*"])){
                    if(SelectedItem.equals(["none", "portal_gun"])){
                        ThrowVect = ThrowVect.set_vector_length(0.25);
                    }
                }
                if(SelectedItem.equals("gravity_gun")){
                    code::call_function("ParticleGravLMB");
                }
                StandUUID = g`%player%_PickedUUID`;
                g`%var_local(StandUUID)_IsPicked` = "0";
                g`%var_local(StandUUID)_IsThrowed` = "1.0";
                g`%var_local(StandUUID)_ThrowVect` = ThrowVect;
                g`%player%_PickedUUID` = "none";
            }
        }
        else{
            if(g`%player%_GravityPickUUID`.not_equals(0)){
                code::call_function("CbGravityUnpick");
            }
            else{
                code::call_function("PGunBLUE");
            }
        }
    }
}

function CreateLaser{
    code::call_function("WAIT");
    SpawnPos = SpawnPos.shift_location_in_direction("-0.45");
    Dir = SpawnPos.get_location_direction();
    Dir = Dir.align_to_axis_vector();
    SpawnPos = SpawnPos.set_location_direction(Dir);
    LaserName = "laser*%var_local(ID)*%random_uuid%";
    TEMP = SpawnPos.get_block_material();
    if(Dir.equals(vector(0, 0, 1))){
        world::spawn_mob("H4sIAAAAAAAA/02OMQ7CMAxFf4AiCBMDAq7CjCr1AogtMqlbGVoHtYHC7YnUociTrfefvwXm2Jwp0oW7XoIC2+sKMymxb0XZd1TF042i6580qOO6niPz4aURgLGwPrTPoKyxt9hNkXSQ+HVlMhtkuXy4NKP3OEF1EwYnkVtXddSyxaJIy4gdJuxO/uGCa0gjd/r/P8260Lf0cmvYGCxz8qKpIvADYxHlvdoAAAA=", SpawnPos, custom_name=LaserName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Dir.equals(vector(0, 0, -1))){
        world::spawn_mob("H4sIAAAAAAAA/02NwQ6CMAyGOxCj8+TBqK/i2ZDwAsbbUkYhVdaRMUXf3iUcMD39/b9+1QA57K4Y8UZhZC8A+/sGMm7g6FjIBmzjpcZoxgEnMdR1ORTWvyQCgNKgrXeDF5I4ajgsJ2nB8WuaZFZQlPyhRs3e8wJ1vZ8MR3KmDehIw6pKYcZOC/ZA+zTe9CiRgvz/T7Ot5M0j1z0pBesSLUuXpe4HBnZZBdoAAAA=", SpawnPos, custom_name=LaserName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Dir.equals(vector(1, 0, 0))){
        world::spawn_mob("H4sIAAAAAAAA/02NMQ7CMAxFHUoRhIkBAVdhRpV6AcQWmdStDI1TJYHC7YnUocjT939+1gAFbC+Y8EohsheA3W0NC27g4FjIBmzT+Y7JxAFHMdR1BZTWvyQBgNKgrXeDF5IUNeznk7zg9DVNNisoK/5QoybvaYa63o+GEznTBnSkYVnnMGHHGXugfRpvepREQf7/59nU8ubI956UglWFlqUrc/cDv06OmNoAAAA=", SpawnPos, custom_name=LaserName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Dir.equals(vector(-1, 0, 0))){
        world::spawn_mob("H4sIAAAAAAAA/02NwQ6CMAyGOwGj8+TBqK/i2ZDwAsbbUkZZqqwjMEXf3iUcMD39/b9+1QAZ7K4Y8UbDyEEA9vcNrLiBo2chO2AbLzVGM/Y4iSHnMihseEkEAKVB2+D7ICRx1HBYTtKC49c0yaygKPlDjZq95wVyXZgMR/KmHdCThrxKYcZOC/ZA+zTBdCiRBvn/n2ZbyZtHrjtSCtYlWhaXp+4H2ikyINoAAAA=", SpawnPos, custom_name=LaserName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Dir.equals(vector(0, 1, 0))){
        world::spawn_mob("H4sIAAAAAAAA/02NMQ7CMAxFHUoRhIkBAVdhRpV6AcQWmdStDI1TJYHC7YnUocjT939+1gAFbC+Y8EohsheA3W0NC27g4FjIBmzT+Y7JxAFHMdR1BZTWvyQBgNKgrXeDF5IUNeznk7zg9DVNNisoK/5QoybvaYa63o+GEznTBnSkYVnnMGHHGXugfRpvepREQf7/59nU8ubI956UglWFlqVTufsB6NnsF9oAAAA=", SpawnPos, custom_name=LaserName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Dir.equals(vector(0, -1, 0))){
        world::spawn_mob("H4sIAAAAAAAA/02NMQ7CMAxFfyggCBMDAq7CjJC4AGKLTGoqQ+tUaaBweyJ1KPL0/Z+fLVBgdaREF46dBAXW1wUmUmLbiLKPdE+HGyXXtdSr46oqMPPhpQmAsbA+NG1Q1tRZbMaTvJD0dWU2G8xO8uHSDN79CFV16J0kbtw9UsMW03MOA7YbsQf5pwuuJk0c9f9/nuVZ39LJrWZjMD+RF61yhR+NvlCv2gAAAA==", SpawnPos, custom_name=LaserName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    select::last_entity();
    LaserUUID = value::uuid<current>;
    entity::set_custom_name(LaserName);
    entity::set_custom_name_visibility("FALSE");
    g`%var_local(LaserUUID)_IsNeedReset` = "0";
    code::start_process("LaserLOOP", "COPY", "NO_TARGET");
}

process LaserLOOP{
    RedParticles = [particle("DUST", 1, 0, 0, 0, 0, 0, color=16527616), particle("DUST", 1, 0, 0, 0, 0, 0, color=16527616), particle("DUST", 1, 0, 0, 0, 0, 0, color=13181696), particle("DUST", 1, 0, 0, 0, 0, 0, color=10622976), particle("DUST", 1, 0, 0, 0, 0, 0, color=7933184), particle("DUST", 1, 0, 0, 0, 0, 0, color=4915200)];
    BlueParticles = [particle("DUST", 1, 0, 0, 0, 0, 0, color=1670911), particle("DUST", 1, 0, 0, 0, 0, 0, color=1670911), particle("DUST", 1, 0, 0, 0, 0, 0, color=1665765), particle("DUST", 1, 0, 0, 0, 0, 0, color=1661886), particle("DUST", 1, 0, 0, 0, 0, 0, color=1657235), particle("DUST", 1, 0, 0, 0, 0, 0, color=1652322)];
    OrangeParticles = [particle("DUST", 1, 0, 0, 0, 0, 0, color=16741913), particle("DUST", 1, 0, 0, 0, 0, 0, color=16741913), particle("DUST", 1, 0, 0, 0, 0, 0, color=15032345), particle("DUST", 1, 0, 0, 0, 0, 0, color=12472345), particle("DUST", 1, 0, 0, 0, 0, 0, color=9650457), particle("DUST", 1, 0, 0, 0, 0, 0, color=6434841)];
    CheckTick = "9.0";
    1_PortalUUID = "none";
    2_PortalUUID = "none";
    3_PortalUUID = "none";
    RelayLastIndex = 0;
    repeat::forever(){
        code::call_function("WAIT");
        select::entity_by_name(LaserUUID);
        if(value::selection_size.equals("0.0")){
            code::break();
        }
        RayEntityList = g`SandListForRays`;
        if(ID.equals([-33, -35])){
            RayEntityList = RayEntityList.append_list(g`SpiderUUIDList`);
        }
        RayCount = "1";
        RayStartPos = SpawnPos;
        if(g`%var_local(LaserUUID)_IsNeedReset`.equals("1")){
            g`%var_local(LaserUUID)_IsNeedReset` = "0";
            BlockPlaced = "0";
        }
        code::call_function("LaserRay");
        RealRayCount = RayCount.clamp("1", "3");
        MaxTime = variable::multiply([RealRayCount, "3"]);
        if(CheckTick.greater_or_equals(MaxTime)){
            CheckTick = "0";
        }
        CheckTick = variable::add([CheckTick, "1"]);
        code::wait(4);
    }
}

function LaserRay{
    code::call_function("WAIT");
    IsNewRay = "0";
    RayEndPos, RayEndBlock, RayEndSide, RayUUID = variable::ray_trace_result(RayStartPos, RayHitSize, 64, RayEntityList, "BLOCKS_AND_ENTITIES");
    if(RayEndPos.equals("0")){
        RayEndPos = RayStartPos.shift_location_in_direction(64);
        RayEndBlock = RayEndPos.shift_location_in_direction("0.5");
    }
    if(RayEndBlock.equals("0")){
        RayEndBlock = location(0, 0, 0, 0, 0);
    }
    code::call_function("LaserPickColor");
    select::all_players();
    code::start_process("LaserParticles", "COPY", "FOR_EACH_IN_SELECTION");
    code::call_function("LaserRedirect");
    code::call_function("LaserRelay");
    code::call_function(p"LaserFilter");
    if(IsNewRay.equals("1")){
        code::call_function("LaserRay");
        code::return_function();
    }
    code::call_function("LaserBeacon");
    if(IsNewRay.equals("1")){
        code::call_function("LaserRay");
        code::return_function();
    }
    if(Type.equals("portal")){
        code::call_function("LsrPrtlChoose");
        code::call_function("LsrPrtlCollide");
        if(IsNewRay.equals("1")){
            code::call_function("LaserRay");
            code::return_function();
        }
    }
    code::call_function("LaserRelayClear");
    FinalBlockPos = RayEndBlock;
    code::call_function("LaserActivate");
}

function LaserPickColor{
    code::call_function("WAIT");
    if(l`LaserParticle_%var_local(RayCount)`.equals(0)){
        if(Color.equals("red")){
            l`LaserParticle_%var_local(RayCount)` = RedParticles.get_list_value(RayCount, particle("DUST", 1, 0, 0, 0, 0, 0, color=4915200));
        }
        if(Color.equals("blue")){
            l`LaserParticle_%var_local(RayCount)` = BlueParticles.get_list_value(RayCount, particle("DUST", 1, 0, 0, 0, 0, 0, color=1652322));
        }
        if(Color.equals("orange")){
            l`LaserParticle_%var_local(RayCount)` = OrangeParticles.get_list_value(RayCount, particle("DUST", 1, 0, 0, 0, 0, 0, color=6434841));
        }
    }
}

function LaserRedirect{
    code::call_function("WAIT");
    if(RayCount.less_or_equals(g`MAX_RAY_COUNT`)){
        if(RayUUID.equals("0")){
            BlockType = RayEndBlock.get_block_material();
            if(BlockType.text_contains("jack_o_lantern")){
                BlockData = RayEndBlock.get_block_material("ID_WITH_DATA");
                code::call_function("LaserVectData");
                RayStartPos = RayEndBlock.set_location_direction(LaserFacingVect);
                RayStartPos = RayStartPos.shift_all_coordinates("0.5", "0.5", "0.5");
                RayStartPos = RayStartPos.shift_location_in_direction("0.55");
                RayCount = variable::add([RayCount, "1"]);
                IsNewRay = "1";
            }
            if(BlockType.text_contains("purpur_stairs")){
                if(RayEndSide.not_equals(["down", "up"])){
                    half = RayEndBlock.get_block_data("half");
                    if(half.equals("bottom")){
                        LaserFacingVect = vector(0, 1, 0);
                    }
                    else{
                        LaserFacingVect = vector(0, -1, 0);
                    }
                }
                else{
                    facing = RayEndBlock.get_block_data("facing");
                    LaserFacingVect = variable::get_vector_from_block_face(facing);
                    LaserFacingVect = variable::multiply_vector(LaserFacingVect, -1);
                }
                RayStartPos = RayEndBlock.set_location_direction(LaserFacingVect);
                RayStartPos = RayStartPos.shift_all_coordinates("0.5", "0.5", "0.5");
                RayStartPos = RayStartPos.shift_location_in_direction("0.55");
                RayCount = variable::add([RayCount, "1"]);
                IsNewRay = "1";
            }
        }
    }
}

function LaserVectData{
    code::call_function("WAIT");
    if(BlockData.text_contains("facing=south")){
        LaserFacingVect = vector(0, 0, 1);
    }
    if(BlockData.text_contains("facing=north")){
        LaserFacingVect = vector(0, 0, -1);
    }
    if(BlockData.text_contains("facing=east")){
        LaserFacingVect = vector(1, 0, 0);
    }
    if(BlockData.text_contains("facing=west")){
        LaserFacingVect = vector(-1, 0, 0);
    }
}

function LaserBeacon{
    code::call_function("WAIT");
    if(RayCount.less_or_equals(g`MAX_RAY_COUNT`)){
        if(RayUUID.not_equals("0")){
            if(ID.equals([-33, -35])){
                if(g`SpiderUUIDList`.list_contains_value(RayUUID)){
                    SpiderBodyUUID = RayUUID;
                    g`%var_local(SpiderBodyUUID)_IsLaserHurt` = 1;
                    code::return_function();
                }
            }
            StandUUID = g`%var_local(RayUUID)_StandUUID`;
            select::entity_by_name(StandUUID);
            if(value::name<current>.text_contains(["*beacon*", "*rail*"])){
                RayStartPos = value::location<current>.shift_coordinate("0.5", "Y");
                RayEntityList = RayEntityList.remove_list_value(RayUUID);
                RayCount = variable::add([RayCount, "1"]);
                IsNewRay = "1";
            }
        }
    }
}

function LsrPrtlChoose{
    code::call_function("WAIT");
    if(RayCount.less_or_equals(g`MAX_RAY_COUNT`)){
        if(RayUUID.equals("0")){
            CheckCount = variable::multiply([RayCount, "3.0"]);
            if(CheckTick.equals(CheckCount)){
                select::entity_by_conditional(value::name<victim_entity>.text_starts_with("portal*"));
                select::filter_by_distance(RayEndPos, "1", "FALSE");
                if(value::selection_size.greater("0.0")){
                    l`%var_local(RayCount)_PortalUUID` = value::uuid<current>;
                }
            }
        }
    }
}

function LsrPrtlCollide{
    code::call_function("WAIT");
    if(RayCount.less_or_equals(g`MAX_RAY_COUNT`)){
        if(RayUUID.equals("0")){
            select::entity_by_name(l`%var_local(RayCount)_PortalUUID`);
            if(value::selection_size.greater("0.0")){
                DistToPrtl = variable::locations_distance(RayEndPos, value::location<current>);
                if(DistToPrtl.less_or_equals("2.0")){
                    PrtlNameList = value::name<current>.split_text("*");
                    PrtlOwner = PrtlNameList.get_list_value("1");
                    if(g`PrtlIsLinked*portal*%var_local(PrtlOwner)*%selected_uuid%`.equals("1")){
                        PortalCorner_1 = g`PrtlCorner_1*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        PortalCorner_2 = g`PrtlCorner_2*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                        if(RayEndPos.in_range(PortalCorner_1, PortalCorner_2)){
                            PrtlNormalVect = g`PrtlNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlCenterPos = g`PrtlCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlDirVect = g`PrtlDirVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlLinkedNormalVect = g`PrtlLinkedNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlLinkedCenterPos = g`PrtlLinkedCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlLinkedDirVect = g`PrtlLinkedDirVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            code::call_function("LsrPrtlTeleport");
                        }
                    }
                }
            }
        }
    }
}

function LsrPrtlTeleport{
    PrtlShiftedTopDir = variable::multiply_vector(PrtlDirVect, 0.5);
    PrtlShiftedLowDir = variable::multiply_vector(PrtlDirVect, -0.5);
    PrtlShiftedTopPos = PrtlCenterPos.shift_location_on_vector(PrtlShiftedTopDir);
    PrtlShiftedLowPos = PrtlCenterPos.shift_location_on_vector(PrtlShiftedLowDir);
    PrtlDistToTop = variable::locations_distance(RayEndPos, PrtlShiftedTopPos);
    PrtlDistToLow = variable::locations_distance(RayEndPos, PrtlShiftedLowPos);
    if(PrtlDistToTop.less(PrtlDistToLow)){
        PrtlShiftedLinkedDir = variable::multiply_vector(PrtlLinkedDirVect, 0.5);
    }
    else{
        PrtlShiftedLinkedDir = variable::multiply_vector(PrtlLinkedDirVect, -0.5);
    }
    RayStartPos = PrtlLinkedCenterPos.shift_location_on_vector(PrtlShiftedLinkedDir);
    RayStartPos = RayStartPos.set_location_direction(PrtlLinkedNormalVect);
    RayCount = variable::add([RayCount, "1"]);
    IsNewRay = "1";
}

function LaserActivate{
    code::call_function("WAIT");
    BlockType = FinalBlockPos.get_block_material();
    if(BlockType.text_contains(["red_terracotta", "redstone_block"])){
        if(BlockPlaced.equals("0")){
            BlockPlaced = "1";
            RememberPos = FinalBlockPos;
            world::set_block(RememberPos, "minecraft:redstone_block", "TRUE");
        }
        else{
            if not (FinalBlockPos.in_range(RememberPos, RememberPos)){
                BlockPlaced = "0";
                world::set_block(RememberPos, "minecraft:red_terracotta", "TRUE");
            }
        }
    }
    else{
        if(BlockPlaced.equals("1")){
            BlockPlaced = "0";
            world::set_block(RememberPos, "minecraft:red_terracotta", "TRUE");
        }
    }
}

function LaserReload{
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("laser*%var_local(CurrentLevel)*"));
    if(value::selection_size.greater("0.0")){
        repeat::for_each_in_list(value_variable=LaserUUID, list=value::selection_target_uuids){
            g`%var_local(LaserUUID)_IsNeedReset` = "1";
        }
    }
    select::reset();
}

function ResetVars{
    g`%player%_ClearUnused` = "0";
    g`%player%_DialogTrigger.0` = "0";
    g`%player%_DialogTrigger.1` = "0";
    g`%player%_ShowDialog` = "0";
    g`%player%_HasPortalGun` = "0";
    g`%player%_HasGravityGun` = "0";
}

function PrtlLaunch{
    PrtlHitPoint, PrtlHitBlockPos, PrtlHitSide = variable::ray_trace_result(start=value::eye_location<default>, ray_size="0", max_distance="100", fluid_collision_mode="ALWAYS");
    if(PrtlHitPoint.not_equals("0")){
        TEMPStartPos = value::eye_location<default>;
        TEMPLength = variable::locations_distance(TEMPStartPos, PrtlHitPoint);
        code::call_function("TEMPLsrBlDetect");
        code::call_function("ParticleViewStart");
        player::display_particle_line(PrtlTrayPart, ParticleViewStart, PrtlHitPoint, 0.25, "DISTANCE");
        PrtlHitBlockPos = PrtlHitBlockPos.shift_all_coordinates("0.5", "0.5", "0.5");
        PrtlHitMaterial = PrtlHitBlockPos.get_block_material("ID_WITH_DATA");
        if(PrtlHitMaterial.text_contains(["quartz_block", "smooth_quartz", "end_stone_bricks", "quartz_bricks", "quartz_pillar", "chiseled_quartz_block", "calcite", "pearlescent_froglight", "bone_block", "ochre_froglight", "carved_pumpkin", "redstone_lamp", "polished_basalt"])){
            PrtlFacingMaterial = PrtlHitMaterial;
            code::call_function("PrtlFacingBlock");
            code::call_function("PrtlGetNormal");
            PrtlHitBlockPos = PrtlHitBlockPos.set_location_direction(PrtlNormalVect);
            PrtlFrontHitBlockPos = PrtlHitBlockPos.shift_location_in_direction("0.55");
            PrtlFrontHitMaterial = PrtlFrontHitBlockPos.get_block_material();
            if(PrtlFrontHitMaterial.equals(["air", "light", "structure_void", "glow_lichen", "rail", "activator_rail"])){
                PrtlCollideCheckPos = PrtlFrontHitBlockPos;
                code::call_function("PrtlToPrtlCollide");
                if(PrtlIsCollidedWithPrtl.equals("0.0")){
                    if(PrtlNormalVect.equals([vector(0, 0, 1), vector(0, 0, -1), vector(1, 0, 0), vector(-1, 0, 0)])){
                        code::call_function("PrtlSetVerical");
                    }
                    else{
                        code::call_function("PrtlHorizNormal");
                        PrtlTopVect = PrtlHorizNormal;
                        PrtlBottomVect = variable::multiply_vector(PrtlTopVect, "-1");
                        code::call_function("PrtlSetHoriz");
                    }
                }
            }
        }
    }
}

function PrtlGetNormal{
    if(PrtlHitSide.equals("south")){
        PrtlNormalVect = vector(0, 0, 1);
    }
    if(PrtlHitSide.equals("north")){
        PrtlNormalVect = vector(0, 0, -1);
    }
    if(PrtlHitSide.equals("east")){
        PrtlNormalVect = vector(1, 0, 0);
    }
    if(PrtlHitSide.equals("west")){
        PrtlNormalVect = vector(-1, 0, 0);
    }
    if(PrtlHitSide.equals("up")){
        PrtlNormalVect = vector(0, 1, 0);
    }
    if(PrtlHitSide.equals("down")){
        PrtlNormalVect = vector(0, -1, 0);
    }
}

function PrtlHorizNormal{
    PlLookSide = value::cardinal_direction<default>;
    if(PlLookSide.equals("south")){
        PrtlHorizNormal = vector(0, 0, 1);
    }
    if(PlLookSide.equals("north")){
        PrtlHorizNormal = vector(0, 0, -1);
    }
    if(PlLookSide.equals("east")){
        PrtlHorizNormal = vector(1, 0, 0);
    }
    if(PlLookSide.equals("west")){
        PrtlHorizNormal = vector(-1, 0, 0);
    }
}

function PrtlToPrtlCollide{
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("portal*"));
    select::filter_by_conditional(not value::name<victim_entity>.text_contains("*%player%*%var_local(PrtlColorType)*"));
    select::filter_by_distance(PrtlCollideCheckPos, "1", "FALSE");
    if(value::selection_size.greater("0.0")){
        PrtlNameList = "%selected%".split_text("*");
        PrtlOwner = PrtlNameList.get_list_value("1");
        PrtlOtherCorner_1 = g`PrtlCorner_1*portal*%var_local(PrtlOwner)*%selected_uuid%`;
        PrtlOtherCorner_2 = g`PrtlCorner_2*portal*%var_local(PrtlOwner)*%selected_uuid%`;
        PrtlIsCollidedWithPrtl = "0.0";
        if(PrtlCollideCheckPos.location_in_range(PrtlOtherCorner_1, PrtlOtherCorner_2, "EXACT")){
            PrtlIsCollidedWithPrtl = "1.0";
        }
    }
    select::reset();
}

function PrtlSetVerical{
    PrtlBottomBlockPos = PrtlHitBlockPos.shift_coordinate("-1.0", "Y");
    PrtlBottomMaterial = PrtlBottomBlockPos.get_block_material("ID_WITH_DATA");
    if(PrtlBottomMaterial.text_contains(["quartz_block", "smooth_quartz", "end_stone_bricks", "quartz_bricks", "quartz_pillar", "chiseled_quartz_block", "calcite", "pearlescent_froglight", "bone_block", "ochre_froglight", "carved_pumpkin", "redstone_lamp", "polished_basalt"])){
        PrtlFacingMaterial = PrtlBottomMaterial;
        code::call_function("PrtlFacingBlock");
        PrtlFrontBottomBlockPos = PrtlBottomBlockPos.shift_location_in_direction("0.55");
        PrtlFrontBottomMaterial = PrtlFrontBottomBlockPos.get_block_material();
        if(PrtlFrontBottomMaterial.equals(["air", "light", "structure_void", "glow_lichen", "rail", "activator_rail"])){
            PrtlCollideCheckPos = PrtlFrontBottomBlockPos;
            code::call_function("PrtlToPrtlCollide");
            if(PrtlIsCollidedWithPrtl.equals("0.0")){
                PrtlCenterPos = PrtlFrontHitBlockPos.shift_coordinate("-0.5", "Y");
                PrtlLowPos = PrtlCenterPos.shift_coordinate("-1", "Y");
                PrtlSpawnPos = PrtlCenterPos.shift_coordinate("-0.5", "Y");
                PrtlDirVect = vector(0, 1, 0);
                code::call_function("PrtlSetup");
            }
            else{
                code::call_function("PrtlSetVericalTop");
            }
        }
        else{
            code::call_function("PrtlSetVericalTop");
        }
    }
    else{
        code::call_function("PrtlSetVericalTop");
    }
}

function PrtlSetVericalTop{
    PrtlTopBlockPos = PrtlHitBlockPos.shift_coordinate("1.0", "Y");
    PrtlTopMaterial = PrtlTopBlockPos.get_block_material("ID_WITH_DATA");
    if(PrtlTopMaterial.text_contains(["quartz_block", "smooth_quartz", "end_stone_bricks", "quartz_bricks", "quartz_pillar", "chiseled_quartz_block", "calcite", "pearlescent_froglight", "bone_block", "ochre_froglight", "carved_pumpkin", "redstone_lamp", "polished_basalt"])){
        PrtlFacingMaterial = PrtlTopBlockPos;
        code::call_function("PrtlFacingBlock");
        PrtlFrontTopBlockPos = PrtlTopBlockPos.shift_location_in_direction("0.55");
        PrtlFrontTopMaterial = PrtlFrontTopBlockPos.get_block_material();
        if(PrtlFrontTopMaterial.equals(["air", "light", "structure_void", "glow_lichen", "rail", "activator_rail"])){
            PrtlCollideCheckPos = PrtlFrontTopBlockPos;
            code::call_function("PrtlToPrtlCollide");
            if(PrtlIsCollidedWithPrtl.equals("0.0")){
                PrtlCenterPos = PrtlFrontHitBlockPos.shift_coordinate("0.5", "Y");
                PrtlLowPos = PrtlCenterPos.shift_coordinate("-1", "Y");
                PrtlSpawnPos = PrtlCenterPos.shift_coordinate("-0.5", "Y");
                PrtlDirVect = vector(0, 1, 0);
                code::call_function("PrtlSetup");
            }
        }
    }
}

function PrtlSetHoriz{
    PrtlBottomBlockPos = PrtlHitBlockPos.shift_location_on_vector(PrtlTopVect);
    PrtlBottomMaterial = PrtlBottomBlockPos.get_block_material("ID_WITH_DATA");
    if(PrtlBottomMaterial.text_contains(["quartz_block", "smooth_quartz", "end_stone_bricks", "quartz_bricks", "quartz_pillar", "chiseled_quartz_block", "calcite", "pearlescent_froglight", "bone_block", "ochre_froglight", "carved_pumpkin", "redstone_lamp", "polished_basalt"])){
        PrtlFacingMaterial = PrtlBottomBlockPos;
        code::call_function("PrtlFacingBlock");
        PrtlFrontBottomBlockPos = PrtlBottomBlockPos.shift_location_in_direction("0.55");
        PrtlFrontBottomMaterial = PrtlFrontBottomBlockPos.get_block_material();
        if(PrtlFrontBottomMaterial.equals(["air", "light", "structure_void", "glow_lichen", "rail", "activator_rail"])){
            PrtlCollideCheckPos = PrtlFrontBottomBlockPos;
            code::call_function("PrtlToPrtlCollide");
            if(PrtlIsCollidedWithPrtl.equals("0.0")){
                PrtlShiftCenterVect = variable::multiply_vector(PrtlHorizNormal, "0.5");
                PrtlShiftSpawnVect = variable::multiply_vector(PrtlHorizNormal, "-0.5");
                PrtlCenterPos = PrtlFrontHitBlockPos.shift_location_on_vector(PrtlShiftCenterVect);
                PrtlLowPos = PrtlCenterPos;
                PrtlSpawnPos = PrtlCenterPos.shift_location_on_vector(PrtlShiftSpawnVect);
                PrtlDirVect = PrtlHorizNormal;
                code::call_function("PrtlSetup");
            }
            else{
                code::call_function("PrtlSetHorizTop");
            }
        }
        else{
            code::call_function("PrtlSetHorizTop");
        }
    }
    else{
        code::call_function("PrtlSetHorizTop");
    }
}

function PrtlSetHorizTop{
    PrtlTopBlockPos = PrtlHitBlockPos.shift_location_on_vector(PrtlBottomVect);
    PrtlTopMaterial = PrtlTopBlockPos.get_block_material("ID_WITH_DATA");
    if(PrtlTopMaterial.text_contains(["quartz_block", "smooth_quartz", "end_stone_bricks", "quartz_bricks", "quartz_pillar", "chiseled_quartz_block", "calcite", "pearlescent_froglight", "bone_block", "ochre_froglight", "carved_pumpkin", "redstone_lamp", "polished_basalt"])){
        PrtlFacingMaterial = PrtlTopMaterial;
        code::call_function("PrtlFacingBlock");
        PrtlFrontTopBlockPos = PrtlTopBlockPos.shift_location_in_direction("0.55");
        PrtlFrontTopMaterial = PrtlFrontTopBlockPos.get_block_material();
        if(PrtlFrontTopMaterial.equals(["air", "light", "structure_void", "glow_lichen", "rail", "activator_rail"])){
            PrtlCollideCheckPos = PrtlFrontTopBlockPos;
            code::call_function("PrtlToPrtlCollide");
            if(PrtlIsCollidedWithPrtl.equals("0.0")){
                PrtlShiftCenterVect = variable::multiply_vector(PrtlHorizNormal, "-0.5");
                PrtlShiftSpawnVect = variable::multiply_vector(PrtlHorizNormal, "-0.5");
                PrtlCenterPos = PrtlFrontHitBlockPos.shift_location_on_vector(PrtlShiftCenterVect);
                PrtlLowPos = PrtlCenterPos;
                PrtlSpawnPos = PrtlCenterPos.shift_location_on_vector(PrtlShiftSpawnVect);
                PrtlDirVect = PrtlHorizNormal;
                code::call_function("PrtlSetup");
            }
            else{
                code::call_function("PrtlSetSideways");
            }
        }
        else{
            code::call_function("PrtlSetSideways");
        }
    }
    else{
        code::call_function("PrtlSetSideways");
    }
}

function PrtlSetSideways{
    if(PrtlNeedRotation.equals("0.0")){
        PrtlNeedRotation = "1.0";
        if(PrtlTopVect.equals([vector(0, 0, 1), vector(0, 0, -1)])){
            PrtlHorizNormal = vector(1, 0, 0);
        }
        else{
            PrtlHorizNormal = vector(0, 0, 1);
        }
        PrtlTopVect = PrtlHorizNormal;
        PrtlBottomVect = variable::multiply_vector(PrtlTopVect, "-1");
        code::call_function("PrtlSetHoriz");
    }
}

function PrtlFacingBlock{
    if(PrtlFacingMaterial.text_contains("carved_pumpkin")){
        PrtlFacingTxt = variable::set_text(["facing=", PrtlHitSide], "CONCATENATION");
        if not (PrtlFacingMaterial.text_contains(PrtlFacingTxt)){
            code::break();
        }
    }
    if(PrtlFacingMaterial.text_contains("polished_basalt")){
        if(PrtlHitSide.not_equals(["up", "down"])){
            code::break();
        }
        if not (PrtlFacingMaterial.text_contains("axis=y")){
            code::break();
        }
    }
}

function PrtlSetup{
    if(PrtlNormalVect.equals([vector(0, 0, 1), vector(0, 0, -1)])){
        PrtlCorner_1 = PrtlCenterPos.shift_all_coordinates("-0.5", "-1.0", "-0.08");
        PrtlCorner_2 = PrtlCenterPos.shift_all_coordinates("0.5", "1.0", "0.08");
    }
    if(PrtlNormalVect.equals([vector(1, 0, 0), vector(-1, 0, 0)])){
        PrtlCorner_1 = PrtlCenterPos.shift_all_coordinates("-0.08", "-1.0", "-0.5");
        PrtlCorner_2 = PrtlCenterPos.shift_all_coordinates("0.08", "1.0", "0.5");
    }
    if(PrtlNormalVect.equals([vector(0, 1, 0), vector(0, -1, 0)])){
        if(PrtlHorizNormal.equals([vector(0, 0, 1), vector(0, 0, -1)])){
            PrtlCorner_1 = PrtlCenterPos.shift_all_coordinates("-0.5", "-0.08", "-1.0");
            PrtlCorner_2 = PrtlCenterPos.shift_all_coordinates("0.5", "0.08", "1.0");
        }
        if(PrtlHorizNormal.equals([vector(1, 0, 0), vector(-1, 0, 0)])){
            PrtlCorner_1 = PrtlCenterPos.shift_all_coordinates("-1.0", "-0.08", "-0.5");
            PrtlCorner_2 = PrtlCenterPos.shift_all_coordinates("1.0", "0.08", "0.5");
        }
    }
    if(s`%player%_AltVelocitySetting`.equals(1)){
        PrtlCorner_1 = PrtlCorner_1.shift_location_on_vector(PrtlNormalVect, -0.5);
        PrtlCorner_2 = PrtlCorner_2.shift_location_on_vector(PrtlNormalVect, 0.5);
    }
    if(PrtlColorType.equals("BLUE")){
        select::entity_by_name(g`%player%_PrtlBlueUUID`);
    }
    else{
        select::entity_by_name(g`%player%_PrtlOrangeUUID`);
    }
    if(value::selection_size.greater("0.0")){
        variable::purge(value::uuid<current>, match="NAME_CONTAINS");
        entity::remove();
        if(g`%player%_ActivePrtlsCount`.greater("0")){
            g`%player%_ActivePrtlsCount` = variable::subtract([g`%player%_ActivePrtlsCount`, "1"]);
        }
    }
    select::reset();
    code::call_function("PrtlCreate");
}

function PrtlCreate{
    player::play_sound(sound("minecraft:block.respawn_anchor.charge", 1, 2, "MASTER"), PrtlCenterPos);
    PrtlName = "portal*%player%*%var_local(PrtlColorType)*%random_uuid%";
    code::call_function(p"PrtlSpawnEnt");
    entity::set_custom_name(PrtlName);
    entity::set_display_interpolation(4);
    entity::set_display_scale(vector(1, 1, 1));
    PrtlUUID = value::uuid<current>;
    g`PrtlUUID*portal*%player%*%selected_uuid%` = PortalUUID;
    g`PrtlCorner_1*portal*%player%*%selected_uuid%` = PrtlCorner_1;
    g`PrtlCorner_2*portal*%player%*%selected_uuid%` = PrtlCorner_2;
    g`PrtlCenterPos*portal*%player%*%selected_uuid%` = PrtlCenterPos;
    g`PrtlLowPos*portal*%player%*%selected_uuid%` = PrtlLowPos;
    g`PrtlNormalVect*portal*%player%*%selected_uuid%` = PrtlNormalVect;
    g`PrtlDirVect*portal*%player%*%selected_uuid%` = PrtlDirVect;
    g`%var_local(PrtlUUID)_Level` = g`%player%_Level`;
    if(PrtlColorType.equals("BLUE")){
        player::set_entity_glowing(PrtlUUID, "AQUA");
        g`%player%_PrtlPlacedBlue` = "1.0";
        g`%player%_PrtlBlueUUID` = PrtlUUID;
        if(g`%player%_PrtlPlacedOrange`.equals("1.0")){
            PrtlLinkedUUID = g`%player%_PrtlOrangeUUID`;
            code::call_function("PrtlLinkPortals");
        }
    }
    else{
        player::set_entity_glowing(PrtlUUID, "GOLD");
        g`%player%_PrtlPlacedOrange` = "1.0";
        g`%player%_PrtlOrangeUUID` = PrtlUUID;
        if(g`%player%_PrtlPlacedBlue`.equals("1.0")){
            PrtlLinkedUUID = g`%player%_PrtlBlueUUID`;
            code::call_function("PrtlLinkPortals");
        }
    }
    code::call_function(p"PrtlParticles");
    select::reset();
    if(g`%player%_ActivePrtlsCount`.less("2")){
        g`%player%_ActivePrtlsCount` = variable::add([g`%player%_ActivePrtlsCount`, "1"]);
    }
}

function PrtlLinkPortals{
    g`PrtlLinkedUUID*portal*%player%*%selected_uuid%` = PrtlLinkedUUID;
    g`PrtlIsLinked*portal*%player%*%selected_uuid%` = "1";
    g`PrtlLinkedCenterPos*portal*%player%*%selected_uuid%` = g`PrtlCenterPos*portal*%player%*%var_local(PrtlLinkedUUID)`;
    g`PrtlLinkedLowPos*portal*%player%*%selected_uuid%` = g`PrtlLowPos*portal*%player%*%var_local(PrtlLinkedUUID)`;
    g`PrtlLinkedNormalVect*portal*%player%*%selected_uuid%` = g`PrtlNormalVect*portal*%player%*%var_local(PrtlLinkedUUID)`;
    g`PrtlLinkedDirVect*portal*%player%*%selected_uuid%` = g`PrtlDirVect*portal*%player%*%var_local(PrtlLinkedUUID)`;
    if(PrtlColorType.equals("BLUE")){
        entity::set_item_display_item("H4sIAAAAAAAA/0WNMQ7CMAxFP1RFECZmNo7BxMAZEJtlkhRFJHZVu/flKLQTb3zS0wtAh+OdnR95sqICnJ57bEvCpRXJceLBr6/K8UPmvJhE78pmNLLkDn3UWRzAJiBEbaNKFreA87+Os7k2appypbSsDtgNVdmtX8PbFys/NgXF5YoAAAA=");
    }
    else{
        entity::set_item_display_item("H4sIAAAAAAAA/0WNsQ7CMAwFH1RFECZmNj6DDanfgNgsk6QoIrGr2v1/Cgs3nnS6AHQ4Dux8z7MVFeD02GNbEi6tSI4zj359Vo5vMufVJHpVNqOJJXfooy7iADYBIWqbVLK4BZz/dVzMtVHTlCuldXXAbqzKbv03vOHHBwAV9lWKAAAA");
    }
    select::entity_by_name(PrtlLinkedUUID);
    g`PrtlLinkedUUID*portal*%player%*%selected_uuid%` = PrtlUUID;
    g`PrtlIsLinked*portal*%player%*%selected_uuid%` = "1";
    g`PrtlLinkedCenterPos*portal*%player%*%selected_uuid%` = PrtlCenterPos;
    g`PrtlLinkedLowPos*portal*%player%*%selected_uuid%` = PrtlLowPos;
    g`PrtlLinkedNormalVect*portal*%player%*%selected_uuid%` = PrtlNormalVect;
    g`PrtlLinkedDirVect*portal*%player%*%selected_uuid%` = PrtlDirVect;
    if(PrtlColorType.equals("BLUE")){
        entity::set_item_display_item("H4sIAAAAAAAA/0WNsQ7CMAwFH1RFECZmNj6DDanfgNgsk6QoIrGr2v1/Cgs3nnS6AHQ4Dux8z7MVFeD02GNbEi6tSI4zj359Vo5vMufVJHpVNqOJJXfooy7iADYBIWqbVLK4BZz/dVzMtVHTlCuldXXAbqzKbv03vOHHBwAV9lWKAAAA");
    }
    else{
        entity::set_item_display_item("H4sIAAAAAAAA/0WNMQ7CMAxFP1RFECZmNo7BxMAZEJtlkhRFJHZVu/flKLQTb3zS0wtAh+OdnR95sqICnJ57bEvCpRXJceLBr6/K8UPmvJhE78pmNLLkDn3UWRzAJiBEbaNKFreA87+Os7k2appypbSsDtgNVdmtX8PbFys/NgXF5YoAAAA=");
    }
}

function PrtlSpawnEnt{
    PrtlSpawnPos = PrtlSpawnPos.set_location_direction(PrtlNormalVect);
    if(PrtlNormalVect.equals([vector(0, 1, 0), vector(0, -1, 0)])){
        EntHorizAngle = PrtlHorizNormal;
        if(PrtlNormalVect.equals(vector(0, 1, 0))){
            EntHorizAngle = variable::multiply_vector(EntHorizAngle, -1);
        }
        EntHorizAngle = location(0, 0, 0, 0, 0).set_location_direction(EntHorizAngle);
        EntHorizAngle = EntHorizAngle.get_coordinate("YAW");
        PrtlSpawnPos = PrtlSpawnPos.set_coordinate(EntHorizAngle, "YAW");
    }
    if(PrtlColorType.equals("BLUE")){
        world::spawn_mob("H4sIAAAAAAAA/4WPPU7EMBCFH2SDiFesRMFS0HEMmqXgDIjOGhwnWPgn8swKbcdROCpxIiVbwevmzfvmRwEVti8k9GozuxSB27drXLoW98FFazJ18vROonmgr6ht31eoTTpGAXChoEwKQ4o2CivcrchoODnpdpw8j9uvPSc26Nbx4OmksCnlnHk8W+nJfGoWGp1W956Y9UDR/rH9YaXNkSUFHVJr/XRDg6vOJxKuC/j8gyKFnWSK3KUcSMbnG2wnw09ViVYld8CsBrvs+g/ROcmS2OBMh++SqtmQtwuOBb/xtvuHLvoFZaKHvJUBAAA=", PrtlSpawnPos, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    else{
        world::spawn_mob("H4sIAAAAAAAA/4WPPU7EMBCFH2SDiFesRMFS0HEMmqXgDIjOGhwnWPgn8swKbcfROBpxIiVbwevmzfvmRwEVti8k9GozuxSB27drXLoW98FFazJ18vROonmgr6ht31eoTTpGAXChoEwKQ4o2CivcrchoODnpdpw8j9uvPSc26Nbx4OmksCnlnHk8W+nJfGoWGp1W956Y9UDR/rH9YaXNkSUFHVJr/XRDg6vOJxKuC/j8gyKFnWSK3KUcSMbnG2wnw09ViVYld8CsBrvs+g/ROcmS2OBMh++SqtmQtwuOBb/xtvuHLvoFtC+3lZUBAAA=", PrtlSpawnPos, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    select::last_entity();
}

function PrtlParticles{
    PrtlPartPos = PrtlCenterPos.set_location_direction(PrtlNormalVect);
    PrtlPartPos = PrtlPartPos.shift_location_in_direction("0.0625");
    if(PrtlColorType.equals("BLUE")){
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=41727), PrtlPartPos);
    }
    else{
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16751104), PrtlPartPos);
    }
}

function UnloadPrtls{
    if(g`%player%_ActivePrtlsCount`.greater("0")){
        g`%player%_ActivePrtlsCount` = "0";
        select::entity_by_name([g`%player%_PrtlBlueUUID`, g`%player%_PrtlOrangeUUID`]);
        if(value::selection_size.greater("0.0")){
            entity::remove();
        }
        variable::purge(["%player%_PrtlPlacedBlue", "%player%_PrtlBlueUUID", "%player%_PrtlPlacedOrange", "%player%_PrtlOrangeUUID", "portal*%player%*"], match="STARTS_WITH");
        select::reset();
    }
}

event<player_right_click_entity>{
    if(value::name<victim_entity>.equals("portal_frame")){
        world::cancel_event();
        if(g`%player%_InMenu`.equals(0)){
            if(g`%player%_HasPortalGun`.equals("0")){
                g`%player%_HasPortalGun` = "1";
                player::set_item_cooldown(999999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
                code::call_function(p"GiveGunItems");
                player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
                if(g`%player%_HasGravityGun`.equals(0)){
                    player::set_hotbar_slot("4");
                }
                else{
                    player::set_hotbar_slot(3);
                }
                player::play_sound_from_entity(value::name<default>, sound("minecraft:item.armor.equip_netherite", 1, 2, "MASTER"));
                player::hide_entity("portal_frame");
            }
        }
    }
    if(value::name<victim_entity>.equals("gravity_frame")){
        world::cancel_event();
        if(g`%player%_InMenu`.equals(0)){
            if(g`%player%_HasGravityGun`.equals(0)){
                g`%player%_HasGravityGun` = "1";
                player::set_item_cooldown(999999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
                code::call_function(p"GiveGunItems");
                player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
                if(g`%player%_HasPortalGun`.equals(0)){
                    player::set_hotbar_slot("4");
                }
                else{
                    player::set_hotbar_slot(5);
                }
                player::play_sound_from_entity(value::name<default>, sound("minecraft:item.armor.equip_netherite", 1, 2, "MASTER"));
                player::hide_entity("gravity_frame");
            }
        }
    }
}

function PGunBLUE{
    code::call_function("SelectedItem");
    if(SelectedItem.equals("portal_gun")){
        code::call_function(p"CheckGunClick");
        if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
            Item = g`ItemPortalGunBlue`;
            player::set_item_cooldown(999999, Item);
            player::set_equipment(Item);
            player::set_item_cooldown("5.0", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
            player::play_sound_from_entity(value::name<default>, sound("minecraft:item.firecharge.use", 1, 2, "MASTER"));
            PrtlColorType = "BLUE";
            PrtlTrayPart = particle("DUST_COLOR_TRANSITION", 1, 0, 0, 0, 0, 0, color=41727);
            code::call_function("PrtlLaunch");
        }
    }
    if(SelectedItem.equals("gravity_gun")){
        code::call_function(p"CheckGunClick");
        if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
            player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
            code::call_function("ParticleViewStart");
            player::display_particle(particle("FLASH", 1, 0, 0, 0, 0, 0), ParticleViewStart);
            player::play_sound_from_entity(value::name<default>, sound("minecraft:entity.dragon_fireball.explode", 0.5, 2, "MASTER"));
            select::entity_by_name(g`LvlCubeList_%var(%player%_Level)`);
            select::filter_by_conditional(value::name<victim_entity>.text_starts_with("cube_stand*%player%*"));
            select::filter_by_raycast(EndPos, value::eye_location<default>, 3, 0.5);
            select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
            if(value::selection_size.greater(0)){
                code::call_function(p"GravityLMB1");
            }
            else{
                code::call_function("GravityLMB2");
            }
        }
    }
}

function PGunORANGE{
    code::call_function("SelectedItem");
    if(SelectedItem.equals("portal_gun")){
        code::call_function(p"CheckGunClick");
        if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
            Item = g`ItemPortalGunOrange`;
            player::set_item_cooldown(999999, Item);
            player::set_equipment(Item);
            player::set_item_cooldown("5.0", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
            player::play_sound_from_entity(value::name<default>, sound("minecraft:item.firecharge.use", 1, 2, "MASTER"));
            PrtlColorType = "ORANGE";
            PrtlTrayPart = particle("DUST_COLOR_TRANSITION", 1, 0, 0, 0, 0, 0, color=16751104);
            code::call_function("PrtlLaunch");
        }
    }
    if(SelectedItem.equals("gravity_gun")){
        code::call_function(p"CheckGunClick");
        if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
            player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
            code::call_function("ParticleViewStart");
            player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart);
            player::play_sound_from_entity(value::name<default>, sound("minecraft:block.beehive.work", 0.8, 1, "work1", "MASTER"));
            select::entity_by_name(g`LvlCubeList_%var(%player%_Level)`);
            select::filter_by_conditional(value::name<victim_entity>.text_starts_with("cube_stand*%player%*"));
            select::filter_by_raycast(EndPos, value::eye_location<default>, 32, 0.5);
            select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
            if(value::selection_size.greater(0)){
                code::call_function(p"GravityRMB1");
            }
            else{
                code::call_function(p"GravityRMB2");
            }
        }
    }
}

function PlClearPrtls{
    if(value::main_hand_item<default>.item_has_tag("item_type", "portal_gun")){
        if not (player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
            code::break();
        }
        Item = value::main_hand_item<default>;
        player::set_item_cooldown(999999, Item);
        player::set_equipment(Item);
        player::set_item_cooldown("10.0", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
        player::play_sound_from_entity(value::name<default>, sound("minecraft:block.respawn_anchor.deplete", 1, 2, "MASTER"));
        variable::purge(["%player%_PrtlPlacedBlue", "%player%_PrtlBlueUUID", "%player%_PrtlPlacedOrange", "%player%_PrtlOrangeUUID", "portal*%player%*"], match="NAME_CONTAINS");
        g`%player%_ActivePrtlsCount` = "0";
        select::entity_by_conditional(value::name<victim_entity>.text_contains("portal*%player%*"));
        if(value::selection_size.greater("0.0")){
            entity::set_display_interpolation(2);
            entity::set_display_scale(vector(0, 0, 0));
            code::wait(2);
            entity::remove();
        }
    }
}

process PlLOOP{
    FallVelocity = "0";
    PlayerVelocity = "0.08";
    MaxVelocity = "-1";
    CheckTick = "6.0";
    Tick_4 = 2;
    Tick_10 = 10;
    repeat::while(g`%player%_EnableLOOP`.equals("1")){
        code::call_function("WAIT");
        CurrentPos = value::location<default>;
        code::call_function(p"PlIsOnGround");
        code::call_function(p"PlLvlTrig");
        if(g`%player%_ActivePrtlsCount`.equals("2")){
            PlayerCenterPos = value::hitbox_midpoint_location<default>;
            code::call_function("PlPrtlChoose");
            code::call_function("PlPrtlCollide");
        }
        if(g`%player%_IsJumped`.equals("1")){
            g`%player%_IsJumped` = "0";
            FallVelocity = "0";
        }
        code::call_function("PlLPADAddVelocity");
        if(IsOnGround.equals("0")){
            if(s`%player%_AltVelocitySetting`.equals(0)){
                if(value::fall_distance<default>.greater("0.0")){
                    FallVelocity = variable::divide([FallVelocity, "0.98"]);
                    FallVelocity = variable::add([FallVelocity, "0.08"]);
                    if(MaxVelocity.not_equals("-1")){
                        if(FallVelocity.greater(MaxVelocity)){
                            FallVelocity = MaxVelocity;
                        }
                    }
                    PlayerVelocity = FallVelocity;
                }
            }
        }
        else{
            FallVelocity = "0";
            code::call_function("PlNonAirVelocity");
        }
        code::call_function("PlVarsTick");
        code::wait("1.0");
    }

}

function PlNonAirVelocity{
    code::call_function("WAIT");
    MaxVelocity = "-1";
    if(s`%player%_AltVelocitySetting`.equals(0)){
        if(player::is_sneaking()){
            if(PlayerVelocity.greater("0.04")){
                PlayerVelocity = variable::subtract([PlayerVelocity, "0.02"]);
                if(PlayerVelocity.less("0.04")){
                    PlayerVelocity = "0.04";
                }
            }
        }
        else{
            if(player::is_sprinting()){
                if(PlayerVelocity.less("0.25")){
                    PlayerVelocity = variable::add([PlayerVelocity, "0.02"]);
                    if(PlayerVelocity.greater("0.25")){
                        PlayerVelocity = "0.25";
                    }
                }
            }
            else{
                if(PlayerVelocity.not_equals("0.08")){
                    PlayerVelocity = "0.08";
                }
            }
        }
    }
}

function PlIsOnGround{
    code::call_function("WAIT");
    IsOnGround = "0.0";
    PlHitboxCorner_1 = CurrentPos.shift_all_coordinates(-0.298, -0.02, -0.298);
    PlHitboxCorner_2 = CurrentPos.shift_all_coordinates(0.298, value::entity_height<default>, 0.298);
    if(player::collides_using_hitbox(PlHitboxCorner_1, PlHitboxCorner_2)){
        IsOnGround = 1;
    }
    if not (player::gamemode_equals("ADVENTURE")){
        IsOnGround = "1";
    }
}

function PlPrtlChoose{
    code::call_function("WAIT");
    if(CheckTick.greater_or_equals("6.0")){
        CheckTick = "0";
        select::entity_by_name([g`%player%_PrtlBlueUUID`, g`%player%_PrtlOrangeUUID`]);
        select::filter_by_distance(PlayerCenterPos, "1", "FALSE");
        if(value::selection_size.greater("0.0")){
            PortalUUID = value::uuid<current>;
        }
    }
    CheckTick = variable::add([CheckTick, "1"]);
}

function PlPrtlCollide{
    code::call_function("WAIT");
    if(g`%player%_InTeleportation`.equals(0)){
        select::entity_by_name(PortalUUID);
        if(value::selection_size.greater("0.0")){
            DistToPrtl = variable::locations_distance(PlayerCenterPos, value::location<current>);
            if(DistToPrtl.less_or_equals(3)){
                PrtlNameList = value::name<current>.split_text("*");
                PrtlOwner = PrtlNameList.get_list_value("1");
                if(g`PrtlIsLinked*portal*%var_local(PrtlOwner)*%selected_uuid%`.equals("1")){
                    PrtlColorType = PrtlNameList.get_list_value("2.0");
                    PortalCorner_1 = g`PrtlCorner_1*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PortalCorner_2 = g`PrtlCorner_2*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    if(player::in_area(PortalCorner_1, PortalCorner_2, "FALSE", "HITBOX")){
                        if(IsTeleported.equals("0")){
                            IsOnGround = 0;
                            IsTeleported = 1;
                            PrtlNormalVect = g`PrtlNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlCenterPos = g`PrtlCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlLinkedNormalVect = g`PrtlLinkedNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlLinkedCenterPos = g`PrtlLinkedCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PrtlLinkedLowPos = g`PrtlLinkedLowPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            PortalUUID = g`PrtlLinkedUUID*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                            CheckTick = 1;
                            TPFromPlayer = 1;
                            select::reset();
                            code::call_function("PlPrtlTeleport");
                        }
                    }
                    else{
                        code::call_function(p"PlPrtlNoTeleport");
                    }
                }
            }
            else{
                code::call_function(p"PlPrtlNoTeleport");
            }
        }
    }
    select::reset();
}

function PlPrtlTeleport{
    code::call_function("WAIT");
    PrtlResetVelocity = "0.0";
    PrtlIsVertical = "0.0";
    PrtlVelocityAdder = 1;
    if(PrtlLinkedNormalVect.equals([vector(0, 0, 1), vector(0, 0, -1), vector(1, 0, 0), vector(-1, 0, 0)])){
        PrtlResetVelocity = "1.0";
        PrtlIsVertical = "1.0";
        PrtlVelocityAdder = 1.6;
        TeleportPos = PrtlLinkedLowPos.shift_location_in_direction("0.3");
    }
    if(PrtlLinkedNormalVect.equals(vector(0, 1, 0))){
        PrtlVelocityAdder = 1.2;
        TeleportPos = PrtlLinkedCenterPos.shift_location_in_direction("0.3");
    }
    if(PrtlLinkedNormalVect.equals(vector(0, -1, 0))){
        PrtlResetVelocity = "1";
        TeleportPos = PrtlLinkedCenterPos.shift_location_in_direction("1.8");
    }
    if(s`%player%_AltVelocitySetting`.equals(0)){
        MaxVelocity = PlayerVelocity;
        if(PrtlResetVelocity.equals("1")){
            MaxVelocity = "-1";
        }
        PlayerVelocity = variable::multiply([PlayerVelocity, PrtlVelocityAdder]);
    }
    ThrowVect = PrtlLinkedNormalVect;
    code::call_function("PrtlSmallVel");
    code::call_function(p"PlPrtlViewTeleprt");
    player::play_sound(sound("minecraft:entity.enderman.teleport", 1, 2, "MASTER"), PrtlCenterPos);
    player::play_sound(sound("minecraft:entity.enderman.teleport", 1, 2, "MASTER"), PrtlLinkedCenterPos);
    PrtlPartPos = PrtlCenterPos.set_location_direction(PrtlNormalVect);
    PrtlPartPos = PrtlPartPos.shift_location_in_direction("0.0625");
    PrtlLinkedPartPos = PrtlLinkedCenterPos.set_location_direction(PrtlLinkedNormalVect);
    PrtlLinkedPartPos = PrtlLinkedPartPos.shift_location_in_direction("0.0625");
    if(PrtlColorType.equals("BLUE")){
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=41727), PrtlPartPos);
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16751104), PrtlLinkedPartPos);
    }
    else{
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16751104), PrtlPartPos);
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=41727), PrtlLinkedPartPos);
    }
}

function PlPrtlReflectView{
    code::call_function("WAIT");
    if(PrtlNormalVect.equals([vector(0, 0, 1), vector(0, 0, -1), vector(1, 0, 0), vector(-1, 0, 0)])){
        PlLookVect = value::direction_of_view<default>;
        PlLookY = PlLookVect.get_vector_component("Y");
        PlLookVect = PlLookVect.set_vector_component("0", "Y");
        PlLookVect = PlLookVect.set_vector_length("1");
        PrtlSideVect = PrtlNormalVect.rotate_vector_around_axis("-90.0", "Y");
        PlDotProd = variable::vector_dot_product(PlLookVect, PrtlSideVect);
        if(PlDotProd.greater("0")){
            PlDotProd = "1";
        }
        else{
            if(PlDotProd.less("0")){
                PlDotProd = "-1";
            }
            else{
                PlDotProd = "0";
            }
        }
        PrtlNegativeNorm = variable::multiply_vector(PrtlNormalVect, "-1");
        PlLookAngle = variable::get_angle_between_vectors(PlLookVect, PrtlNegativeNorm);
        PlLookAngle = variable::multiply([PlLookAngle, PlDotProd]);
        PlTPVect = PrtlLinkedNormalVect.rotate_vector_around_axis(PlLookAngle, "Y");
        PlTPVect = PlTPVect.set_vector_component(PlLookY, "Y");
        PlTPVect = PlTPVect.set_vector_length("1");
        TeleportPos = TeleportPos.set_location_direction(PlTPVect);
    }
}

function PlPrtlNoTeleport{
    if(IsTeleported.equals(1)){
        IsTeleported = "0";
    }
}

function PlPrtlViewTeleprt{
    ThrowVect = ThrowVect.set_vector_length(PlayerVelocity);
    PlayerVelocity = "0.08";
    g`%player%_InTeleportation` = 1;
    if(PrtlIsVertical.equals("1.0")){
        if(PrtlNormalVect.not_equals([vector(0, 1, 0), vector(0, -1, 0)])){
            code::call_function("PlPrtlReflectView");
            player::teleport(TeleportPos, "FALSE", "FALSE");
        }
        else{
            player::teleport(TeleportPos, keep_velocity="FALSE");
        }
    }
    else{
        player::teleport(TeleportPos, keep_velocity="FALSE");
    }
    code::call_function(p"PlPrtlPreTrig");
    code::start_process(p"PlPrtlLaunch", "COPY");
    if(BlockPrtlLaunch.equals(1)){
        BlockPrtlLaunch = 0;
    }
}

function PlPrtlCrosshair{
    if(g`%player%_TitleTicks`.less_or_equals("0")){
        code::call_function(p"SelectedItem");
        if(SelectedItem.equals("none")){
            player::send_title("&r", "&#465028", "0", "10", "0");
        }
        if(SelectedItem.equals("portal_gun")){
            if(g`%player%_PrtlPlacedBlue`.equals("0")){
                if(g`%player%_PrtlPlacedOrange`.equals("0")){
                    Crosshair = "&#465028";
                }
            }
            if(g`%player%_PrtlPlacedBlue`.equals("1.0")){
                if(g`%player%_PrtlPlacedOrange`.equals("0")){
                    Crosshair = "&#465028";
                }
            }
            if(g`%player%_PrtlPlacedBlue`.equals("0")){
                if(g`%player%_PrtlPlacedOrange`.equals("1.0")){
                    Crosshair = "&#465028";
                }
            }
            if(g`%player%_PrtlPlacedBlue`.equals("1.0")){
                if(g`%player%_PrtlPlacedOrange`.equals("1.0")){
                    Crosshair = "&#465028";
                }
            }
            player::send_title("&r", Crosshair, "0", "10", "0");
        }
        if(SelectedItem.equals("gravity_gun")){
            Crosshair = "&#465028";
            if(g`%player%_CubePicked`.equals(1)){
                Crosshair = "&#465028";
            }
            if(g`%player%_GravityPickUUID`.not_equals(0)){
                Crosshair = "&#465028";
            }
            player::send_title("&r", Crosshair, "0", "10", "0");
        }
    }
}

function PlVarsTick{
    code::call_function(p"PlPrtlCrosshair");
    if(g`%player%_BloodTicks`.greater(0)){
        Border = variable::multiply([g`%player%_BloodTicks`, 100]);
        player::set_world_border(location(0, 0, 0, 0, 0), 1088, Border);
        g`%player%_BloodTicks` = variable::subtract([g`%player%_BloodTicks`, 1]);
    }
    if(g`%player%_TitleTicks`.greater("0")){
        g`%player%_TitleTicks` = variable::subtract([g`%player%_TitleTicks`, "1"]);
    }
    if(g`%player%_IsInSecret`.equals(1)){
        if(g`%player%_SecretSoundTicks`.less_or_equals(0)){
            g`%player%_SecretSoundTicks` = 401;
            player::play_sound_from_entity(value::uuid<default>, sound("minecraft:item.elytra.flying", 1, 0.5, "RECORD"));
        }
        if(g`%player%_SecretSoundTicks`.greater(0)){
            g`%player%_SecretSoundTicks` = variable::subtract([g`%player%_SecretSoundTicks`, 1]);
        }
    }
    code::call_function("PlTimerTicks");
    if(Tick_10.greater_or_equals(10)){
        Tick_10 = "0";
        if("1".equals([g`%player%_HasPortalGun`, g`%player%_HasGravityGun`])){
            code::call_function("PlWaterDmg");
        }
        if(g`%player%_PushTicks`.greater(0)){
            g`%player%_PushTicks` = variable::subtract([g`%player%_PushTicks`, 1]);
            if(g`%player%_PushTicks`.less_or_equals(0)){
                g`%player%_PushUUID` = 0;
            }
        }
        if(s`%player%_SettingDisableTips`.equals(0)){
            code::call_function("PlHelpBar");
            if(g`%player%_ClickedPlayerTime`.less_or_equals(0)){
                if(g`%player%_ShowMPlatSpeed`.less_or_equals(0)){
                    code::call_function("PlCursorCb");
                }
            }
        }
    }
    Tick_10 = variable::add([Tick_10, "1"]);
    code::call_function("PlVarsTick2");
}

event<player_chat>{
    if(player::chat_message_equals("@play")){
        world::cancel_event();
        if(g`%player%_FirstJoined`.equals(1)){
            g`%player%_SkipFristLoading` = 1;
        }
    }
    if(player::chat_message_equals("@online")){
        world::cancel_event();
        select::all_players();
        Text = "&#ffb657%space%";
        repeat::for_each_in_list(value_variable=Player, list=value::selection_target_names){
            Text = variable::set_text([Text, Player, " (%var(%var_local(Player)_Level))", "&#abc4d6, &#ffb657"], "CONCATENATION");
        }
        player::message(["&#abc4d6Игроки онлайн (", value::player_count, "&#abc4d6):"], "CONCATENATION");
        player::message(Text);
    }
    if(player::chat_message_equals("@discord")){
        world::cancel_event();
        code::call_function(p"MenuDISCORD");
    }
    if(player::chat_message_equals("@help")){
        world::cancel_event();
        code::call_function(p"PauseHELP");
    }
}

function MENU{
    g`%player%_InMenu` = "1";
    g`%player%_InPauseMenu` = 0;
    player::set_gamemode("ADVENTURE");
    player::set_allow_flying("TRUE");
    player::set_pvp("FALSE");
    player::set_death_drops("FALSE");
    player::set_inventory_kept();
    player::set_collidable("FALSE");
    player::set_nametag_visible("FALSE");
    player::set_instant_respawn();
    player::set_world_border(location(0, 0, 0, 0, 0), 1088, "0.0");
    player::set_attack_speed("100");
    player::set_movement_speed("0", "FLY");
    player::give_potion_effect([potion("minecraft:invisibility", 0, 2147483647), potion("minecraft:haste", 255, -1), potion("minecraft:mining_fatigue", 255, -1)], "FALSE", "FALSE", "NONE");
    player::hide_entity("%player%");
    player::play_animation_action("WAKE_UP");
    code::call_function("MENU_TP");
    player::set_flying();
    player::set_velocity(vector(0, 0, 0), "FALSE");
    if(s`%player%_SavedLevel`.equals("0")){
        player::set_equipment(g`ItemMenuNormal`, "OFF_HAND");
        player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemMenuButton_6`, g`ItemMenuButton_2`, g`ItemMenuButton_3`, g`ItemMenuButton_4`, g`ItemMenuButton_5`, g`ItemMenuButton_6`, g`ItemMenuButton_6`, g`ItemMenuButton_6`, g`ItemMenuButton_6`]);
        player::set_hotbar_slot(1);
    }
    else{
        player::set_equipment(g`ItemMenuFull`, "OFF_HAND");
        player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemMenuButton_1`, g`ItemMenuButton_2`, g`ItemMenuButton_3`, g`ItemMenuButton_4`, g`ItemMenuButton_5`, g`ItemMenuButton_6`, g`ItemMenuButton_6`, g`ItemMenuButton_6`, g`ItemMenuButton_6`]);
        player::set_hotbar_slot(0);
        MenuBarText = variable::set_text(["&8Текущий уровень:", s`%player%_SavedLevel`]);
        player::set_boss_bar("menu_bar", MenuBarText, 0);
    }
    player::stop_sound([]);
    code::call_function(p"MusicPlay");
    code::call_function(p"OptifineMsg");
    if(g`%player%_EnableMenuLOOP`.equals("0")){
        g`%player%_EnableMenuLOOP` = "1";
        code::start_process("MENU_LOOP");
    }
}

function MENU_TP{
    TEMP1 = variable::create_map_from_values([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [location(-4.5, 9, 18.5, -45, 20), location(22.5, 8.5, -8.5, -130, 20), location(32.5, 13, 9.5, 45, 20), location(17.5, 10, 46.5, -25, 20), location(6.5, 18, 102.5, -135, 20), location(51.5, 13, -6.5, -45, 20), location(58.5, 14, 53.5, 45, 20), location(107.5, 22, -10.5, -45, 20), location(103.5, 17, 59.5, -135, 20), location(97.5, 11, 73.5, 45, 20), location(37.5, 13, -28.5, 135, 20), location(-31.5, 12, 10.5, -135, 20), location(-43.5, 11, -42.5, -45, 20), location(-33.5, 14, -90.5, 45, 20), location(-25.5, 18, -100.5, 135, 20)]);
    TEMP2 = variable::create_map_from_values([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [location(-87.5, 16, 14.5, 135, 20), location(-113.5, 19, -59.5, -45, 20), location(-91.5, 13, -84.5, 135, 20), location(-95.5, 20, -132.5, 135, 20), location(-21.5, 9, 36.5, 45, 20), location(-39.5, 21, 80.5, -45, 20), location(-33.5, 42, 25.5, 55, 20), location(-44.5, 52, -28.5, -135, 20), location(-21.5, 49, -107.5, 135, 20), location(-71.5, 50, 12.5, 135, 20), location(-103.5, 50, -80.5, 135, 20), location(-38.5, 62, 59.5, 25, 20), location(8.5, 56, 109.5, 45, 20), location(46.5, 53, 121.5, 45, 20), location(60.5, 58, 151.5, -45, 20)]);
    TEMP3 = variable::create_map_from_values([30, 31, 32, 33, 34, 35], [location(20.5, 46, -50.5, -135, 20), location(76.5, 55, -65.5, -120, 20), location(19.5, 50, -150.5, -135, 20), location(-25.5, 54, -143.5, 140, 20), location(88.5, 60, -194.5, -135, 20), location(-98.5, 52, 55.5, 45, 20)]);
    LvlMenuTPList = TEMP1.append_map(TEMP2);
    LvlMenuTPList = LvlMenuTPList.append_map(TEMP3);
    g`%player%_MenuPos` = LvlMenuTPList.get_map_value(s`%player%_SavedLevel`, location(-4.5, 9, 18.5, -45, 20));
    player::teleport(g`%player%_MenuPos`, "FALSE");
}

process MENU_LOOP{
    Tick = "0";
    repeat::while(g`%player%_EnableMenuLOOP`.equals("1")){
        Message = "&8Используйте &f &8для прокрутки";
        if(Tick.greater_or_equals("100")){
            Message = "&8Используйте &f &8или &f &8для выбора";
        }
        player::send_action_bar(Message);
        if(Tick.greater_or_equals(199)){
            Tick = -1;
        }
        Tick = variable::add([Tick, "1"]);
        code::call_function(p"MusicTick");
        code::wait("1");
    }

}

event<player_change_slot>{
    if(g`%player%_AutoScroll`.equals("1")){
        g`%player%_AutoScroll` = 0;
        code::break();
    }
    if(g`%player%_InMenu`.equals("1")){
        if(g`%player%_InPauseMenu`.equals(0)){
            if(s`%player%_SavedLevel`.equals("0")){
                if(value::event_hotbar_slot.equals([0, 8])){
                    g`%player%_AutoScroll` = "1";
                    player::set_hotbar_slot(5);
                }
                if(value::event_hotbar_slot.equals([6, 7])){
                    g`%player%_AutoScroll` = "1";
                    player::set_hotbar_slot(1);
                }
            }
            else{
                if(value::event_hotbar_slot.equals(8)){
                    g`%player%_AutoScroll` = "1";
                    player::set_hotbar_slot(5);
                }
                if(value::event_hotbar_slot.equals([6, 7])){
                    g`%player%_AutoScroll` = "1";
                    player::set_hotbar_slot(0);
                }
            }
            player::play_sound_from_entity(value::name<default>, sound("minecraft:block.stone_button.click_on", 1000, 2, "MASTER"));
        }
        else{
            code::call_function("PauseScroll");
        }
    }
}

event<player_chat>{
    if(g`%player%_InMenu`.equals(0)){
        if(g`%player%_IntroStarted`.equals(0)){
            if(player::chat_message_equals(["@menu", "@m"])){
                world::cancel_event();
                if not (player::gamemode_equals("SPECTATOR")){
                    if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                        player::send_title("&r", "&r", 0, 2, 0);
                        code::call_function("PlToMenu");
                    }
                }
            }
            if(player::chat_message_equals(["@pause", "@p"])){
                world::cancel_event();
                if(g`%player%_IsAlive`.equals("1")){
                    if not (player::gamemode_equals("SPECTATOR")){
                        if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                            code::call_function(p"PlToPauseMenu");
                        }
                    }
                }
            }
        }
    }
}

function MechEntTP{
    Height = MechEntTP_Args.get_list_value("0");
    Corner_1 = MechEntTP_Args.get_list_value("1");
    Corner_1 = Corner_1.shift_coordinate("0");
    Corner_2 = MechEntTP_Args.get_list_value("2");
    Corner_2 = Corner_2.shift_coordinate("0");
    select::player_by_name(g`LvlPlayerList_%var(%var_local(ActivatorID)_Level)`);
    select::filter_by_conditional(value::location<victim_entity>.location_in_range(Corner_1, Corner_2, "FULL_BLOCK_RANGE"));
    if(value::selection_size.greater("0.0")){
        code::start_process("EntityMoveUP", "COPY", "FOR_EACH_IN_SELECTION");
    }
    select::entity_by_name(g`LvlCubeList_%var(%var_local(ActivatorID)_Level)`);
    select::filter_by_conditional(value::location<victim_entity>.location_in_range(Corner_1, Corner_2, "FULL_BLOCK_RANGE"));
    if(value::selection_size.greater("0.0")){
        code::start_process("EntityMoveUP", "COPY", "FOR_EACH_IN_SELECTION");
    }
}

function PlWaterDmg{
    PosBlockType = CurrentPos.get_block_material("ID_WITH_DATA");
    EyeBlockType = value::eye_location<default>.get_block_material("ID_WITH_DATA");
    if(PosBlockType.text_contains(["water[", "waterlogged=true"])){
        player::play_sound_from_entity(value::name<default>, [sound("minecraft:entity.bee.sting", 1, 1, "MASTER"), sound("minecraft:entity.player.hurt", 1, 1, "MASTER")]);
        player::damage(4);
    }
    else{
        if(EyeBlockType.text_contains(["water[", "waterlogged=true"])){
            player::play_sound_from_entity(value::name<default>, [sound("minecraft:entity.bee.sting", 1, 1, "MASTER"), sound("minecraft:entity.player.hurt", 1, 1, "MASTER")]);
            player::damage(4);
        }
    }
}

event<player_click_inventory>{
    world::cancel_event();
    if(g`%player%_InMenu`.equals(1)){
        if(value::open_inventory_title<default>.equals("Новая игра")){
            if(value::event_item.item_has_tag("menu_type", "ui_newgame")){
                player::stop_sound([]);
                player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                player::close_inventory();
                s`%player%_SavedLevel` = "0";
                s`%player%_MaxPlayedLevel` = 0;
                variable::purge(["%player%_FoundSecret", "%player%_Ending"], "SAVE", "STARTS_WITH");
                code::call_function("PlayerSetup");
                code::call_function("FirstLevelLoad");
            }
        }
        if(value::open_inventory_title<default>.equals("Настройки")){
            if(value::event_item.item_has_tag("setting_type", "leveltimer")){
                if(s`%player%_SettingEnableLvlTimer`.equals("0.0")){
                    s`%player%_SettingEnableLvlTimer` = "1";
                    player::set_inventory_menu_item(g`ItemSettingLevelTimerON`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
                else{
                    s`%player%_SettingEnableLvlTimer` = "0.0";
                    player::set_inventory_menu_item(g`ItemSettingLevelTimerOFF`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
            }
        }
        if(value::open_inventory_title<default>.equals("Забег на время")){
            if(value::event_item.item_has_tag("menu_type", "ui_newspeedrun")){
                code::call_function("StartNewSpdrun");
            }
        }
    }
}

function MenuButtons{
    if(g`%player%_IsHandSwing`.equals("1")){
        g`%player%_IsHandSwing` = 0;
        code::break();
    }
    g`%player%_ArmSwingEvent` = "1";
    if(g`%player%_InMenu`.equals(1)){
        world::cancel_event();
        if not (player::item_is_not_on_cooldown([value::main_hand_item<default>, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
            code::break();
        }
        ItemTag = value::main_hand_item<default>.get_item_custom_tag("menu_type", "null");
        if(ItemTag.equals("ui_button_1")){
            player::set_item_cooldown(10, value::main_hand_item<default>);
            code::call_function("MenuCONTINUE");
            code::break();
        }
        if(ItemTag.equals("ui_button_2")){
            player::set_item_cooldown(10, value::main_hand_item<default>);
            code::call_function("MenuNEWGAME");
            code::break();
        }
        if(ItemTag.equals("ui_button_3")){
            player::set_item_cooldown(10, value::main_hand_item<default>);
            code::call_function("MenuMORE");
            code::break();
        }
        if(ItemTag.equals("ui_button_4")){
            player::set_item_cooldown(10, value::main_hand_item<default>);
            code::call_function("MenuSETTINGS");
            code::break();
        }
        if(ItemTag.equals("ui_button_6")){
            player::set_item_cooldown(10, value::main_hand_item<default>);
            code::call_function("MenuEXIT");
            code::break();
        }
        code::call_function("MenuButtons2");
        code::call_function("PauseButtons");
    }
}

function PlHelpBar{
    if(g`%player%_Level`.not_equals(0)){
        if(g`%player%_InActSwitch`.equals(0)){
            HelpActType = 0;
            if(g`%player%_Level`.greater_or_equals(13)){
                HelpActType = 1;
            }
            if(g`%player%_Level`.greater_or_equals(28)){
                HelpActType = 2;
            }
            if(g`%player%_Level`.less(-10)){
                HelpActType = 1;
            }
            if(g`%player%_Level`.less(-20)){
                HelpActType = 2;
            }
            HelpTicks = variable::add([HelpTicks, 1]);
            if(HelpTicks.equals(21)){
                player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Чтобы поставить игру на паузу, нажмите <font:default><white>", 0);
            }
            if(HelpTicks.equals(27)){
                player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Чтобы удалить куб перед вами, нажмите <font:default><white> <#abc4d6>+ <white>", 0);
            }
            code::call_function(p"PlHelpBar2");
        }
        else{
            if(HelpTicks.greater(0)){
                HelpTicks = 0;
                player::set_boss_bar("empty_bar_1", "&r", 0);
            }
        }
    }
    else{
        if(HelpTicks.greater(0)){
            HelpTicks = 0;
            player::set_boss_bar("empty_bar_1", "&r", 0);
        }
    }
}

function PlayerSetup{
    code::call_function(p"Transition");
    g`%player%_InMenu` = 0;
    g`%player%_EnableMenuLOOP` = "0";
    player::clear_potion_effects();
    player::clear_inventory();
    player::set_flying("FALSE");
    player::send_action_bar("&r");
    player::remove_boss_bar("menu_bar");
    player::set_gamemode("ADVENTURE");
    player::set_allow_flying("FALSE");
    player::set_pvp("FALSE");
    player::set_death_drops("FALSE");
    player::set_inventory_kept();
    player::set_collidable("FALSE");
    player::set_nametag_visible("FALSE");
    player::set_instant_respawn();
    player::set_world_border(location(0, 0, 0, 0, 0), 1088, "0.0");
    player::set_attack_speed("100");
    player::give_potion_effect(potion("minecraft:haste", 255, -1), "FALSE", "FALSE", "NONE");
    player::hide_entity("%player%", "FALSE");
    player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`]);
    player::set_hotbar_slot("4");
    if(g`%player%_EnableLOOP`.equals("0.0")){
        g`%player%_EnableLOOP` = "1";
        code::start_process("PlLOOP");
    }
}

function MenuCONTINUE{
    player::stop_sound([]);
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    code::call_function("PlayerSetup");
    CurrentLevel = "0";
    NextLevel = s`%player%_SavedLevel`;
    DisableTransition = 1;
    code::call_function(p"SecretChance");
    code::call_function(p"LevelChangeEnd");
    if(0.equals(1)){
        code::call_function("Lvl_LOAD");
        g`%player%_Level` = NextLevel;
        DisplayLvl = g`%player%_Level`.absolute();
        player::set_experience(DisplayLvl, "LEVEL");
        code::call_function("LevelTP");
    }
}

function MenuNEWGAME{
    if(s`%player%_SavedLevel`.equals("0")){
        player::stop_sound([]);
        player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
        code::call_function("PlayerSetup");
        code::call_function("FirstLevelLoad");
    }
    else{
        player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
        player::show_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemNewGame`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], "Новая игра");
    }
}

function MenuSETTINGS{
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    player::show_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], "Настройки");
    if(s`%player%_SettingDisableIntro`.equals("0.0")){
        player::set_inventory_menu_item(g`ItemSettingIntroON`, 9);
    }
    else{
        player::set_inventory_menu_item(g`ItemSettingIntroOFF`, 9);
    }
    if(s`%player%_SettingDisableTips`.equals("0.0")){
        player::set_inventory_menu_item(g`ItemSettingTipsON`, 11);
    }
    else{
        player::set_inventory_menu_item(g`ItemSettingTipsOFF`, 11);
    }
    if(s`%player%_SettingLaserPartCount`.equals("0.0")){
        player::set_inventory_menu_item(g`ItemSettingLaserHIGH`, 13);
    }
    else{
        if(s`%player%_SettingLaserPartCount`.equals(1)){
            player::set_inventory_menu_item(g`ItemSettingLaserMEDIUM`, 13);
        }
        else{
            player::set_inventory_menu_item(g`ItemSettingLaserLOW`, 13);
        }
    }
    if(s`%player%_SettingEnableLvlTimer`.equals("0.0")){
        player::set_inventory_menu_item(g`ItemSettingLevelTimerOFF`, 15);
    }
    else{
        player::set_inventory_menu_item(g`ItemSettingLevelTimerON`, 15);
    }
    if(s`%player%_IsUsingOptifine`.equals(0)){
        player::set_inventory_menu_item(g`ItemSettingOptifineOFF`, 17);
    }
    else{
        player::set_inventory_menu_item(g`ItemSettingOptifineON`, 17);
    }
}

function MenuEXIT{
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    if not (player::name_equals("realDosed")){
        player::kick();
    }
    else{
        player::message("&#abc4d6 Владельца мира выгнать нельзя!");
    }
}

function PlToMenu{
    player::clear_potion_effects();
    player::clear_inventory();
    player::send_action_bar("&r");
    player::set_boss_bar("empty_bar_1", "&r", 0);
    player::set_boss_bar("timer_bar", "%empty%", 0);
    g`%player%_EnableLOOP` = "0";
    g`%player%_BloodTicks` = 0;
    player::set_world_border(location(0, 0, 0, 0, 0), 512, 0);
    g`%player%_PushUUID` = 0;
    if(g`%player%_IsSpeedrun`.equals(1)){
        g`%player%_IsSpeedrun` = 0;
        g`%player%_CurrentSpeedrunTime` = 0;
    }
    if(s`%player%_SettingEnableLvlTimer`.equals(1)){
        g`%player%_IsLvlTimerEnabled` = 0;
        g`%player%_CurrentLvlTime` = 0;
    }
    if(g`%player%_ShowScoreList`.equals(1)){
        g`%player%_ShowScoreList` = 0;
        player::display_hologram(g`HoloPos1`);
        player::display_hologram(g`HoloPos2`);
    }
    code::call_function(p"ResetVars");
    g`%player%_IsInSecret` = 0;
    CurrentLevel = g`%player%_Level`;
    NextLevel = 0;
    code::call_function("Lvl_UNLOAD");
    g`%player%_Level` = "0";
    player::set_experience(g`%player%_Level`, "LEVEL");
    code::call_function("MENU");
}

event<player_shot_bow>{
    world::cancel_event();
}

function PlCursorCb{
    if(g`%player%_CubePicked`.equals(0)){
        if(g`%player%_GravityPickUUID`.equals(0)){
            SelectedCbUUID = variable::ray_trace_result(start=value::eye_location<default>, ray_size=0.1, max_distance=5, entities=g`SandListForRays`, ray_collision_mode="ONLY_ENTITIES");
            if(SelectedCbUUID.not_equals(0)){
                StandUUID = g`%var_local(SelectedCbUUID)_StandUUID`;
                select::entity_by_name(StandUUID);
                if(value::name<current>.text_contains("*%player%*")){
                    if not (value::name<current>.text_contains("heavy")){
                        HelpActionBarTimer = 20;
                        player::send_action_bar(m"<white> <#abc4d6>- <font:smallcaps>Подобрать куб");
                    }
                    else{
                        HelpActionBarTimer = 20;
                        if(SelectedItem.not_equals("gravity_gun")){
                            player::send_action_bar(m"<white> <#abc4d6>- <font:smallcaps>Толкать куб");
                        }
                        else{
                            player::send_action_bar(m"<white> <#abc4d6>- <font:smallcaps>Толкать куб | <font:default><white> <#abc4d6>- <font:smallcaps>Подобрать куб");
                        }
                    }
                }
                else{
                    HelpActionBarTimer = 20;
                    SelCbNameList = value::name<current>.split_text("*");
                    SelCbPlayer = SelCbNameList.get_list_value("1");
                    player::send_action_bar([m"<font:smallcaps><#abc4d6>Куб игрока<#ffb657>", SelCbPlayer]);
                }
                select::reset();
            }
        }
        else{
            code::call_function("PlGravPickHelp");
        }
    }
    else{
        HelpActionBarTimer = 20;
        player::send_action_bar(m"<white> <#abc4d6>- <font:smallcaps>Кинуть куб | <font:default><white> <#abc4d6>- <font:smallcaps>Опустить куб");
    }
    code::call_function(p"PlCursorCb2");
}

process CbTPPushProc{
    CbPrtlToPos = value::location<default>;
    CbPrtlPushVect = variable::get_vector_between_locations(CbPrtlFromPos, CbPrtlToPos);
    CbPrtlPushVect = CbPrtlPushVect.set_vector_length(0.6);
    if(CbPrtlPushVect.equals(vector(0, 0.6, 0))){
        HorizAngle = variable::random_number(30, 60);
        VertiAngle = variable::random_number(0, 360);
        CbPrtlPushVect = CbPrtlPushVect.rotate_vector_around_axis(HorizAngle);
        CbPrtlPushVect = CbPrtlPushVect.rotate_vector_around_axis(VertiAngle, "Y");
    }
    entity::set_location(CbPrtlPushVect, "FALSE");
}

function `MoveDialogs.0`{
    if(g`%player%_Level`.equals(6)){
        Messages = ["audio|cubed.dialog.lvl_6", "text|Похоже, в этом секторе возникли перебои с освещением. Это временная|106", "text|неполадка, и она никак не повлияет на ваше тестирование. Наши инженеры уже|110", "text|работают над её устранением… вероятно. Продолжайте движение к выходу.|122"];
    }
    if(g`%player%_Level`.equals(7)){
        Messages = ["audio|cubed.dialog.lvl_7", "text|Несмотря на свою прочность, грузовые кубы не предназначены для контакта|98", "text|с жидкостями. При длительном воздействии влаги их материал теряет стабильность|110", "text|и начинает растворяться. Используйте их разумно — производство требует|86", "text|значительных ресурсов.|58"];
    }
    if(g`%player%_Level`.equals(10)){
        Messages = ["audio|cubed.dialog.lvl_10", "text|Для изменения траектории лазера используйте отражающие кубы. Эти кубы|112", "text|представляют собой усовершенствованную версию стандартных грузовых кубов,|86", "text|оснащённую специальными линзами. Разработка этих линз заняла у наших учёных|114", "text|немало времени. Первые версии теряли свои свойства слишком быстро, но|102", "text|современные модели работают значительно стабильнее. Чтобы перенаправить луч,|106", "text|просто разместите куб на его пути.|66"];
    }
    if(g`%player%_Level`.equals(15)){
        Messages = ["audio|cubed.dialog.lvl_15", "text|Отличные новости! Я нашла выход в новый комплекс. Лифт расположен в конце|108", "text|испытательной комнаты №20, в зоне для персонала. Достаточно просто пройти|112", "text|оставшиеся испытания, и ты сможешь покинуть этот сектор. Кстати, твои|102", "text|достижения не останутся незамеченными. Впереди тебя ждёт особый подарок.|118"];
    }
    if(g`%player%_Level`.equals(16)){
        Messages = ["audio|cubed.dialog.lvl_16", "text|Не стоит удивляться проблемам с освещением в этом месте. Этот комплекс был|104", "text|заброшен на долгие годы… после одного инцидента. Тогда наша компания оказалась|108", "text|на грани закрытия. Один несчастный случай привёл к множеству проблем. Но наш|116", "text|основатель смог всё исправить. Он всегда находил решения даже|90", "text|в самых сложных ситуациях.|48"];
    }
    if(g`%player%_Level`.equals(18)){
        Messages = ["audio|cubed.dialog.lvl_18_p2", "text|После инцидента комплекс был закрыт. Лишь спустя несколько лет открылся новый.|118", "text|На этот раз безопасность стала главным приоритетом. Однако, репутация компании|110", "text|была подорвана. Найти новых испытуемых оказалось сложнее, чем ожидалось.|122"];
    }
    if(g`%player%_Level`.equals(19)){
        Messages = ["audio|cubed.dialog.lvl_19_p2", "text|Со временем проблема с нехваткой испытуемых была решена. Понадобилось|104", "text|несколько рекламных кампаний, но в итоге удалось привлечь новых инвесторов…|94", "text|и компания снова начала процветать.|62"];
    }
    if(g`%player%_Level`.equals(20)){
        Messages = ["audio|cubed.dialog.lvl_20_p2", "text|Изначально моя основная задача заключалась в разработке головоломок для|98", "text|испытаний. Но после инцидента этим занялись учёные и инженеры. Мне это|112", "text|решение… никогда не нравилось. В их отсутствие я меняла некоторые планы|108", "text|испытательных комнат. Незначительно. Просто небольшие улучшения.|92", "text|Думаю, результат того стоил.|56"];
    }
    if(g`%player%_Level`.equals(21)){
        code::call_function(p"Lvl21Dialog1");
    }
    if(g`%player%_Level`.equals(22)){
        Messages = ["audio|cubed.dialog.lvl_22_p2", "text|Следующий элемент, с которым тебе предстоит работать, – платформа запуска.|112", "text|Как можно догадаться, при активации она запускает объект, находящийся на ней,|114", "text|в заранее заданную точку. Точность посадки – решающий фактор, но, к счастью,|114", "text|твоя специальная обувь полностью нейтрализует ударную нагрузку при падении.|102", "text|Это позволит тебе использовать платформу без каких-либо|68", "text|последствий для здоровья.|54"];
    }
    if(g`%player%_Level`.equals(23)){
        Messages = ["audio|cubed.dialog.lvl_23", "text|Перед тобой движущаяся платформа. Она способна транспортировать любые объекты|116", "text|с одной точки в другую. Кстати, платформа выдерживает очень большой вес…|108", "text|хотя, учитывая твои габариты, беспокоиться не о чем.|98"];
    }
    if(g`%player%_Level`.equals(25)){
        Messages = ["audio|cubed.dialog.lvl_25_p2", "text|Поздравляю с успешным завершением тестирования! Все твои результаты будут|110", "text|зафиксированы и переданы для дальнейшего анализа. А пока воспользуйся этой|104", "text|платформой – она доставит тебя в центр обработки данных, где тебя уже|88", "text|ожидает обещанная награда.|56"];
    }
    code::call_function("MoveDialogs.0-2");
    g`%player%_ShowDialog` = 0;
    code::start_process(p"DialogAudioAsync", "COPY");
}

function `MoveDialogs.1`{
    if(g`%player%_Level`.equals(10)){
        Messages = ["audio|cubed.dialog.lvl_10_p2", "text|Это… неожиданно. Выход заблокирован. Это не входило в стандартную процедуру|114", "text|тестирования. Вероятно, сбой в системе. Остаётся единственный|86", "text|вариант — воспользоваться техническим спуском. Однако у меня нет точных|98", "text|данных о том, куда именно он ведёт. Но в условиях ограниченного выбора|106", "text|это, вероятно, лучший вариант.|72"];
    }
    if(g`%player%_Level`.equals(20)){
        Messages = ["audio|cubed.dialog.lvl_20_p3", "text|Ты прекрасно справилась. Поездка на лифте может занять некоторое время…|108", "text|возможно, даже пару десятков минут. Увидимся позже!|100"];
    }
    if(g`%player%_Level`.equals(21)){
        Messages = ["audio|cubed.dialog.lvl_21_p2", "text|Добро пожаловать. Протокол испытаний остаётся неизменным. По завершении курса,|134", "text|в конце комнаты №25 тебя будет ждать особая награда за проявленную… инициативу.|154"];
    }
    if(g`%player%_Level`.equals(25)){
        Messages = ["audio|cubed.dialog.lvl_25_p3", "text|Это… неожиданно. Это не должно было произойти. Кто-то изменил маршрут. Или|140", "text|подставил тебя. Оставайся на месте и не двигайся. Я немедленно пришлю помощь.|152"];
    }
    g`%player%_ShowDialog` = 0;
    code::start_process(p"DialogAudioAsync", "COPY");
}

process LaserParticles{
    if(g`%player%_Level`.equals(ID)){
        PartDistance = "0.25";
        if(s`%player%_SettingLaserPartCount`.equals(1)){
            PartDistance = 0.5;
        }
        if(s`%player%_SettingLaserPartCount`.equals(2)){
            PartDistance = 1;
        }
        player::display_particle_line(l`LaserParticle_%var_local(RayCount)`, RayStartPos, RayEndPos, PartDistance, "DISTANCE");
    }
}

event<player_click_inventory>{
    world::cancel_event();
    if(g`%player%_InMenu`.equals(1)){
        if(value::open_inventory_title<default>.equals("Настройки")){
            if(value::event_item.item_has_tag("setting_type", "laser")){
                if(s`%player%_SettingLaserPartCount`.equals(0)){
                    s`%player%_SettingLaserPartCount` = 1;
                    player::set_inventory_menu_item(g`ItemSettingLaserMEDIUM`, value::event_slot);
                    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                }
                else{
                    if(s`%player%_SettingLaserPartCount`.equals(1)){
                        s`%player%_SettingLaserPartCount` = 2;
                        player::set_inventory_menu_item(g`ItemSettingLaserLOW`, value::event_slot);
                        player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                    }
                    else{
                        if(s`%player%_SettingLaserPartCount`.equals(2)){
                            s`%player%_SettingLaserPartCount` = 0;
                            player::set_inventory_menu_item(g`ItemSettingLaserHIGH`, value::event_slot);
                            player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                        }
                    }
                }
            }
        }
    }
}

function Transition{
    if(DisableTransition.equals(0)){
        player::set_item_cooldown(40, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
        player::set_item_cooldown(40, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
        player::set_attribute(0, "GENERIC_MOVEMENT_SPEED");
        player::set_attribute(0, "GENERIC_JUMP_STRENGTH");
        g`%player%_TitleTicks` = 40;
        player::send_title("&#78503c█", "", 10, 20, 10);
        code::wait(20);
        code::start_process(p"TransitionRes");
    }
}

function MenuMORE{
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    player::show_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemSpeedrunMode`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemLevelSelect`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemBonusLevels`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], "Дополнительно");
}

function DialogWait{
    l`%player%_LocalWaitTicks` = variable::max([WaitTicks, l`%player%_WaitTicks`]);
    repeat::multi_times(amount=l`%player%_LocalWaitTicks`){
        if(g`%player%_ShowDialog`.equals(0)){
            player::remove_boss_bar("dialog_bar");
            code::break();
        }
        code::wait(1);
    }
}

function PrtlSmallVel{
    if(PrtlLinkedNormalVect.equals(vector(0, 1, 0))){
        if(PlayerVelocity.less(0.36)){
            PlayerVelocity = 0.42;
            SmallVelThrowAngle = variable::random_number(0, 359);
            ThrowVect = ThrowVect.rotate_vector_around_axis(60);
            ThrowVect = ThrowVect.rotate_vector_around_axis(SmallVelThrowAngle, "Y");
        }
    }
}

event<player_right_click_player>{
    if(g`%player%_InMenu`.equals(0)){
        if(value::event_equipment_slot.equals("hand")){
            g`%player%_ClickedPlayerName` = m"<font:smallcaps><#abc4d6>%victim%";
            g`%player%_ClickedPlayerTime` = 60;
        }
    }
}

function PlToPauseMenu{
    player::clear_potion_effects();
    player::clear_inventory();
    player::send_title("&r", "&r", 0, 2, 0);
    player::send_action_bar("&r");
    player::set_boss_bar("empty_bar_1", "&r", 0);
    g`%player%_EnableLOOP` = "0";
    g`%player%_ShowDialog` = 0;
    g`%player%_BloodTicks` = 0;
    player::set_world_border(location(0, 0, 0, 0, 0), 512, 0);
    g`%player%_PushUUID` = 0;
    g`%player%_GravityPickUUID` = 0;
    player::set_experience(0, "LEVEL");
    code::call_function("IntroUnmount");
    code::call_function("PAUSE_MENU");
}

function PAUSE_MENU{
    g`%player%_InMenu` = "1";
    g`%player%_InPauseMenu` = 1;
    player::set_gamemode("ADVENTURE");
    player::set_allow_flying("TRUE");
    player::set_pvp("FALSE");
    player::set_death_drops("FALSE");
    player::set_inventory_kept();
    player::set_collidable("FALSE");
    player::set_nametag_visible("FALSE");
    player::set_instant_respawn();
    player::set_attack_speed("100");
    player::set_movement_speed("0", "FLY");
    player::give_potion_effect([potion("minecraft:haste", 255, -1), potion("minecraft:mining_fatigue", 255, -1)], "FALSE", "FALSE", "NONE");
    player::teleport(value::location<default>, "FALSE");
    player::set_flying("TRUE");
    player::set_equipment(g`ItemPauseMenu`, "OFF_HAND");
    player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemPauseButton1`, g`ItemPauseButton2`, g`ItemPauseButton3`, g`ItemPauseButton4`, g`ItemPauseButton4`, g`ItemPauseButton4`, g`ItemPauseButton4`, g`ItemPauseButton4`, g`ItemPauseButton4`]);
    player::set_hotbar_slot(0);
    if(s`%player%_SavedLevel`.greater("0")){
        MenuBarText = variable::set_text(["&8Текущий уровень:", s`%player%_SavedLevel`]);
        player::set_boss_bar("menu_bar", MenuBarText, 0);
    }
    player::stop_sound([]);
    if(g`%player%_EnableMenuLOOP`.equals("0")){
        g`%player%_EnableMenuLOOP` = "1";
        code::start_process("MENU_LOOP");
    }
}

function PlSetupPause{
    g`%player%_InMenu` = 0;
    g`%player%_InPauseMenu` = 0;
    g`%player%_EnableMenuLOOP` = "0";
    player::clear_potion_effects();
    player::clear_inventory();
    player::set_flying("FALSE");
    player::send_action_bar("&r");
    player::remove_boss_bar("menu_bar");
    player::set_gamemode("ADVENTURE");
    player::set_allow_flying("FALSE");
    player::set_pvp("FALSE");
    player::set_death_drops("FALSE");
    player::set_inventory_kept();
    player::set_collidable("FALSE");
    player::set_nametag_visible("FALSE");
    player::set_instant_respawn();
    player::set_world_border(location(0, 0, 0, 0, 0), 1088, "0.0");
    player::set_attack_speed("100");
    player::give_potion_effect(potion("minecraft:haste", 255, -1), "FALSE", "FALSE", "NONE");
    player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`]);
    player::set_hotbar_slot("4");
    if(g`%player%_EnableLOOP`.equals("0.0")){
        g`%player%_EnableLOOP` = "1";
        code::start_process("PlLOOP");
    }
}

function PauseButtons{
    if(ItemTag.equals("ui_pause_b1")){
        player::set_item_cooldown(10, value::main_hand_item<default>);
        code::call_function("PauseCONTINUE");
        code::break();
    }
    if(ItemTag.equals("ui_pause_b2")){
        player::set_item_cooldown(10, value::main_hand_item<default>);
        code::call_function("PauseRESTART");
        code::break();
    }
    if(ItemTag.equals("ui_pause_b3")){
        player::set_item_cooldown(10, value::main_hand_item<default>);
        code::call_function("PauseHELP");
        code::break();
    }
    if(ItemTag.equals("ui_pause_b4")){
        player::set_item_cooldown(10, value::main_hand_item<default>);
        code::call_function("PauseTOMENU");
        code::break();
    }
}

function PauseCONTINUE{
    player::stop_sound([]);
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    code::call_function("PlSetupPause");
    DisplayLvl = g`%player%_Level`.absolute();
    player::set_experience(DisplayLvl, "LEVEL");
    player::play_animation_action("WAKE_UP");
    code::call_function(p"PauseCONTINUE2");
    player::set_item_cooldown(999999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
    code::call_function(p"GiveGunItems");
}

function PauseHELP{
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    player::show_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "H4sIAAAAAAAA/72Uz0sbQRTHX4wxyRYLPYgeCh2wlx68iQdPac0/0EvpTTa7o1myOyOzs6S9xeQkioLnUul/sKYsCVXjv/DmP+qbmMRa6FZyCCzsLu/HfL7feTMOQBFe1F3tfuIqDqQAePW5AkuBDxtRILin3AO92xKyHXL/kO83pGwVoeTJRGgAKDjgeDI6koILHVfh5WNNKBV3KKVcgJVAu2HgQQGcRPhchZTk099yQ4Y+VKHEv2jl2uSliu1NpVBqNwPNK7CsKQhF9pHBLFbefP9hb7u+M41ubTG8wpE5Nl1MsY9D0zVnDIf403RMj+EdpgzvMTU9HJiexZCNgyT2XD3GWI21ClpcN5VMDpsw7Urq/iR/UvJUx18NpsL+0WhOC8qs1uThUY4N62TDN8zwzpxbuSO8JU9OcDin4Dk5HVZTPNau0jmom+Mdy0yHcAe0Z/emZ47xF6NXh8D7pOFisdhVVpPCluVQvyPqH+TskFhHRPswYfbTMjP73FKQRC3ccj+IPan8HPi3Fp6OyCneEG/6cCrqk7IJd7pYbhrpiIskB/o1QV+SuQPsWzzTnZg8HvLnwzqw9ngxeUmsZbQv3Ij/T8SMa+UrD0PZfuaCb/A7XtPJyzCjiabh7oyvpRuLTTOTEdFvAcwl/ngFAAA=", "AAAAAAAAAAA=", "H4sIAAAAAAAA/92VT2sTQRjG37RNm26pKCJ6HBRRFPEiHnqzFr+AIN7KZnfSLNnsyO6E6C1tlPonGBRPKoh6FrZqNSZN8hXe+UY+mzat7aEuuij0tDvsOzO/59ln3rGIJmluydb2HRlGngqITtwt0ITn0pmqF0gntEt6oRKoui/dFblcVKoySXlH1QJNRDmLLEdV76lABjqapWN7c3wVSgsl8zma9rTtew7lyKoFrgx9FLkYTRWV79Is5eV9HdpJ8UQhWRtTKV8ve1oWaErjIxUEv+HX/FbQbsHMuRuLN68tXR+XnL0iUNHhvmmaNdMS/Jm/mzZen/EPwV3T5I0EQBVLtcix9QhgPtKhV5G6HKraSpnGS0FXNszvfsN8EcwvdzBb4qrggVnjIQSs4tnZlvEfyOfE7bJX0uKyuHUI/GnAf+SvHHMvC9Z9U/aTH1hgLCW96AM6UwIKfo8QbZqGeQR5bf5mXnDvlzgtZGL2zI7Zhxv9gQewucvxUTT6JH/ifmI0f8EJeAyRjWy8/dMgbzMcGX8v8SsEuYMAN81z8wTa2ugwbcFDKE4S9RC2N3iL42xsT9H5zo88x+kaeb4+9n0VEU9QBkkHNK1/2/aO76YlJf4W8PumhbT8Lb5Fp/ZuTqcWaVVdDuyqTJ2H6QfS91U95YYXAD8EZ4w/0EtEIBybuH14wzzFsIvbJ4a6Dsh+Am8O3JchCAAA", "AAAAAAAAAAA=", "H4sIAAAAAAAA/8WSQUsCURDHR1dt3SjoEHRc6FrQQTx0q6SPEN1k3X3q4u57sfsW65Z2CfQeWNChLyCSYYb6FeZ9o2YXVIpID0GHd5iZ/8z7/d8bA0CDzZIlrQsWhK7gADuXOqRdB/Z8lzM7sKryuMFF02NOjZUrQjQ0yNoi4hIAUgYYtvCvBGdchnnYXvZ4ImAGSbQU5Fxpea4NKTAi7rDAI5FDUaYiPAfykGXXMrBicVqPZ1MrZJt1VzIdMpKKoJv4iD18MmEh2Ng/OT0rlIpzycGhiQ/Yx5m6Uy3VxpFqq66pWjjCCZ13E2c4VbdU6eNHjCIq1Si0LZmgbIUycBtM1gMR1eowH0oO/4b+eQV94Uf6GJiSE3zDIQ5U519daOb5LwaOyMALvsZYc/g+jmMnOMAJoQ+/oKvO+vAG7C7Xyo5CKfwyt3y2ytSCNXfDPE8017ywSD5mybsPyMsw2Z5v8F1KTpPPoO+6x3EcEOgn3Our6U0DAAA=", "AAAAAAAAAAA=", "H4sIAAAAAAAA/72UTU/bQBCGJ0BCMGqlHpCQuKzEBYQQF9QDt7Yc6alS4YYce0OsOF5kr5X2FhKpagUt6rUgEOIPhI8gkw/zF2b/EbOGECWHNoKoN6/3nd153pkdA2AcptdNaX7mfuAID+DNVhbGHBtmS47HLd/My7WiJ8out3f4dk6I4jikLRF6EgBSBhiWKO0Kj3symILXvRhX+NwgSSYFGUearmNBCozQs7nvksim1UROuDZMQZp/kb6pxWNZfTaFQrpccCTPwoSkTcgyPMI/eMzgSTA5/+79h9X1t13Jx2WGJ6qqqhhjC5vYUTVaHTBsqhpesBWGd9hQFWxgB+t4R191vMQo0aif9FNvXmGsvmNdVXSuIpcPA8uUSa6vAuk7RS4Lvgh3CtC9lSwYDd7pP/A2l7UmxmtK+HAQDptM7RHZBTYSUCKJiGSPzKgTWTx60L6QfuyBA7o+DO/YgElDJriIZxpXVdQ+3jLCqyYlvqFfv9QP8uP20a21kZRsjlHBqNPUb3I+on6LGbbVPpka/aWKc49VvEyK0F/F/9ty8+xTwclLtvQsjgXiOCN5Sx3o/tJv66VQBsz0hocVBlKUtj2zxIfulsxX7rqiPOSFG3j+NARayVCI6PHgVW8uUON808+ItjoPPdVOXlNEcTUiP9SjhuQxtin9e7vJ3Q5JBQAA", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], "Помощь");
}

function PauseTOMENU{
    player::stop_sound([]);
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    code::call_function(p"Transition");
    g`%player%_InPauseMenu` = 0;
    code::call_function("PlToMenu");
}

function PauseScroll{
    if(value::event_hotbar_slot.equals([7, 8])){
        g`%player%_AutoScroll` = "1";
        player::set_hotbar_slot(3);
    }
    if(value::event_hotbar_slot.equals([4, 5, 6])){
        g`%player%_AutoScroll` = "1";
        player::set_hotbar_slot(0);
    }
    player::play_sound_from_entity(value::name<default>, sound("minecraft:block.stone_button.click_on", 1000, 2, "MASTER"));
}

event<player_click_inventory>{
    world::cancel_event();
    if(g`%player%_InMenu`.equals(1)){
        if(value::open_inventory_title<default>.equals("Дополнительно")){
            ItemTag = value::event_item.get_item_custom_tag("menu_type", "null");
            if(ItemTag.equals("ui_bonuslevels")){
                player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                code::wait(1);
                player::show_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], "Бонусные уровни");
                code::call_function("MenuBonusLvls");
            }
            if(ItemTag.equals("ui_levelselect")){
                player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                code::wait(1);
                player::show_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], "Выбор уровня");
                player::expand_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], 2);
                code::call_function("MenuLevelSelect");
            }
            if(ItemTag.equals("ui_speedrun")){
                player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                code::wait(1);
                player::show_inventory_menu(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemNewSpeedrun`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="], "Забег на время");
            }
        }
    }
}

function MenuLevelSelect{
    g`ItemLvlSel_Active` = "H4sIAAAAAAAA/42PO04DMRCG/2WTaHEkJJDocwC4ADVniNJFlneILPmBvF7BloEiRXKF3AEKHgWCK9g3YtLkUSXVSPN/848+AZQY3ssoxxQa7R1wOalwpmtcWe1IBfkQ74y2NK07KtFXvnURQCEglLeP3pGLzTku9mgfSDBSFhjoKI1WKCBaV1MwDNWo0Iv0zC3Vpo9x9GZBdtjxW+LwEMcab9M6vaXP9JO+80v6uBnlBc/f9J6Xo/TF0V9+zXNecZxX2/f9WSByELjeWai2id5OnbR0usegI2P8E8v/Az8LawJZAQAA".set_item_custom_tag("lvlsel_type", "active");
    g`ItemLvlSel_NotActive` = "H4sIAAAAAAAA/43PQQrCMBQE0KnVUiMIil7GtWcQdxLSrwTSRNIU7VI9h7fQpfUK6Y1MNy2udP/+zHwGxJisueMbsoU0GphtUwxkhnkuNQnL9251sLzaZRXFGAlTagcgYmDC5EejSbtijGmvlbHEAokjJNJxJQUisFJnZFVAGVIMHZ1DStrmBY5h24Ded+L7EL8SF/7un/7h6+bSXJubf/uXr7uW2AbKsOynirJwJt9pntP/Y5OKlDKn8OEH6+y/pj4BAAA=".set_item_custom_tag("lvlsel_type", "notactive");
    repeat::on_range(Slot, 0, 36){
        code::call_function("WAIT");
        if(Slot.equals(0)){
            Item = g`ItemLvlSel_Active`.set_item_name("&eВступление");
            Item = Item.set_item_lore_line("&7Начальное интро", 0);
            Item = Item.set_item_custom_tag("lvlsel_num", "0");
        }
        if(Slot.equals(36)){
            if(s`%player%_MaxPlayedLevel`.greater(35)){
                Item = g`ItemLvlSel_Active`.set_item_name("&eТестовая комната");
                Item = Item.set_item_lore_line("&7Последний уровень", 0);
                Item = Item.set_item_custom_tag("lvlsel_num", "888");
            }
            else{
                Item = g`ItemLvlSel_NotActive`.set_item_name("&eТестовая комната");
                Item = Item.set_item_lore_line("&7Последний уровень", 0);
            }
        }
        if(Slot.in_range(1, 35)){
            code::call_function("MenuLvlSelItem");
        }
        player::set_inventory_menu_item(Item, Slot);
    }
    if(s`%player%_Ending1`.equals(1)){
        player::set_inventory_menu_item(g`ItemEnding1`, 37);
    }
    if(s`%player%_Ending2`.equals(1)){
        player::set_inventory_menu_item(g`ItemEnding2`, 38);
    }
}

function MenuLvlSelItem{
    if(Slot.in_range(1, 10)){
        ItemName = variable::set_text(["&e1 -", Slot]);
        ItemLore = variable::set_text(["&7Акт 1 | Уровень", Slot]);
    }
    if(Slot.in_range(11, 20)){
        ItemName = variable::set_text(["&e2 -", Slot]);
        ItemLore = variable::set_text(["&7Акт 2 | Уровень", Slot]);
    }
    if(Slot.in_range(21, 25)){
        ItemName = variable::set_text(["&e3.1 -", Slot]);
        ItemLore = variable::set_text(["&7Акт 3.1 | Уровень", Slot]);
    }
    if(Slot.in_range(26, 35)){
        ItemName = variable::set_text(["&e3.2 -", Slot]);
        ItemLore = variable::set_text(["&7Акт 3.2 | Уровень", Slot]);
    }
    if(Slot.equals([3, "6.0", 16, 19, 23, 28, 32])){
        ItemName = variable::set_text([ItemName, "&#7a8085�"]);
    }
    if(Slot.equals(34)){
        SecretSum = variable::add([s`%player%_FoundSecret1`, s`%player%_FoundSecret2`, s`%player%_FoundSecret3`, s`%player%_FoundSecret4`, s`%player%_FoundSecret5`, s`%player%_FoundSecret6`, s`%player%_FoundSecret7`]);
        if(SecretSum.greater_or_equals(7)){
            ItemName = ItemName.clear_color_codes();
            ItemName = variable::set_text(["&#d877f2", ItemName], "CONCATENATION");
        }
    }
    if(s`%player%_MaxPlayedLevel`.greater_or_equals(Slot)){
        Item = g`ItemLvlSel_Active`.set_item_name(ItemName);
        Item = Item.set_item_lore_line(ItemLore, 0);
        Item = Item.set_item_custom_tag("lvlsel_num", Slot);
    }
    else{
        Item = g`ItemLvlSel_NotActive`.set_item_name(ItemName);
        Item = Item.set_item_lore_line(ItemLore, 0);
    }
}

event<player_click_inventory>{
    world::cancel_event();
    if(g`%player%_InMenu`.equals(1)){
        if(value::open_inventory_title<default>.equals("Выбор уровня")){
            if(value::event_item.item_has_tag("lvlsel_type", "notactive")){
                player::play_sound_from_entity(value::name<default>, sound("minecraft:block.note_block.bass", 1, 1, "MASTER"));
            }
            if(value::event_item.item_has_tag("lvlsel_type", "active")){
                Level = value::event_item.get_item_custom_tag("lvlsel_num", "null");
                Level = variable::add([Level, 0]);
                player::close_inventory();
                player::stop_sound([]);
                player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                code::call_function("PlayerSetup");
                if(Level.equals(0)){
                    code::call_function("FirstLevelLoad");
                }
                else{
                    CurrentLevel = "0";
                    NextLevel = Level;
                    DisableTransition = 1;
                    code::call_function(p"SecretChance");
                    code::call_function("LevelChangeEnd");
                }
            }
            if(value::event_item.item_has_tag("ending_button", "end1")){
                ForceEnd1 = 1;
                code::call_function("MenuEnding");
            }
            if(value::event_item.item_has_tag("ending_button", "end2")){
                code::call_function("MenuEnding");
            }
        }
    }
}

function SaveLvlTime{
    player::set_boss_bar("timer_bar", "&r", 0);
    CurrentLevelAbs = CurrentLevel.absolute();
    if(s`%player%_SettingEnableLvlTimer`.equals(1)){
        if(CurrentLevelAbs.not_equals(0)){
            g`%player%_IsLvlTimerEnabled` = 0;
            LvlTime = g`%player%_CurrentLvlTime`;
            LvlTimeMillis = variable::multiply([LvlTime, 50]);
            LvlTimeFormat = LvlTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
            if(s`%player%*%var_local(CurrentLevelAbs)*Record_LvlTime`.equals(0)){
                s`%player%*%var_local(CurrentLevelAbs)*Record_LvlTime` = 1000000000;
            }
            if(LvlTime.less(s`%player%*%var_local(CurrentLevelAbs)*Record_LvlTime`)){
                s`%player%*%var_local(CurrentLevelAbs)*Record_LvlTime` = LvlTime;
                player::message("&#ffb657 Вы установили новый рекорд!");
                if(s`%var_local(CurrentLevelAbs)_LvlScore`.equals(0)){
                    s`%var_local(CurrentLevelAbs)_LvlScore` = variable::create_map();
                }
                s`%var_local(CurrentLevelAbs)_LvlScore` = s`%var_local(CurrentLevelAbs)_LvlScore`.set_map_value("%player%", LvlTime);
            }
            else{
                RecordTimeMillis = variable::multiply([s`%player%*%var_local(CurrentLevelAbs)*Record_LvlTime`, 50]);
                RecordTimeFormat = RecordTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
                player::message(["&#7a8085 Ваш текущий рекорд уровня:", RecordTimeFormat]);
            }
            player::message(["&#abc4d6 Вы прошли уровень &#ffb657%var_local(CurrentLevelAbs) &#abc4d6за&#ffb657", LvlTimeFormat]);
        }
    }
    code::call_function(p"SaveSpdrunTime");
}

function SaveSpdrunTime{
    if(NextLevel.equals(888)){
        code::call_function("CalcAllTime");
        if(g`%player%_IsSpeedrun`.equals(1)){
            g`%player%_IsSpeedrun` = 0;
            SpeedrunTime = g`%player%_CurrentSpeedrunTime`;
            SpeedrunTimeMillis = variable::multiply([SpeedrunTime, 50]);
            SpeedrunTimeFormat = SpeedrunTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
            g`%player%_CurrentSpeedrunTime` = 0;
            if(s`%player%*Record_SpeedrunTime`.equals(0)){
                s`%player%*Record_SpeedrunTime` = 1000000000;
            }
            if(SpeedrunTime.less(s`%player%*Record_SpeedrunTime`)){
                if(SpeedrunTime.less(s`%player%*Record_AllLvlsTime`)){
                    s`%player%*Record_SpeedrunTime` = SpeedrunTime;
                    player::message("&#d877f2 Вы установили новый рекорд!");
                    if(s`SpeedrunScore`.equals(0)){
                        s`SpeedrunScore` = variable::create_map();
                    }
                    s`SpeedrunScore` = s`SpeedrunScore`.set_map_value("%player%", SpeedrunTime);
                }
                else{
                    RecordSpeedrunTimeMillis = variable::multiply([s`%player%*Record_AllLvlsTime`, 50]);
                    RecordSpeedrunTimeFormat = RecordSpeedrunTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
                    player::message(["&#7a8085 Ваш текущий рекорд по сумме всех уровней:", RecordSpeedrunTimeFormat]);
                }
            }
            else{
                RecordSpeedrunTimeMillis = variable::multiply([s`%player%*Record_SpeedrunTime`, 50]);
                RecordSpeedrunTimeFormat = RecordSpeedrunTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
                player::message(["&#7a8085 Ваш текущий рекорд:", RecordSpeedrunTimeFormat]);
            }
            player::message(["&#abc4d6 Вы прошли игру за&#ffb657", SpeedrunTimeFormat]);
        }
    }
}

function StartLvlTime{
    NeedTimerBar = 0;
    TimerBarTxt = "%empty%";
    if(g`%player%_IsSpeedrun`.equals(1)){
        if(g`%player%_Level`.not_equals(888)){
            NeedTimerBar = 1;
            TimerBarTxt = variable::set_text([TimerBarTxt, g`%player%_SpeedrunTimeBarTxt`], "CONCATENATION");
        }
    }
    if(s`%player%_SettingEnableLvlTimer`.equals(1)){
        if(g`%player%_Level`.not_equals(888)){
            NeedTimerBar = 1;
            g`%player%_CurrentLvlTime` = 0;
            g`%player%_IsLvlTimerEnabled` = 1;
            if(TimerBarTxt.equals("%empty%")){
                TimerBarTxt = variable::set_text([TimerBarTxt, "&#ffb657⌛ 00:00:00.000"], "CONCATENATION");
            }
            else{
                TimerBarTxt = variable::set_text([TimerBarTxt, "&#ffb657 | &#ffb657", "&#ffb657⌛ 00:00:00.000"], "CONCATENATION");
            }
        }
    }
    if(NeedTimerBar.equals(1)){
        player::set_boss_bar("timer_bar", TimerBarTxt, 0);
    }
    if(g`%player%_Level`.equals(888)){
        g`%player%_ShowScoreList` = 1;
        g`%player%_DisplayScoreLevel` = 1;
        DisplayLvlScoreName = "1_LvlScore";
        code::start_process("DisplayLvlScore", "COPY");
        code::start_process("DisplaySpdrScore");
    }
}

process DisplayLvlScore{
    if(s`%var_local(DisplayLvlScoreName)`.equals(0)){
        s`%var_local(DisplayLvlScoreName)` = variable::create_map();
    }
    LvlScoreList = s`%var_local(DisplayLvlScoreName)`.sort_map("ASCENDING", "VALUES");
    LvlScoreListSize = LvlScoreList.get_map_size();
    ListPlayer = LvlScoreList.get_map_keys();
    ListTime = LvlScoreList.get_map_values();
    ScoreHoloTxt = variable::set_text(["&#ffb657Таблица лидеров", g`%player%_DisplayScoreLevel`, "&#ffb657уровня"]);
    ScoreHoloTxtList = ScoreHoloTxt;
    repeat::on_range(I, 0, 9){
        if(I.less(LvlScoreListSize)){
            Player = ListPlayer.get_list_value(I);
            Time = ListTime.get_list_value(I);
            TimeMillis = variable::multiply([Time, 50]);
            TimeFormat = TimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
            Place = variable::add([I, 1]);
            ScoreHoloTxt = variable::set_text(["&#abc4d6", Place, "&#abc4d6. &#abc4d6", Player, "&#abc4d6 - &#abc4d6", TimeFormat], "CONCATENATION");
            ScoreHoloTxtList.append_value(ScoreHoloTxt);
        }
        else{
            ScoreHoloTxt = variable::set_text("&#7a8085-", "CONCATENATION");
            ScoreHoloTxtList.append_value(ScoreHoloTxt);
        }
    }
    ScoreHoloTxt = variable::set_text("&#ffb657Ваш результат", "CONCATENATION");
    ScoreHoloTxtList.append_value(ScoreHoloTxt);
    if(ListPlayer.list_contains_value("%player%")){
        PlayerPlace = ListPlayer.get_list_index_of_value("%player%");
        PlayerTime = ListTime.get_list_value(PlayerPlace);
        PlayerTimeMillis = variable::multiply([PlayerTime, 50]);
        PlayerTimeFormat = PlayerTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
        PlayerPlace = variable::add([PlayerPlace, 1]);
        ScoreHoloTxt = variable::set_text(["&#abc4d6", PlayerPlace, "&#abc4d6. &#abc4d6", "%player%", "&#abc4d6 - &#abc4d6", PlayerTimeFormat], "CONCATENATION");
        ScoreHoloTxtList.append_value(ScoreHoloTxt);
    }
    else{
        ScoreHoloTxt = variable::set_text("&#7a8085-", "CONCATENATION");
        ScoreHoloTxtList.append_value(ScoreHoloTxt);
    }
    code::call_function("DisplayLvlScore2");
}

process DisplaySpdrScore{
    if(s`SpeedrunScore`.equals(0)){
        s`SpeedrunScore` = variable::create_map();
    }
    SpeedrunScoreList = s`SpeedrunScore`.sort_map("ASCENDING", "VALUES");
    SpeedrunScoreListSize = SpeedrunScoreList.get_map_size();
    ListPlayer = SpeedrunScoreList.get_map_keys();
    ListTime = SpeedrunScoreList.get_map_values();
    ScoreHoloTxt = variable::set_text("&#ffb657Таблица лидеров");
    ScoreHoloTxtList = ScoreHoloTxt;
    repeat::on_range(I, 0, 9){
        if(I.less(SpeedrunScoreListSize)){
            Player = ListPlayer.get_list_value(I);
            Time = ListTime.get_list_value(I);
            TimeMillis = variable::multiply([Time, 50]);
            TimeFormat = TimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
            Place = variable::add([I, 1]);
            ScoreHoloTxt = variable::set_text(["&#abc4d6", Place, "&#abc4d6. &#abc4d6", Player, "&#abc4d6 - &#abc4d6", TimeFormat], "CONCATENATION");
            ScoreHoloTxtList.append_value(ScoreHoloTxt);
        }
        else{
            ScoreHoloTxt = variable::set_text("&#7a8085-", "CONCATENATION");
            ScoreHoloTxtList.append_value(ScoreHoloTxt);
        }
    }
    ScoreHoloTxt = variable::set_text("&#ffb657Ваш результат", "CONCATENATION");
    ScoreHoloTxtList.append_value(ScoreHoloTxt);
    if(ListPlayer.list_contains_value("%player%")){
        PlayerPlace = ListPlayer.get_list_index_of_value("%player%");
        PlayerTime = ListTime.get_list_value(PlayerPlace);
        PlayerTimeMillis = variable::multiply([PlayerTime, 50]);
        PlayerTimeFormat = PlayerTimeMillis.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
        PlayerPlace = variable::add([PlayerPlace, 1]);
        ScoreHoloTxt = variable::set_text(["&#abc4d6", PlayerPlace, "&#abc4d6. &#abc4d6", "%player%", "&#abc4d6 - &#abc4d6", PlayerTimeFormat], "CONCATENATION");
        ScoreHoloTxtList.append_value(ScoreHoloTxt);
    }
    else{
        ScoreHoloTxt = variable::set_text("&#7a8085-", "CONCATENATION");
        ScoreHoloTxtList.append_value(ScoreHoloTxt);
    }
    code::call_function("DisplaySpdScore2");
}

function StartNewSpdrun{
    player::stop_sound([]);
    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
    player::close_inventory();
    s`%player%_SavedLevel` = "0";
    s`%player%_MaxPlayedLevel` = 0;
    g`%player%_CurrentSpeedrunTime` = 0;
    g`%player%_SpeedrunTimeBarTxt` = "&#ffb657⌚ 00:00:00.000";
    g`%player%_IsSpeedrun` = 1;
    code::call_function("PlayerSetup");
    code::call_function("FirstLevelLoad");
}

event<player_chat>{
    if(player::has_privilege("WHITELISTED")){
        if(value::event_chat_message.text_starts_with("@clearscore%space%")){
            world::cancel_event();
            CMD = value::event_chat_message.split_text();
            Type = CMD.get_list_value(1);
            if(Type.equals("lvl")){
                Lvl = CMD.get_list_value(2);
                Lvl = variable::add([Lvl, 0]);
                Player = CMD.get_list_value(3);
                if(Player.not_equals("all")){
                    s`%var_local(Player)*%var_local(Lvl)*Record_LvlTime` = 1000000000;
                    if(s`%var_local(Lvl)_LvlScore`.map_has_key(Player)){
                        s`%var_local(Lvl)_LvlScore` = s`%var_local(Lvl)_LvlScore`.remove_map_entry(key=Player, values=[]);
                    }
                    player::message(["&#abc4d6 Удалён рекорд уровня&#ffb657", Lvl, "&#abc4d6для игрока&#ffb657", Player]);
                }
                else{
                    repeat::for_each_map_entry(Player, map=s`%var_local(Lvl)_LvlScore`){
                        s`%var_local(Player)*%var_local(Lvl)*Record_LvlTime` = 1000000000;
                        s`%var_local(Lvl)_LvlScore` = s`%var_local(Lvl)_LvlScore`.remove_map_entry(key=Player, values=[]);
                    }
                    player::message(["&#abc4d6 Удалён рекорд уровня&#ffb657", Lvl, "&#abc4d6для всех игроков"]);
                }
            }
            if(Type.equals("speedrun")){
                variable::purge("*Record_SpeedrunTime", "SAVE", "ENDS_WITH");
                s`SpeedrunScore` = variable::create_map();
            }
        }
    }
}

event<player_interact>{
    if(g`%player%_InMenu`.equals(0)){
        if(g`%player%_ShowScoreList`.equals(1)){
            if(value::event_interaction.equals("right_click_block")){
                if(value::event_block_location.in_range(location(-3.5, 4.5, 4.5, 0, 0), location(-3.5, 4.5, 4.5, 0, 0))){
                    world::cancel_event();
                    if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDNzcxLTS5KTCuxSs/PSYnPK01PTy1hZmBNzi/NK2FgYGBkAAB0FMt4PgAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                        if not (player::is_sneaking()){
                            player::set_item_cooldown(10, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDNzcxLTS5KTCuxSs/PSYnPK01PTy1hZmBNzi/NK2FgYGBkAAB0FMt4PgAAAA==");
                            player::play_sound_from_entity(value::name<default>, sound("minecraft:ui.loom.select_pattern", 1, 2, "MASTER"));
                            g`%player%_DisplayScoreLevel` = variable::add([g`%player%_DisplayScoreLevel`, 1]);
                            g`%player%_DisplayScoreLevel` = g`%player%_DisplayScoreLevel`.warp(1, 36);
                            DisplayLvlScoreName = "%var(%player%_DisplayScoreLevel)_LvlScore";
                            code::start_process("DisplayLvlScore", "COPY");
                        }
                        else{
                            player::set_item_cooldown(10, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDNzcxLTS5KTCuxSs/PSYnPK01PTy1hZmBNzi/NK2FgYGBkAAB0FMt4PgAAAA==");
                            player::play_sound_from_entity(value::name<default>, sound("minecraft:ui.loom.select_pattern", 1, 2, "MASTER"));
                            g`%player%_DisplayScoreLevel` = variable::subtract([g`%player%_DisplayScoreLevel`, 1]);
                            g`%player%_DisplayScoreLevel` = g`%player%_DisplayScoreLevel`.warp(1, 36);
                            DisplayLvlScoreName = "%var(%player%_DisplayScoreLevel)_LvlScore";
                            code::start_process("DisplayLvlScore", "COPY");
                        }
                    }
                }
            }
        }
    }
}

function LPADSetLaunch{
    startLocation = value::location<default>;
    l`startLocation.X`, l`startLocation.Y`, l`startLocation.Z` = startLocation.get_all_coordinates();
    startLocationVect = variable::set_vector(l`startLocation.X`, l`startLocation.Y`, l`startLocation.Z`);
    l`targetLocation.X`, l`targetLocation.Y`, l`targetLocation.Z` = targetLocation.get_all_coordinates();
    selectedTarget = variable::set_vector(l`targetLocation.X`, l`targetLocation.Y`, l`targetLocation.Z`);
    startLocationY0 = startLocation.set_coordinate(0, "Y");
    targetLocationY0 = targetLocation.set_coordinate(0, "Y");
    distance = variable::locations_distance(startLocationY0, targetLocationY0);
    height = variable::divide([distance, 2]);
    if((l`startLocation.Y`).less(l`targetLocation.Y`)){
        heightDiff = variable::subtract([l`targetLocation.Y`, l`startLocation.Y`]);
        height = variable::add([height, heightDiff]);
    }
    OFFSET = 0.25;
    acceleration = 0.08;
    drag = 0.02;
    inertia = 0.89;
    startHeight = OFFSET;
    startVelocity = 0;
    startTicks = 0;
    repeat::while(startHeight.less(height)){
        startTicks = variable::add([startTicks, 1]);
        startVelocity = "%math(%var_local(startVelocity) / (1 - %var_local(drag)) + %var_local(acceleration))";
        startHeight = variable::add([startHeight, startVelocity]);
    }

    code::call_function("LPADSetLaunch2");
}

function LPADSetLaunch2{
    endHeight = variable::add([l`targetLocation.Y`, startHeight]);
    endVelocity = 0;
    endTicks = 0;
    repeat::while(endHeight.greater(targetLocationHeight)){
        endTicks = variable::add([endTicks, 1]);
        endVelocity = "%math((%var_local(endVelocity) + %var_local(acceleration)) * (1 - %var_local(drag)))";
        endHeight = variable::subtract([endHeight, endVelocity]);
    }

    flatEntityLocation = startLocationVect.set_vector_component(0, "Y");
    flatTargetLocation = selectedTarget.set_vector_component(0, "Y");
    flatVelocityPow = inertia.pow("%math(%var_local(startTicks) + %var_local(endTicks) - 1)");
    flatVelocity = "%math(((%var_local(inertia) - 1) * %var_local(distance)) / (%var_local(flatVelocityPow) - 1))";
    flatVelocityVector = variable::subtract_vectors([flatTargetLocation, flatEntityLocation]);
    flatVelocityVector = flatVelocityVector.set_vector_length(1);
    flatVelocityVector = variable::multiply_vector(flatVelocityVector, flatVelocity);
    flingVelocity = flatVelocityVector.set_vector_component(startVelocity, "Y");
    shiftPos = startLocation.shift_coordinate(OFFSET, "Y");
}

process LPADLaunchPl{
    player::teleport(shiftPos, keep_velocity="FALSE");
    player::set_movement_speed(0, "FLY");
    player::set_flying();
    ping = value::ping<default>;
    code::wait("%math(ceil(%var_local(ping)/50)+2)");
    player::set_flying("FALSE");
    player::set_velocity(flingVelocity, "FALSE");
}

process LPADLaunchEnt{
    StandUUID = value::uuid<default>;
    if(g`%var_local(StandUUID)_IsPicked`.equals(1)){
        NameSand = value::name<default>.split_text("*");
        Player = NameSand.get_list_value("1");
        g`%var_local(Player)_CubePicked` = "0.0";
        g`%var_local(Player)_PickedUUID` = "none";
        g`%var_local(StandUUID)_IsPicked` = "0.0";
    }
    entity::teleport(shiftPos);
    entity::set_location(vector(0, 0, 0), "FALSE");
    code::wait(3);
    entity::set_location(flingVelocity, "FALSE");
}

function CreateLPAD{
    Name = "lpad*%var_local(ID)*%var_local(LocalID)*%random_uuid%";
    FacingVect = SpawnPos.get_location_direction();
    Facing = FacingVect.vector_to_direction_name();
    LocalDir = variable::multiply_vector(FacingVect, -1);
    SpawnPos = SpawnPos.set_coordinate(0, "YAW");
    SpawnPos = SpawnPos.set_coordinate(-90, "PITCH");
    TEMP = SpawnPos.get_block_material();
    if(Facing.equals("south")){
        world::spawn_mob("H4sIAAAAAAAA/32OvU7DQBCE5wi2yFEhASl4ExoaFCl1JER32pzX1kr3Y/nWQFLl0bmQwh3b7ex8O2OBFe7fSemDpyI5AQ+fd7iRDpsoif1Evb4eSF0Z6Ts5HoYVGp/npACMhfU5jjlx0mLxtCBVED26rn42aPcSqmAMmq38cGeuCY+LXZSj6yeKbHG7q8vV8bw4Ao1SXKDTHOSfCi8L4eeiObqYOw5/RdZo+5BJS3MB3864jMF6l76kyCFwLdhuyUsaTL38AqBcB3ccAQAA", SpawnPos, custom_name=Name, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Facing.equals("west")){
        world::spawn_mob("H4sIAAAAAAAA/32QO0/DQBCE5xIckYMGiUfBP0mTBkVKCxKiO23Oa2ule1i+Na+Kn86ZFO7YbkczO5/WAmtcPZHSK49FcgJu3i6xkhYPURL7kTrdnUhdGegjOe77NRqfp6QAjIX1OQ45cdJicbdEqiD65dp62WDzIqEKxqA5yCe35txwu9hFObpupMgWF8e6nB33iyPQIMUF+p6C/IPwuCT8VDRHF3PL4Q9ki00XMmlp5uD+B/MYbI/pXYqcAlfA67n8OStpfcaqoh/IS+pNdf4CyhOvdiwBAAA=", SpawnPos, custom_name=Name, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Facing.equals("north")){
        world::spawn_mob("H4sIAAAAAAAA/32QO0/DQBCE50gckYMGiUfBP0mTBkVKCxKiO23Oa2ule1i+Na+Kn86ZFO7YbkczO5/WAitcPZHSK49FcgJu3i5xIS0eoiT2I3W6O5G6MtBHctz3KzQ+T0kBGAvrcxxy4qTF4m6JVEH0y7X1ssHmRUIVjEFzkE9uzbnhdrGLcnTdSJEt1se6nB33iyPQIMUF+p6C/IPwuCT8VDRHF3PL4Q9ki00XMmlp5uD+B/MYbI/pXYqcAlfA67n8OStpfca6oh/IS+pNdf4CfFhtjiwBAAA=", SpawnPos, custom_name=Name, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    if(Facing.equals("east")){
        world::spawn_mob("H4sIAAAAAAAA/32QO0/EQAyEZzkScQsNEhwF/4SGBp10LUiIbuXbOJGlfURZh1fFT2fDFelw59GM55MtsMHlEym98lQkJ+D67QJn0uEuSmI/Ua8PR1JXRvpIjodhg8bnOSkAY2F9jmNOnLRY3K6RKoh+ua5eNmhfJFTBGDR7+eTOnBpuVrsoR9dPFNni/FCXk2O3OgKNUlyg7znIPwj3a8LPRXN0MXcc/kC2aPuQSUuzBB9/sIzB9pDepcgxcAW8Wsqfs5LWZ7QVfU9e0mCq8xfRnANvLAEAAA==", SpawnPos, custom_name=Name, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    select::last_entity();
    entity::set_custom_name(Name);
    entity::set_custom_name_visibility("FALSE");
    g`%var_local(ID)*%var_local(LocalID)_LPADLevel` = ID;
    g`%var_local(ID)*%var_local(LocalID)_LPADFacingVect` = FacingVect;
    g`%var_local(ID)*%var_local(LocalID)_LPADTargetPosList` = TargetPosList;
    g`%var_local(ID)*%var_local(LocalID)_LPADPrtlReLaunch` = 0;
    if(PrtlReLaunch.not_equals("0")){
        g`%var_local(ID)*%var_local(LocalID)_LPADPrtlReLaunch` = PrtlReLaunch;
    }
}

process ActivateLPAD{
    if(g`%var_local(CurrentID)_LPADActivated`.equals(0)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("lpad*%var_local(CurrentID)*"));
        if(value::selection_size.less_or_equals(0)){
            code::break();
        }
        Pos = value::location<current>;
        TargetPosList = g`%var_local(CurrentID)_LPADTargetPosList`.split_text(";");
        TargetX = TargetPosList.get_list_value(0);
        TargetY = TargetPosList.get_list_value(1);
        TargetZ = TargetPosList.get_list_value(2);
        targetLocation = variable::set_all_coordinates(TargetX, TargetY, TargetZ, 0, 0);
        FacingVect = g`%var_local(CurrentID)_LPADFacingVect`;
        g`%var_local(CurrentID)_LPADActivated` = 1;
        entity::set_item_in_frame("H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YWLgDIgtspJUspTYVe0snB7ahbd/LwADzk9yepXFWAW4vI/Yc8a1sZS00OT3SjNbrPTplQeMSbs4gF1ASNpmlSJuAbe/SN1cW2yaS435tz/hMFUlt3GFD2x9AZG6NgZ+AAAA");
        player::play_sound(sound("minecraft:entity.iron_golem.death", 1, 2, "MASTER"), Pos);
        code::start_process("SelectLPAD", "COPY", "NO_TARGET");
        code::wait(2, "SECONDS");
        entity::set_item_in_frame("H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YWHpGRBbZCWpZMmJq9pZmDg6dOLt3wvAgPNETs+yGmsDLq8j9pxxrdxKWmn2u9DCFoXeXXjAmLQ3B7ALCEnroq00t4DbX6RurjVWzUVi/u1POMyi5DZu8PHB1heLDqYCfgAAAA==");
        g`%var_local(CurrentID)_LPADActivated` = 0;
    }
}

process SelectLPAD{
    Pos = Pos.set_location_direction(FacingVect);
    Corner_1 = Pos.shift_location_in_direction(-0.95);
    Corner_1 = Corner_1.shift_location_in_direction(-0.95, "SIDEWAYS");
    Corner_1 = Corner_1.shift_coordinate(-0.2, "Y");
    Corner_2 = Pos.shift_location_in_direction(1.95);
    Corner_2 = Corner_2.shift_location_in_direction(0.95, "SIDEWAYS");
    Corner_2 = Corner_2.shift_coordinate(1, "Y");
    select::player_by_name(g`LvlPlayerList_%var(%var_local(CurrentID)_LPADLevel)`);
    select::filter_by_conditional(player::in_area(Corner_1, Corner_2, "FALSE"));
    if(value::selection_size.greater(0)){
        code::start_process("SelectLPAD_T", "COPY", "FOR_EACH_IN_SELECTION");
    }
    select::entity_by_name(g`LvlCubeList_%var(%var_local(CurrentID)_LPADLevel)`);
    select::filter_by_conditional(entity::in_area(Corner_1, Corner_2, "FALSE"));
    if(value::selection_size.greater(0)){
        code::start_process("SelectLPAD_T", "COPY", "FOR_EACH_IN_SELECTION");
    }
}

process SelectLPAD_T{
    code::call_function("LPADSetLaunch");
    if(value::entity_type<default>.equals("player")){
        g`%player%_LPADAddVelocity` = flingVelocity.get_vector_length();
        g`%player%_LPADPrtlReLaunch` = g`%var_local(CurrentID)_LPADPrtlReLaunch`;
        code::start_process("LPADLaunchPl", "COPY");
    }
    else{
        StandUUID = value::uuid<default>;
        g`%var_local(StandUUID)_LPADPrtlReLaunch` = g`%var_local(CurrentID)_LPADPrtlReLaunch`;
        code::start_process("LPADLaunchEnt", "COPY");
    }
}

event<player_interact>{
    if(g`%player%_InMenu`.equals(0)){
        if(value::event_equipment_slot.equals("hand")){
            if(value::event_interaction.equals("right_click_block")){
                BlockType = value::event_block_location.get_block_material("ID_WITH_DATA");
                if(BlockType.text_contains("stone_button")){
                    g`%player%_IsHandSwing` = "1";
                    g`%player%_IsButtonClicking` = "1";
                }
            }
        }
    }
}

function HoloCheckWidth{
    if(ScoreHoloTxtList.equals(0)){
        ScoreHoloTxtList = [];
    }
    ScoreHoloTxtList.append_value(ScoreHoloTxt);
    CheckText = ScoreHoloTxt.clear_color_codes();
    CurrentWidth = CheckText.get_text_width();
    if(CurrentWidth.greater(MaxLineWidth)){
        MaxLineWidth = CurrentWidth;
    }
}

function DisplayLvlScore2{
    ScoreHoloTxt = variable::set_text("&#abc4d6Нажмите &#ffb657ПКМ &#abc4d6/ &#ffb657Shift+ПКМ &#abc4d6по блоку,", "CONCATENATION");
    ScoreHoloTxtList.append_value(ScoreHoloTxt);
    ScoreHoloTxt = variable::set_text("&#abc4d6чтобы сменить уровень", "CONCATENATION");
    ScoreHoloTxtList.append_value(ScoreHoloTxt);
    ScoreHoloTxt = ScoreHoloTxtList.join_text("\\n");
    player::display_hologram(g`HoloPos2`, ScoreHoloTxt);
}

function DisplaySpdScore2{
    ScoreHoloTxt = ScoreHoloTxtList.join_text("\\n");
    player::display_hologram(g`HoloPos1`, ScoreHoloTxt);
}

function ResSecDoors{
    if(world::block_equals("dark_oak_door[facing=east,half=lower,hinge=left,open=true,powered=false]", location(25.5, 39.5, 59.5, 0, 0))){
        world::set_block(location(25.5, 39.5, 59.5, 0, 0), "dark_oak_door[facing=east,half=lower,hinge=left,open=false,powered=false]");
        world::set_block(location(25.5, 40.5, 59.5, 0, 0), "dark_oak_door[facing=east,half=upper,hinge=left,open=false,powered=false]");
    }
    if(world::block_equals("dark_oak_door[facing=west,half=lower,hinge=left,open=true,powered=false]", location(54.5, 40.5, 71.5, 0, 0))){
        world::set_block(location(54.5, 40.5, 71.5, 0, 0), "dark_oak_door[facing=west,half=lower,hinge=left,open=false,powered=false]");
        world::set_block(location(54.5, 41.5, 71.5, 0, 0), "dark_oak_door[facing=west,half=upper,hinge=left,open=false,powered=false]");
    }
    if(world::block_equals("dark_oak_door[facing=west,half=lower,hinge=left,open=true,powered=false]", location(-114.5, 46.5, -54.5, 0, 0))){
        world::set_block(location(-114.5, 46.5, -54.5, 0, 0), "dark_oak_door[facing=west,half=lower,hinge=left,open=false,powered=false]");
        world::set_block(location(-114.5, 47.5, -54.5, 0, 0), "dark_oak_door[facing=west,half=upper,hinge=left,open=false,powered=false]");
    }
    if(world::block_equals("dark_oak_door[half=lower,open=true,facing=north,powered=false,hinge=right]", location(-113.5, 8.5, 47.5, 0, 0))){
        world::set_block(location(-113.5, 8.5, 47.5, 0, 0), "dark_oak_door[half=lower,open=false,facing=north,powered=false,hinge=right]");
        world::set_block(location(-113.5, 9.5, 47.5, 0, 0), "dark_oak_door[half=upper,open=false,facing=north,powered=false,hinge=right]");
    }
    if(world::block_equals("dark_oak_door[half=lower,open=true,facing=east,powered=false,hinge=right]", location(-12.5, 92.5, -109.5, 0, 0))){
        world::set_block(location(-12.5, 92.5, -109.5, 0, 0), "dark_oak_door[half=lower,open=false,facing=east,powered=false,hinge=right]");
        world::set_block(location(-12.5, 93.5, -109.5, 0, 0), "dark_oak_door[half=upper,open=false,facing=east,powered=false,hinge=right]");
    }
    if(world::block_equals("dark_oak_door[half=lower,open=true,facing=south,hinge=left]", location(49.5, 98.5, 132.5, 0, 0))){
        world::set_block(location(49.5, 98.5, 132.5, 0, 0), "dark_oak_door[half=lower,open=false,facing=south,hinge=left]");
        world::set_block(location(49.5, 99.5, 132.5, 0, 0), "dark_oak_door[half=upper,open=false,facing=south,hinge=left]");
    }
    if(world::block_equals("dark_oak_door[half=lower,facing=east,open=true,hinge=right]", location(46.5, 94.5, -147.5, 0, 0))){
        world::set_block(location(46.5, 94.5, -147.5, 0, 0), "dark_oak_door[half=lower,facing=east,open=false,hinge=right]");
        world::set_block(location(46.5, 95.5, -147.5, 0, 0), "dark_oak_door[half=upper,facing=east,open=false,hinge=right]");
    }
}

function SelfDialog{
    g`%player%_ShowDialog` = 1;
    repeat::for_each_in_list(value_variable=Message, list=Messages){
        MessageList = Message.split_text("%empty%");
        SendedMessage = "&#7a8085";
        repeat::for_each_in_list(value_variable=Character, list=MessageList){
            if(g`%player%_ShowDialog`.equals(0)){
                player::remove_boss_bar("dialog_bar");
                code::break();
            }
            SendedMessage = variable::set_text([SendedMessage, Character], "CONCATENATION");
            player::set_boss_bar("dialog_bar", SendedMessage, 0);
            player::play_sound_from_entity(value::name<default>, sound("minecraft:entity.item_frame.rotate_item", 1, 2, "MASTER"));
            code::wait("1");
        }
        WaitTicks = 12;
        code::call_function("DialogWait");
    }
    WaitTicks = 32;
    code::call_function("DialogWait");
    g`%player%_ShowDialog` = 0;
    player::remove_boss_bar("dialog_bar");
}

function RMB_ScrtMonitor{
    if(g`%player%_IsInSecret`.equals(1)){
        if(g`%player%_ShowDialog`.equals(0)){
            if(value::event_block_location.in_range(location(31.5, 40.5, 51.5, 0, 0), location(31.5, 40.5, 51.5, 0, 0))){
                Messages = "На компьютере открыт текстовый файл...";
                code::call_function("SelfDialog");
                player::open_book("H4sIAAAAAAAA/21VTU8TURR9FVEYV25cmpcQd5NJDTt3RkhcqVGj7kiFURuhQ8og27bIhykBMQaIiSJbdTGUjh1oOyT8gvvW7vglnnvflIrapJ03792Pc8+599VRakBdGSuEhSd+ea4YlJS6+mxIXShOqWszxZI/WS68CG8tlIth6JcmngfB6wE1OBnMl0KlVM5RzmQwMxuU/FI456jr//eYmAxKWIfDanC28NKHoVIXh9RAubCQ26Jtek+7tEN79EOfvt3Kj+qR7OM4tGsqlJpValOqKaUjfGXZpIZZNEuauhTjJaa2WdOmqqkDiw7eu6ZGkavhEdGRNhsa5lVT43CUwLrKW1WzDmc2a+h7408fj9+562n6gP1NTbF5xw9O0MFvSgecGK+ajrEyVRzsUwyHzzhsUISIWOxzGiTtyuaRRD/nj21TZ+htSswy3HdR4Qp8EsDgqBoAW1pq7Uigpqnr08pHeAjeRApN6RhhamyEDBGXSC2mAvnX3B5GVI3ALqONqGPqdKhPvsOOCdsESdg4aQPDVxzvAweQm3XP81QmzzesgSCipn7gjXsPvUfefe+edxsuDeZZio0toKxwKCGBO5TAag9Fig3XAhHoZ0Zgr+QDySoEukKPhkYRIDKVWEGzNVELFmnGELMXizggBAxxdbyXitwtBiFw0BJQHEmbImMMHlYYiZDVxD7z2xYFYwltNl1LPMxhCjSCKbISxhlA7hmpg4FzTH7Krlk3NVe0klZDgyBJbGpSMUCx+ocsBqOrSOtK9QKry8dCFhP3hfNKZ8IcyuG3jZTnVXAzRqGS7knWZcmaQnjK1AiSRGhgJGYJSexQJVwCo2jhDLKJ+jVT75V5bAk9K5D7oJPxZFVq9AWzHjxl7MOqCfaa7RF0cNa9MR2iup1sIprM7ZGlE1bQuc9nKswLwAim/RJEnd6UMesVrBHPzpJAZsbssMKnAfOK3Al1xmRbR5BIlAZCb9i7JNI38/kbbuZZlcZMmLSaJQ2UJL2GRLZPIipkYXh25pheLsb9s9e513rTIeLuCqKETxBwhcsB7KQ/eOoX1iw5hF81i2cXWXbBcOizdpOGzai02ohSvTZe1jIR8opUiaU546oLEB0OhEvHLNm7TKbjb+2PpWeEEUtMJMO5LlNmb0VAQ3ks5dnQeo4z8u9H5dRQ2Z8Lpt/4U7khdakwH74Kymq47Bemx4I5f8pRg2ExnPYzLi7TtqdH8qP421C/AX42JVqwBgAA");
                s`%player%_FoundSecret1` = 1;
                code::break();
            }
            if(value::event_block_location.in_range(location(54.5, 47.5, 95.5, 0, 0), location(54.5, 47.5, 95.5, 0, 0))){
                Messages = "На компьютере открыт текстовый файл...";
                code::call_function("SelfDialog");
                player::open_book("H4sIAAAAAAAA/21UTW/TQBDdUIpSc+LCEa3Ua7sSHDhwQypXQCAhblVIDUS0cZW49IQUB9oiJRAqIcqlFLghIeE6NXHSOP0Ls3+hv4Q34+2HVBwpWu/OzHvz3qw9pabU1YVKWHniN5q1oK7Utadldam2pK6v1Op+tVF5Ht5Zb9TC0K8vPguCV1Nquhqs1UOlVMlTXjVYWQ3qfj1seurG/zMWq0Ed63BGTa9WXvgIVOpyWU01KuulN7RDn2iPvtIP+q2P3325eUvPusfzaM+2aGLf0yFNNPXpgNJ528batnGQacop5U2cZ9pGmo7O4hGOuBbFNKDYaODE2n6QbEqwn9LY9jT+Oi4NhRLKKLdvuZyNbFcftz7jEEeJw8kRkOqH5p55ZB6bB+a+uWsAjKpxwZGDc9vDBlNLgbvH2yMhMpTNIUApZQZzYKKRsG87dgtpHbuBYsBug0NsN7Hq2Q3U2OVWIuT2hSYAkLqP90HBPRXuMWsCZMhhu4ByEkSyOMRxJJ3E3AUqGGOUc2ETa06UTiSGpenbFngc4RefSJSI1vwqHSS2AznoL1RxS+iG0I4IIjDCPoMAInzGjHOmIn07Q2gsTmo4lbOQrJoYGTm7aGB74rHY7BxnxTOEfmcd2DTbZViI1+FyE1QYcxBrweTMRd+kq1hsF31sF7qOsDNiJBDjzg4Kb/nUWYFmI7utXW4uBnNSMZti8pF4UczBBGl/XId9ERHc7Mc5bbeKhAm3fc6OX1iDO8Onti0OstjSWxfQ7L6gyvDKbGJYQVSI8ABuskcMCF2SYthYBBD5yeR4BxmiPhR1ztsOD6R0nDE8zxjyD+xbkHADwPdiQ4aQp7SrpXJf1O9hXTT7DRUZtS0GJnJv2IKheF+4jIHH9kkjItm5q8PYbmSEguhw7haBHyLAurj5oqNTn8sMQXqbM0QCnsWRWIc7f3Yv2sI9EZkL3rsywTSY509GIWX/tK4IKxRSR/HMMXWbHTu5Jadjq+FDKt+isfG82YuPKqlyw28Gy6/9pVJZXamshS+Dhppp+JXlhaDpL3lqOqyFy76DmaEdU3wk8QlV/wD/oUg7vAUAAA==");
                s`%player%_FoundSecret2` = 1;
                code::break();
            }
            if(value::event_block_location.in_range(location(-129.5, 49.5, -38.5, 0, 0), location(-129.5, 49.5, -38.5, 0, 0))){
                Messages = "На компьютере открыт текстовый файл...";
                code::call_function("SelfDialog");
                player::open_book("H4sIAAAAAAAA/22Uz27TQBDGN1RFqTlx4YhW6jXkwIFDz30GxK0KqYGI1i6OS69p0lIqB0IRogiBCkKCA0i4SUxdp7GlPsHsK/RJ+GbWEVSQQ7ze3fn3m2/sKDWnri03wsZdN2i3fE+p6/eq6kprVd1Yb3luM2g8CJe2glYYut7Kfd9/PKfmm/6mFyqlKo5ymv76hu+5Xth21M3/W6w0fQ/rcEHNbzQeuriIoFU1FzS2Kl/okF7REb2jz/RDX+y8vX1HL5Y/x8FmQiPKaUxTM9BUmA5eUjqh3DynCeWavtFRXdNHSsw2ZTicmD4/tdmDKW7QEM8MpjDZNl04iOEtxlGqcQYPQ+wldMb+UzgpTGS6uDBFnFO4fg2zA42DienBacpOsdVn6ykMT3C3wCqXNFLKYA2vONKI/gs7Eg6nH0wkeSC/uLxwgkfM0WtIWAw5SUkvt+WmEhPu6VRfdN5onCZmV7KDm5oWEikdW6dDLbZAJqZdOqPY7NYu0eC1wEJ92uzAQFI2nYvO11m5sMvhBRb1el2VvfqJNU4jGjFFsOwzFjA0L7U0BuwZGOe0g+jPECGWhkzBdFcDBGo3PThPsNXl1LQAKIQ8M8+X9Pl3ZoNAe7jANGDNmc46ENPp+URgx9q84NQZH4NleD1spDXuKurArfd8LK7HjMsWz04Z8EiIoHQzEJOIazYDXAU7LUIDiFIO0gN4PGTQIifwSViaQtLqdKbRhKFqseVjziDhDaSFvuMPOjIRi0JEgrOaxLvFepqVNeIcU0EkdU8YEyvvT89TuPgEpJmthMZS3PBS355gLcUV8BAzHyuvTNAU0gzQl34JOrz3ZFQSKTvljDvSjFnJHExGhKdmKBWPWc8Zq2nGYChX2XtU0xb4lNmNRYuJyNn2SYsuOxz3r/Hi+TmGcvZmCuCEeKDOhJsMEE+gHZNB2VTLjhnto4p9qQEViLjL9I4RZmxvSabCLNcyyhnEENmvA+s/ln7wW1F+c1JtB9r08ZrUHWfx35+qqGrgtv21p+5qpaquNjbDR36gFgK3sbbst91VR82HrXDNtR1SC3RYtx8/fBrVb/j8mUGUBQAA");
                s`%player%_FoundSecret3` = 1;
                code::break();
            }
            if(value::event_block_location.in_range(location(-134.5, 15.5, 57.5, 0, 0), location(-134.5, 15.5, 57.5, 0, 0))){
                Messages = "На компьютере открыт текстовый файл...";
                code::call_function(p"SelfDialog");
                player::open_book("H4sIAAAAAAAA/21UwW7TQBDdUAUl5sSFI1qp12oPnBA3pHIFBBLiVpnEQERqV45Lj9gJVYuaNgUhWg5Q9c7BLbHqNrEr8QW7v9Av4c2sEyTAUaT17Mx7b96M7AixIG4su5H7zAt7ncAX4ubzhrjWaYtbqx3fa4Xuy+jeRtiJIs9feREEbxZEvRWs+5EQouYIpxWsrgW+50c9R9z+f8VKK/Bxjpqivua+8pAI0oZYCN2N2jt9oPf1kT7Ux/qHvHr/5c5duVg9joOL0iR6ojNp+rrUP3Up6d0MzJZOzUia2Az0BW5O8R+bBFk4SX1pYp1TLQKpLjghBw7KYwROcNU3A/lYPVBP1FP1SD1U95UkOiQVttAMzZ6kRBBMzB4YCSGX+hQSMgmYC9zlQC7MDgWmrGFAScD6JHGwVKAk+aTJjMwm9ZLpS51B/ZBecrOpS5QcSnBnwCnmvUJGzB0gtCRRkrAGiMm4uYIL920gRvEZmgcdfJF6zHDnZFmJ34n5YFtYQjoJUkqJag5fcWavrVcpS5yQvIT9LchwBBIzAt93XRB6Sr2T3SfsGwqAvEvICMET8pskEEgGt6DP9FH+jeJw0Xy047AoV/FnWdFX/ls7LivfqNn0Dz0TcN/Eg6KMhU6527+c47cRjEXrzMXj2LLiWeBcBk3QbPNIp6A6JgN52RIJ8+iyb7PPaEKsNTY70gLZPZxKqwSDmHDf6N4uV6WqpG4kIRa0LtzTEa/tbN15dDkUzCckfuE83+cxj5jO06WZlSDFSpKMFPfljJHWkllzyrWDp1bOqlHxogFiR5+jbDaglM97AB6iaJMhhrPhAnTMtqfI6NP4ae8QpZ3eho5cOc7iv4+oiUbo9YLuW69da4jr7nr0OghFM/Tc7nLQ89qOqEedqOtVLTf1gbLfBHwxxG9c5JpAqwQAAA==");
                s`%player%_FoundSecret4` = 1;
                code::break();
            }
            if(value::event_block_location.in_range(location(-11.5, 93.5, -125.5, 0, 0), location(-11.5, 93.5, -125.5, 0, 0))){
                Messages = "На компьютере открыт текстовый файл...";
                code::call_function(p"SelfDialog");
                player::open_book("H4sIAAAAAAAA/3VUQU8TQRSeipiynrx4NJNwLXvyYLyZ4FWNJuqN1LJqI3RJu8i1paIYEMSoEBMhXtBEE7eF2rXttgm/4M1f4Jf4vTfToqJN2u6+mfe9733vm/GUGlPnp/NR/m5QrhTDklIX7mfVmeKsujhfLAWFcv5hdHWpXIyioDTzIAyfjKnxQrhYipRSGU95hXB+ISwFpajiqUv/zpgphCU8RxNqfCH/KMBGpc5m1Vg5v5TZp216TXu0Q5/omz5+9v7yFT3pPp6HYIsOqE+HlJpNTQNTxUtCbeqbVepSX5sXZpn6U/yjTZ1+UGxqlGJTy9f0kd80Nc0aMpoUIyPRWI21eUUdUzPLwGshIAkamX1qIBQjkCBATU37vIE3MvxAFpvA4awElG751/3b/h3/pn/Dv4aSe2DGlBIuW2OMgeOaYPU7Vx/GzBZ1haQLoAXqmbprSYNyypRzrm2mS33f9x1GG82tSFpLcD5TS7aknMuaNbFYNZs521ePs6wI2IaoALxArAc1bEVkiAIvGT8VOYGWQ03lxtXFM2uGjhLqascqhj7rjCqKNXgw1GGMQ5EyNWtmxTFkvdsaqzG+EH3KVZaFnsxYyLaYxHAMDQywa9tiBF6FwiCfWp2AhU7XGAp9JZopcVtVccNAshM7/GHhn67wAd7b4PaGh4Xkjg1LRRYEKohLEn1cfauldBVbYCkk7druoei6bfIEILXTgQKJFVykOURyHTUTs8K8+3abFkY9dM6+gi8pzrHbGkPSA3Y4O68tToVJUPzDifFFM6BSQ/PhmGJJtFijI0nwwm8z/IJnkEGZRPhDd2Yx5G4hpduBNO7OyWiS+uirHIKYV82mWTnqWmv3R3Kg36GzxcVmI+ekt0eEn53PEXgHKtwnu3FkYSYwrAy3pbJzl8Fy2rLvgQwntv5qJSdHz2xpNhH+hHtD5IjZOcDZYWvi2NjAyP/CkIdfx6TkRqmdcox5zomw+4ZtGsDyuipnhsnUoY01enrih4StY28a5rVlZy4XCwOAPzvDsZPbYjQwdY8H9p/t2tlaJifnxbJf/+M0+543efqjMipbDirh3NNgNpNV5/KL0eOwrCbKQX5uOqwEs54aj4rRXOB4TNC2b69oXODqF6HVtLw6BgAA");
                s`%player%_FoundSecret5` = 1;
                code::break();
            }
            code::call_function(p"RMB_ScrtMonitor2");
        }
    }
    if(variable::is_dummy()){
        code::call_function(p"RMB_ScrtMonitor3");
    }
}

function PlVarsTick2{
    if(g`%player%_ClickedPlayerTime`.greater(0)){
        g`%player%_ClickedPlayerTime` = variable::subtract([g`%player%_ClickedPlayerTime`, 1]);
        if(g`%player%_ShowMPlatSpeed`.less_or_equals(0)){
            if(g`%player%_ClickedPlayerTime`.less_or_equals(0)){
                player::send_action_bar("&r");
            }
            else{
                player::send_action_bar(g`%player%_ClickedPlayerName`);
            }
        }
    }
    if(g`%player%_FlyTime`.greater(0)){
        g`%player%_FlyTime` = variable::subtract([g`%player%_FlyTime`, 1]);
        if(g`%player%_FlyTime`.less_or_equals(0)){
            player::set_movement_speed(0, "FLY");
            player::set_flying("FALSE");
        }
    }
    if(Tick_4.greater_or_equals(2)){
        Tick_4 = 0;
        if(g`%player%_HasPortalGun`.equals(1)){
            code::call_function("PlClearField");
        }
    }
    Tick_4 = variable::add([Tick_4, 1]);
    if(g`%player%_IsWalking`.greater(0)){
        g`%player%_IsWalking` = variable::subtract([g`%player%_IsWalking`, 1]);
        if(g`%player%_IsWalking`.less_or_equals(0)){
            g`%player%_WalkVect` = vector(0, 0, 0);
            g`%player%_WalkLen` = 0;
            g`%player%_WalkMult` = 0;
        }
    }
    if(g`%player%_Level`.equals(25)){
        if(Lvl25SoundTick.less_or_equals(0)){
            Lvl25SoundTick = 1880;
            player::play_sound(sound("minecraft:cubed.other.electric_fire", 2, 0.5, "MASTER"), location(-176.5, 55.5, -82.5, 0, 0));
        }
        Lvl25SoundTick = variable::subtract([Lvl25SoundTick, 1]);
    }
    code::call_function("PlVarsTick3");
    code::call_function(p"MusicTick");
}

event<world_stop>{
    code::call_function("CLEAR_ENT");
}

process CLEAR_ENT_W{
    code::wait(5);
    code::call_function("CLEAR_ENT");
}

event<player_right_click>{
    if(g`%player%_InMenu`.equals(0)){
        if(g`%player%_PortalStandPos`.not_equals(0)){
            if(value::event_block_location.equals(g`%player%_PortalStandPos`)){
                world::cancel_event();
                if(g`%player%_HasPortalGun`.equals("0")){
                    g`%player%_HasPortalGun` = "1";
                    player::set_item_cooldown(999999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
                    code::call_function(p"GiveGunItems");
                    player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
                    if(g`%player%_HasGravityGun`.equals(0)){
                        player::set_hotbar_slot("4");
                    }
                    else{
                        player::set_hotbar_slot(3);
                    }
                    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.armor.equip_netherite", 1, 2, "MASTER"));
                    player::hide_entity("portal_frame");
                }
                code::break();
            }
        }
        if(g`%player%_GravityStandPos`.not_equals(0)){
            if(value::event_block_location.equals(g`%player%_GravityStandPos`)){
                world::cancel_event();
                if(g`%player%_HasGravityGun`.equals(0)){
                    g`%player%_HasGravityGun` = "1";
                    player::set_item_cooldown(999999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
                    code::call_function(p"GiveGunItems");
                    player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
                    if(g`%player%_HasPortalGun`.equals(0)){
                        player::set_hotbar_slot("4");
                    }
                    else{
                        player::set_hotbar_slot(5);
                    }
                    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.armor.equip_netherite", 1, 2, "MASTER"));
                    player::hide_entity("gravity_frame");
                }
                code::break();
            }
        }
        code::call_function("RMB_Other");
    }
}

function LoadClearPlEnt{
    if(IsFirstLoad.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with(["cube_stand*", "cube_marker*", "cube_shulker*", "cube_sand*", "portal*"]));
        select::add_entity_by_conditional(entity::has_custom_tag("name", "cube_sand*", "STARTS_WITH"));
        select::filter_by_conditional(g`%selected_uuid%_Level`.equals(NextLevel));
        if(value::selection_size.greater(0)){
            variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
            entity::remove();
        }
        select::reset();
    }
}

function PlLPADAddVelocity{
    if(g`%player%_LPADAddVelocity`.greater("0")){
        PlayerVelocity = variable::add([PlayerVelocity, g`%player%_LPADAddVelocity`]);
        g`%player%_LPADAddVelocity` = 0;
        IsOnGround = 0;
    }
}

function SecretChance{
    if(NextLevel.equals([3, "6.0", 16, 19, 23, 28, 32])){
        TimerSum = variable::add([g`%player%_IsSpeedrun`, s`%player%_SettingEnableLvlTimer`]);
        if(TimerSum.equals(0)){
            SecretChance = variable::random_number(1, 100);
            if(SecretChance.less_or_equals(33)){
                NextLevel = variable::multiply([NextLevel, -1]);
                g`%player%_IsInSecret` = 1;
                g`%player%_SecretSoundTicks` = 999;
            }
        }
    }
}

function MenuBonusLvls{
    repeat::on_range(Slot, 0, 1, 1){
        Lvl = variable::add([Slot, 1]);
        Item = g`ItemBonusLvl%var_local(Lvl)`;
        if(s`%player%_CompleteB%var_local(Lvl)`.equals(1)){
            Item = Item.set_item_type("lime_dye");
        }
        LvlNum = Item.get_item_custom_tag("bonus_lvl");
        Time = variable::multiply([s`%player%*%var_local(LvlNum)*Record_LvlTime`, 50]);
        Time = Time.format_timestamp("HH:mm:ss.SSS", format="CUSTOM");
        Time = variable::set_text(["&#abc4d6Лучшее время:&#ffb657", Time]);
        Item = Item.set_item_lore_line(Time, 2);
        player::set_inventory_menu_item(Item, Slot);
    }
}

event<player_click_inventory>{
    world::cancel_event();
    if(g`%player%_InMenu`.equals(1)){
        if(value::open_inventory_title<default>.equals("Бонусные уровни")){
            Lvl = value::event_item.get_item_custom_tag("bonus_lvl", "null");
            if(Lvl.not_equals("null")){
                player::close_inventory();
                player::stop_sound([]);
                player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
                code::call_function("PlayerSetup");
                CurrentLevel = "0";
                NextLevel = variable::add([Lvl, 0]);
                DisableTransition = 1;
                code::call_function(p"LevelChangeEnd");
            }
        }
    }
}

function IntroMount{
    code::wait(1);
    player::set_gamemode("SPECTATOR");
    world::spawn_item_display(location(1.5, 6.65, 22.5, 90, -90), "intro*%player%", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYeDPzcxLTS5KTCuxKi7Jz0tlZmBNzi/NK2FgYGBkAAAtZYiiOAAAAA==");
    select::last_entity();
    IntroUUID = value::uuid<current>;
    entity::set_display_view_range(0);
    player::spectate_target(IntroUUID);
    code::wait(40);
    entity::set_display_teleport_duration(40);
    code::wait(1);
    entity::teleport(location(1, 7.15, 22.8, 0, 20));
    Ping = value::ping<default>;
    code::wait("%math(40+ceil(%var_local(Ping)/50))");
    entity::set_display_teleport_duration(10);
    code::wait(1);
    entity::teleport(location(1, 7.6, 23.5, 0, 0));
    Ping = value::ping<default>;
    code::wait("%math(20+ceil(%var_local(Ping)/50))");
    player::set_gamemode("ADVENTURE");
    entity::remove();
    select::reset();
}

function IntroUnmount{
    if(g`%player%_IntroStarted`.equals(1)){
        if(player::gamemode_equals("SPECTATOR")){
            player::spectate_target("none");
            select::entity_by_conditional(value::name<victim_entity>.text_starts_with("intro*%player%"));
            if(value::selection_size.greater(0)){
                entity::remove();
            }
            select::reset();
        }
        else{
            if(g`%player%_Level`.equals(21)){
                select::entity_by_conditional(value::name<victim_entity>.text_starts_with("intro*%player%"));
                if(value::selection_size.greater(0)){
                    entity::remove();
                }
                select::reset();
            }
        }
    }
}

event<player_stop_spectating_entity>{
    if(player::gamemode_equals("SPECTATOR")){
        if(g`%player%_IntroStarted`.equals(1)){
            world::cancel_event();
        }
        if(g`%player%_ShowDialog`.equals(1)){
            world::cancel_event();
        }
    }
}

function Lvl_LOAD1{
    repeat::for_each_in_list(value_variable=DataList, list=Data){
        code::call_function(p"WAIT");
        DataList = DataList.get_item_name();
        DataList = DataList.split_text("|");
        Header = DataList.get_list_value(0);
        if(Header.equals("default")){
            code::call_function("LOAD_Default");
        }
        if(Header.equals("chunk")){
            code::call_function(p"LOAD_Chunkload");
        }
        if(Header.equals("sign")){
            code::call_function(p"LOAD_Sign");
        }
        if(Header.equals("decor")){
            code::call_function(p"LOAD_Decor");
        }
        if(Header.equals("clear")){
            code::call_function("LOAD_Clear");
        }
        if(Header.equals("dialog")){
            code::call_function("LOAD_Dialog");
        }
        if(Header.equals("trig")){
            code::call_function(p"LOAD_Trig");
        }
        if(Header.equals("trigfast")){
            code::call_function(p"LOAD_TrigFast");
        }
        if(Header.equals("cube")){
            code::call_function("LOAD_Cube");
        }
        if(Header.equals("platform")){
            code::call_function("LOAD_Platform");
        }
        code::call_function(p"Lvl_LOAD2");
    }
}

function Lvl_LOAD2{
    if(Header.equals("bridge")){
        code::call_function("LOAD_Bridge");
    }
    if(Header.equals("laser")){
        code::call_function("LOAD_Laser");
    }
    if(Header.equals("reflector")){
        code::call_function("LOAD_Reflector");
    }
    if(Header.equals("lpad")){
        code::call_function("LOAD_LPAD");
    }
    if(Header.equals("mplat")){
        code::call_function(p"LOAD_MPlat");
    }
    if(Header.equals("fan")){
        code::call_function(p"LOAD_Fan");
    }
    if(Header.equals("ball")){
        code::call_function("LOAD_Ball");
    }
    if(Header.equals("turret")){
        code::call_function(p"LOAD_Turret");
    }
    if(Header.equals("boss")){
        code::call_function(p"LOAD_Boss");
    }
    if(Header.equals("ecore")){
        code::call_function(p"LOAD_ECore");
    }
    if(IsFirstLoad.equals(1)){
        if(NextLevel.equals(21)){
            world::set_block(location(-22.5, 45.5, 15.5, 0, 0), "minecraft:redstone_block", "TRUE");
        }
    }
    code::call_function(p"LoadClearPlEnt");
}

function LOAD_Default{
    g`%player%_LvlSpawnPos` = DataList.get_list_value(1);
    g`%player%_EndCorner1` = DataList.get_list_value(2);
    g`%player%_EndCorner2` = DataList.get_list_value(3);
    g`%player%_NextLvl` = DataList.get_list_value(4);
    g`%player%_GivePortalGun` = DataList.get_list_value(5);
    g`%player%_PortalStandPos` = DataList.get_list_value(6, "0");
    g`%player%_GiveGravityGun` = DataList.get_list_value(7, 0);
    g`%player%_GravityStandPos` = DataList.get_list_value(8, "0");
    g`%player%_LvlSpawnPos` = g`%player%_LvlSpawnPos`.shift_coordinate(0);
    if(g`%player%_EndCorner1`.not_equals("0")){
        g`%player%_EndCorner1` = g`%player%_EndCorner1`.shift_coordinate(0);
        g`%player%_EndCorner2` = g`%player%_EndCorner2`.shift_coordinate(0);
    }
    else{
        g`%player%_EndCorner1` = 0;
    }
    g`%player%_NextLvl` = variable::add([g`%player%_NextLvl`, 0]);
    g`%player%_GivePortalGun` = variable::add([g`%player%_GivePortalGun`, 0]);
    if(g`%player%_PortalStandPos`.not_equals("0")){
        g`%player%_PortalStandPos` = g`%player%_PortalStandPos`.shift_coordinate(0);
    }
    else{
        g`%player%_PortalStandPos` = 0;
    }
    g`%player%_GiveGravityGun` = variable::add([g`%player%_GiveGravityGun`, 0]);
    if(g`%player%_GravityStandPos`.not_equals("0")){
        g`%player%_GravityStandPos` = g`%player%_GravityStandPos`.shift_coordinate(0);
    }
    else{
        g`%player%_GravityStandPos` = 0;
    }
}

function LOAD_Clear{
    g`%player%_Clear1Corner1` = DataList.get_list_value(1);
    g`%player%_Clear1Corner2` = DataList.get_list_value(2);
    g`%player%_Clear2Corner1` = DataList.get_list_value(3);
    g`%player%_Clear2Corner2` = DataList.get_list_value(4);
    RespawnPos = DataList.get_list_value(5, "0");
    if(g`%player%_Clear1Corner1`.not_equals("0")){
        g`%player%_Clear1Corner1` = g`%player%_Clear1Corner1`.shift_coordinate(0);
        g`%player%_Clear1Corner2` = g`%player%_Clear1Corner2`.shift_coordinate(0);
    }
    else{
        g`%player%_Clear1Corner1` = 0;
    }
    if(g`%player%_Clear2Corner1`.not_equals("0")){
        g`%player%_Clear2Corner1` = g`%player%_Clear2Corner1`.shift_coordinate(0);
        g`%player%_Clear2Corner2` = g`%player%_Clear2Corner2`.shift_coordinate(0);
    }
    else{
        g`%player%_Clear2Corner1` = 0;
    }
    if(RespawnPos.not_equals("0")){
        g`%player%_PossibleRespawnPos` = RespawnPos.shift_coordinate(0);
    }
    else{
        g`%player%_PossibleRespawnPos` = 0;
    }
}

function LOAD_Dialog{
    g`%player%_Dialog1Corner1` = DataList.get_list_value(1);
    g`%player%_Dialog1Corner2` = DataList.get_list_value(2);
    g`%player%_Dialog2Corner1` = DataList.get_list_value(3);
    g`%player%_Dialog2Corner2` = DataList.get_list_value(4);
    if(g`%player%_Dialog1Corner1`.not_equals("0")){
        g`%player%_Dialog1Corner1` = g`%player%_Dialog1Corner1`.shift_coordinate(0);
        g`%player%_Dialog1Corner2` = g`%player%_Dialog1Corner2`.shift_coordinate(0);
    }
    else{
        g`%player%_Dialog1Corner1` = 0;
    }
    if(g`%player%_Dialog2Corner1`.not_equals("0")){
        g`%player%_Dialog2Corner1` = g`%player%_Dialog2Corner1`.shift_coordinate(0);
        g`%player%_Dialog2Corner2` = g`%player%_Dialog2Corner2`.shift_coordinate(0);
    }
    else{
        g`%player%_Dialog2Corner1` = 0;
    }
}

function LOAD_Cube{
    CubeButtonPos = DataList.get_list_value(1);
    CubeSpawnPos = DataList.get_list_value(2);
    CubeType = DataList.get_list_value(3);
    CubeButtonPos = CubeButtonPos.shift_coordinate(0);
    CubeSpawnPos = CubeSpawnPos.shift_coordinate(0);
    g`%player%_CubeList`.append_value([CubeButtonPos, CubeSpawnPos]);
    if(CubeType.equals("beacon")){
        g`%player%_CubeListBeacon`.append_value(CubeButtonPos);
    }
    if(CubeType.equals("thrower")){
        g`%player%_CubeListThrower`.append_value(CubeButtonPos);
    }
    if(CubeType.equals("heavy")){
        g`%player%_CubeListHeavy`.append_value(CubeButtonPos);
    }
    if(CubeType.equals("rail")){
        g`%player%_CubeListRail`.append_value(CubeButtonPos);
    }
}

function LOAD_Platform{
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "platform";
        g`%var_local(ActivatorID)_CopyCorner1` = DataList.get_list_value(2);
        g`%var_local(ActivatorID)_CopyCorner2` = DataList.get_list_value(3);
        g`%var_local(ActivatorID)_CopyPos` = DataList.get_list_value(4);
        g`%var_local(ActivatorID)_PastePos` = DataList.get_list_value(5);
        g`%var_local(ActivatorID)_AreaCorner1` = DataList.get_list_value(6);
        g`%var_local(ActivatorID)_AreaCorner2` = DataList.get_list_value(7);
        g`%var_local(ActivatorID)_MoveHeight` = DataList.get_list_value(8);
        g`%var_local(ActivatorID)_DefaultState` = DataList.get_list_value(9);
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        g`%var_local(ActivatorID)_CopyCorner1` = g`%var_local(ActivatorID)_CopyCorner1`.shift_coordinate(0);
        g`%var_local(ActivatorID)_CopyCorner2` = g`%var_local(ActivatorID)_CopyCorner2`.shift_coordinate(0);
        g`%var_local(ActivatorID)_CopyPos` = g`%var_local(ActivatorID)_CopyPos`.shift_coordinate(0);
        g`%var_local(ActivatorID)_PastePos` = g`%var_local(ActivatorID)_PastePos`.shift_coordinate(0);
        g`%var_local(ActivatorID)_AreaCorner1` = g`%var_local(ActivatorID)_AreaCorner1`.shift_coordinate(0);
        g`%var_local(ActivatorID)_AreaCorner2` = g`%var_local(ActivatorID)_AreaCorner2`.shift_coordinate(0);
        g`%var_local(ActivatorID)_MoveHeight` = variable::add([g`%var_local(ActivatorID)_MoveHeight`, 0]);
        g`%var_local(ActivatorID)_DefaultState` = variable::add([g`%var_local(ActivatorID)_DefaultState`, 0]);
        if(g`%var_local(ActivatorID)_DefaultState`.equals(0)){
            if not (world::block_equals("air", g`%var_local(ActivatorID)_AreaCorner2`)){
                world::clear_region(g`%var_local(ActivatorID)_AreaCorner1`, g`%var_local(ActivatorID)_AreaCorner2`);
            }
        }
        else{
            if(world::block_equals("air", g`%var_local(ActivatorID)_AreaCorner2`)){
                world::clone_region(g`%var_local(ActivatorID)_CopyCorner1`, g`%var_local(ActivatorID)_CopyCorner2`, g`%var_local(ActivatorID)_CopyPos`, g`%var_local(ActivatorID)_PastePos`, copy_entity="FALSE");
            }
        }
        g`%var_local(ActivatorID)_Level` = NextLevel;
        LoadID = variable::add([LoadID, 1]);
    }
}

function LOAD_Bridge{
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "bridge";
        g`%var_local(ActivatorID)_SetCorner1` = DataList.get_list_value(2);
        g`%var_local(ActivatorID)_SetCorner2` = DataList.get_list_value(3);
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        g`%var_local(ActivatorID)_SetCorner1` = g`%var_local(ActivatorID)_SetCorner1`.shift_coordinate(0);
        g`%var_local(ActivatorID)_SetCorner2` = g`%var_local(ActivatorID)_SetCorner2`.shift_coordinate(0);
        if not (world::block_equals("air", g`%var_local(ActivatorID)_SetCorner1`)){
            world::clear_region(g`%var_local(ActivatorID)_SetCorner1`, g`%var_local(ActivatorID)_SetCorner2`);
        }
        LoadID = variable::add([LoadID, 1]);
    }
}

function LOAD_Laser{
    g`%var_local(NextLevel)_LvlHasLaser` = 1;
    if(IsFirstLoad.equals(1)){
        SpawnPos = DataList.get_list_value(1);
        BlockPosList = DataList.get_list_value(2);
        Type = DataList.get_list_value(3);
        Color = DataList.get_list_value(4, "red");
        RayHitSize = DataList.get_list_value(5, 0);
        SpawnPos = SpawnPos.shift_coordinate(0);
        if(BlockPosList.not_equals("0")){
            BlockPosList = BlockPosList.split_text("*");
            repeat::for_each_in_list(value_variable=RememberPos, list=BlockPosList){
                RememberPos = RememberPos.shift_coordinate(0);
                if not (g`LvlLaserBlockList_%var_local(NextLevel)`.list_contains_value(RememberPos)){
                    g`LvlLaserBlockList_%var_local(NextLevel)`.append_value(RememberPos);
                }
                if(world::block_equals("minecraft:redstone_block", RememberPos)){
                    world::set_block(RememberPos, "minecraft:red_terracotta", "TRUE");
                }
            }
        }
        RayHitSize = variable::add([RayHitSize, 0]);
        ID = NextLevel;
        code::call_function("CreateLaser");
        select::reset();
    }
}

function LOAD_Reflector{
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "reflector";
        g`%var_local(ActivatorID)_BlockPos` = DataList.get_list_value(2);
        g`%var_local(ActivatorID)_DefaultFacing` = DataList.get_list_value(3);
        g`%var_local(ActivatorID)_ActiveFacing` = DataList.get_list_value(4);
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        g`%var_local(ActivatorID)_BlockPos` = g`%var_local(ActivatorID)_BlockPos`.shift_coordinate(0);
        State = g`%var_local(ActivatorID)_BlockPos`.get_block_data("facing");
        if(State.not_equals(g`%var_local(ActivatorID)_DefaultFacing`)){
            world::set_block_single_data(g`%var_local(ActivatorID)_BlockPos`, "facing", g`%var_local(ActivatorID)_DefaultFacing`);
        }
        LoadID = variable::add([LoadID, 1]);
    }
}

function LOAD_LPAD{
    g`%var_local(NextLevel)_LvlHasLPAD` = 1;
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "lpad";
        g`%var_local(ActivatorID)_Lvl` = NextLevel;
        SpawnPos = DataList.get_list_value(2);
        TargetPos = DataList.get_list_value(3);
        PrtlReLaunch = DataList.get_list_value(4, "0");
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        SpawnPos = SpawnPos.shift_coordinate(0);
        TargetX, TargetY, TargetZ = TargetPos.get_all_coordinates();
        TargetPosList = variable::set_text([TargetX, ";", TargetY, ";", TargetZ], "CONCATENATION");
        if(PrtlReLaunch.not_equals("0")){
            PrtlReLaunch = PrtlReLaunch.shift_coordinate(0);
        }
        else{
            PrtlReLaunch = 0;
        }
        ID = NextLevel;
        LocalID = LoadID;
        code::call_function("CreateLPAD");
        select::reset();
        LoadID = variable::add([LoadID, 1]);
    }
}

event<player_interact>{
    BlockType = value::event_block_location.get_block_material("ID_WITH_DATA");
    if(value::event_interaction.equals("physical")){
        if(BlockType.text_starts_with(["minecraft:polished_blackstone_pressure_plate", "minecraft:birch_pressure_plate"])){
            world::cancel_event();
        }
    }
    if not (world::event_is_canceled()){
        if(BlockType.text_contains(["redstone", "note_block", "sign", "barrel", "lectern", "beacon", "trapdoor", "loom"])){
            world::cancel_event();
        }
    }
    if not (world::event_is_canceled()){
        if(g`%player%_InMenu`.equals(0)){
            if(value::event_equipment_slot.equals("hand")){
                if(value::event_interaction.equals("right_click_block")){
                    if(BlockType.text_starts_with("minecraft:polished_blackstone_button")){
                        g`%player%_IsHandSwing` = "1";
                        g`%player%_IsButtonClicking` = "1";
                        if(BlockType.text_contains("powered=false")){
                            BlockPos = value::event_block_location;
                            code::call_function("LvlSpawnCube");
                        }
                    }
                }
            }
        }
    }
}

function LvlSpawnCube{
    BottonIndex = g`%player%_CubeList`.get_list_index_of_value(BlockPos);
    if(BottonIndex.not_equals(-1)){
        ID = BottonIndex;
        SpawnIndex = variable::add([BottonIndex, "1"]);
        SpawnPos = g`%player%_CubeList`.get_list_value(SpawnIndex);
        SpawnPos = SpawnPos.shift_coordinate(-0.5, "Y");
        CubeType = "normal";
        if(g`%player%_CubeListBeacon`.list_contains_value(BlockPos)){
            CubeType = "beacon";
        }
        if(g`%player%_CubeListThrower`.list_contains_value(BlockPos)){
            CubeType = "thrower";
        }
        if(g`%player%_CubeListHeavy`.list_contains_value(BlockPos)){
            CubeType = "heavy";
        }
        if(g`%player%_CubeListRail`.list_contains_value(BlockPos)){
            CubeType = "rail";
        }
        code::call_function("ButtonDeleteCube");
        code::call_function("CreateCube");
    }
}

event<redstone_level_change>{
    ActivatorPos = value::event_block_location;
    if(g`ActivatorList`.list_contains_value(ActivatorPos)){
        BlockType = ActivatorPos.get_block_material("ID_WITH_DATA");
        IsActive = 0;
        if(BlockType.text_contains("power=0")){
            IsActive = 1;
        }
        else{
            if(BlockType.text_contains("powered=false")){
                IsActive = 1;
            }
        }
        repeat::for_each_in_list(value_variable=LoadID, list=g`%var_local(ActivatorPos)_IDs`){
            ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
            if(g`%var_local(ActivatorID)_Type`.equals("platform")){
                code::call_function("ACT_Platform");
            }
            if(g`%var_local(ActivatorID)_Type`.equals("bridge")){
                code::call_function("ACT_Bridge");
            }
            if(g`%var_local(ActivatorID)_Type`.equals("reflector")){
                code::call_function("ACT_Reflector");
            }
            if(g`%var_local(ActivatorID)_Type`.equals("lpad")){
                code::call_function("ACT_LPAD");
            }
            if(g`%var_local(ActivatorID)_Type`.equals("mplat")){
                code::call_function(p"ACT_MPlat");
            }
            if(g`%var_local(ActivatorID)_Type`.equals("fan")){
                code::call_function("ACT_Fan");
            }
            if(g`%var_local(ActivatorID)_Type`.equals("ball")){
                code::call_function(p"ACT_Ball");
            }
            if(g`%var_local(ActivatorID)_Type`.equals("ecore")){
                code::call_function(p"ACT_ECore");
            }
        }
    }
}

function ACT_Platform{
    if(g`%var_local(ActivatorID)_DefaultState`.equals(0)){
        if(IsActive.equals(1)){
            world::clone_region(g`%var_local(ActivatorID)_CopyCorner1`, g`%var_local(ActivatorID)_CopyCorner2`, g`%var_local(ActivatorID)_CopyPos`, g`%var_local(ActivatorID)_PastePos`, copy_entity="FALSE");
            player::play_sound(sound("minecraft:block.piston.extend", 1, 1, "MASTER"), g`%var_local(ActivatorID)_PastePos`);
            MechEntTP_Args = [g`%var_local(ActivatorID)_MoveHeight`, g`%var_local(ActivatorID)_AreaCorner1`, g`%var_local(ActivatorID)_AreaCorner2`];
            code::call_function(p"MechEntTP");
        }
        else{
            world::clear_region(g`%var_local(ActivatorID)_AreaCorner1`, g`%var_local(ActivatorID)_AreaCorner2`);
            player::play_sound(sound("minecraft:block.piston.contract", 1, 1, "MASTER"), g`%var_local(ActivatorID)_PastePos`);
        }
    }
    else{
        if(IsActive.equals(1)){
            world::clear_region(g`%var_local(ActivatorID)_AreaCorner1`, g`%var_local(ActivatorID)_AreaCorner2`);
            player::play_sound(sound("minecraft:block.piston.contract", 1, 1, "MASTER"), g`%var_local(ActivatorID)_PastePos`);
        }
        else{
            world::clone_region(g`%var_local(ActivatorID)_CopyCorner1`, g`%var_local(ActivatorID)_CopyCorner2`, g`%var_local(ActivatorID)_CopyPos`, g`%var_local(ActivatorID)_PastePos`, copy_entity="FALSE");
            player::play_sound(sound("minecraft:block.piston.extend", 1, 1, "MASTER"), g`%var_local(ActivatorID)_PastePos`);
            MechEntTP_Args = [g`%var_local(ActivatorID)_MoveHeight`, g`%var_local(ActivatorID)_AreaCorner1`, g`%var_local(ActivatorID)_AreaCorner2`];
            code::call_function(p"MechEntTP");
        }
    }
}

function ACT_Bridge{
    if(IsActive.equals(1)){
        world::set_region("iron_trapdoor[half=top]", g`%var_local(ActivatorID)_SetCorner1`, g`%var_local(ActivatorID)_SetCorner2`);
        player::play_sound(sound("minecraft:block.piston.extend", 1, 2, "MASTER"), g`%var_local(ActivatorID)_SetCorner1`);
        player::play_sound(sound("minecraft:block.piston.extend", 1, 2, "MASTER"), g`%var_local(ActivatorID)_SetCorner2`);
    }
    else{
        world::clear_region(g`%var_local(ActivatorID)_SetCorner1`, g`%var_local(ActivatorID)_SetCorner2`);
        player::play_sound(sound("minecraft:block.piston.contract", 1, 2, "MASTER"), g`%var_local(ActivatorID)_SetCorner1`);
        player::play_sound(sound("minecraft:block.piston.contract", 1, 2, "MASTER"), g`%var_local(ActivatorID)_SetCorner2`);
    }
}

function ACT_Reflector{
    if(IsActive.equals(1)){
        Type = variable::set_text(["jack_o_lantern[facing=", g`%var_local(ActivatorID)_ActiveFacing`, "]"], "CONCATENATION");
        world::set_block(g`%var_local(ActivatorID)_BlockPos`, Type);
        player::play_sound(sound("minecraft:block.piston.extend", 1, 2, "MASTER"), g`%var_local(ActivatorID)_BlockPos`);
    }
    else{
        Type = variable::set_text(["jack_o_lantern[facing=", g`%var_local(ActivatorID)_DefaultFacing`, "]"], "CONCATENATION");
        world::set_block(g`%var_local(ActivatorID)_BlockPos`, Type);
        player::play_sound(sound("minecraft:block.piston.contract", 1, 2, "MASTER"), g`%var_local(ActivatorID)_BlockPos`);
    }
}

function ACT_LPAD{
    if(IsActive.equals(1)){
        CurrentID = variable::set_text([g`%var_local(ActivatorID)_Lvl`, "*", LoadID], "CONCATENATION");
        code::start_process("ActivateLPAD", "COPY");
    }
}

function Lvl_UNLOAD{
    error_type = "unload";
    controller::catch_exception(error, "ERROR"){
        IsNeedUnload = 0;
        if(g`LvlPlayerList_%var_local(CurrentLevel)`.equals(0)){
            IsNeedUnload = 1;
        }
        else{
            g`LvlPlayerList_%var_local(CurrentLevel)` = g`LvlPlayerList_%var_local(CurrentLevel)`.remove_list_value(p"%player%", "ALL");
            if(g`LvlPlayerList_%var_local(CurrentLevel)`.list_is_empty()){
                IsNeedUnload = 1;
            }
        }
        code::call_function(p"UnloadPrtls");
        code::call_function(p"ClearRoomCubes");
        code::call_function(p"UNLOAD_Spider");
        code::call_function(p"UNLOAD_Boss");
        if(IsNeedUnload.equals(1)){
            code::call_function(p"Lvl_UNLOAD2");
            if(g`LvlActivatorList_%var_local(CurrentLevel)`.not_equals(0)){
                repeat::for_each_in_list(value_variable=ActivatorPos, list=g`LvlActivatorList_%var_local(CurrentLevel)`){
                    g`ActivatorList` = g`ActivatorList`.remove_list_value(ActivatorPos);
                    repeat::for_each_in_list(value_variable=LoadID, list=g`%var_local(ActivatorPos)_IDs`){
                        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
                        variable::purge(ActivatorID, match="NAME_CONTAINS");
                    }
                    variable::purge("%var_local(ActivatorPos)_IDs");
                }
                variable::purge("LvlActivatorList_%var_local(CurrentLevel)");
            }
            if(CurrentLevel.equals(21)){
                world::set_block(location(-22.5, 45.5, 15.5, 0, 0), "minecraft:structure_void", "TRUE");
            }
            variable::purge("%var_local(CurrentLevel)_LvlHas", match="STARTS_WITH");
            variable::purge(p"LvlPlayerList_%var_local(CurrentLevel)", match="EQUALS");
        }
        code::call_function(p"Lvl_UNLOAD3");
    }
    code::call_function("LogError");
}

function UNLOAD_Laser{
    if(g`%var_local(CurrentLevel)_LvlHasLaser`.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("laser*%var_local(CurrentLevel)*"));
        if(value::selection_size.greater("0.0")){
            variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
            entity::remove();
        }
        select::reset();
    }
}

function UNLOAD_LaserB{
    if(g`LvlLaserBlockList_%var_local(CurrentLevel)`.not_equals(0)){
        repeat::for_each_in_list(value_variable=RememberPos, list=g`LvlLaserBlockList_%var_local(CurrentLevel)`){
            code::call_function(p"WAIT");
            if(world::block_equals("minecraft:redstone_block", RememberPos)){
                world::set_block(RememberPos, "minecraft:red_terracotta", "TRUE");
            }
        }
        code::call_function("LaserReload");
        if(IsNeedUnload.equals(1)){
            variable::purge("LvlLaserBlockList_%var_local(CurrentLevel)");
        }
    }
}

function UNLOAD_LPAD{
    if(g`%var_local(CurrentLevel)_LvlHasLPAD`.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("lpad*%var_local(CurrentLevel)*"));
        if(value::selection_size.greater("0.0")){
            repeat::for_each_in_list(value_variable=LPADName, list=value::selection_target_names){
                code::call_function(p"WAIT");
                LPADNameList = LPADName.split_text("*");
                LPADLocalID = LPADNameList.get_list_value(2);
                VarNames = variable::get_list_variables();
                repeat::for_each_in_list(value_variable=VarName, list=VarNames){
                    code::call_function(p"WAIT");
                    if(VarName.text_starts_with("%var_local(CurrentLevel)*%var_local(LPADLocalID)_LPAD")){
                        variable::purge(VarName);
                    }
                }
            }
            entity::remove();
        }
        select::reset();
    }
}

function LOAD_MPlat{
    g`%var_local(NextLevel)_LvlHasMPlat` = 1;
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "mplat";
        PointList = DataList.get_list_value(2);
        g`%var_local(ActivatorID)_Speed` = DataList.get_list_value(3);
        g`%var_local(ActivatorID)_PlatType` = DataList.get_list_value(4);
        g`%var_local(ActivatorID)_ActivationType` = DataList.get_list_value(5, "pulse");
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        PointList = PointList.split_text("*");
        g`%var_local(ActivatorID)_PointList` = [];
        PrevPointPos = 0;
        repeat::for_each_in_list(value_variable=PointPos, list=PointList){
            PointPos = PointPos.shift_coordinate(0);
            g`%var_local(ActivatorID)_PointList`.append_value(PointPos);
            code::call_function(p"LOAD_MPlat2");
        }
        EntityID = variable::set_text([NextLevel, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Level` = NextLevel;
        code::call_function(p"SpawnMPlat");
        LoadID = variable::add([LoadID, 1]);
    }
}

function LOAD_MPlat2{
    if(PrevPointPos.not_equals(0)){
        ClearCorner_1 = PrevPointPos.shift_all_coordinates(-1, z=-1);
        ClearCorner_2 = PointPos.shift_all_coordinates(1, z=1);
        world::clear_region(ClearCorner_1, ClearCorner_2);
    }
    PrevPointPos = PointPos;
}

function UNLOAD_MPlat{
    if(g`%var_local(CurrentLevel)_LvlHasMPlat`.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("mplat*%var_local(CurrentLevel)*"));
        if(value::selection_size.greater("0.0")){
            entity::remove();
        }
        select::reset();
    }
}

function ACT_MPlat{
    if(IsActive.equals(1)){
        if(g`%var_local(ActivatorID)_ActivationType`.not_equals("always")){
            if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
                g`%var_local(ActivatorID)_IsActive` = 1;
                if(g`%var_local(ActivatorID)_CurrentPointList`.equals(0)){
                    g`%var_local(ActivatorID)_CurrentPointList` = g`%var_local(ActivatorID)_PointList`;
                }
                code::start_process(p"MoveMPlat", "COPY", "NO_TARGET");
            }
        }
    }
    else{
        if(g`%var_local(ActivatorID)_ActivationType`.equals("while")){
            if(g`%var_local(ActivatorID)_IsActive`.equals(1)){
                g`%var_local(ActivatorID)_IsActive` = 0;
            }
        }
    }
}

function SpawnMPlat{
    SpawnPos = g`%var_local(ActivatorID)_PointList`.get_list_value(0);
    SetCorner_1 = SpawnPos.shift_all_coordinates(-1, z=-1);
    SetCorner_2 = SpawnPos.shift_all_coordinates(1, z=1);
    world::set_region("minecraft:barrier", SetCorner_1, SetCorner_2);
    g`%var_local(ActivatorID)_BarrierCorner1` = SetCorner_1;
    g`%var_local(ActivatorID)_BarrierCorner2` = SetCorner_2;
    g`%var_local(ActivatorID)_LastIndex` = 0;
    StandName = variable::set_text(["mplat*", EntityID, "*stand*%random_uuid%"], "CONCATENATION");
    TEMP = SpawnPos.get_block_material();
    world::spawn_armor_stand("AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", SpawnPos, StandName, marker="TRUE", show_arms="FALSE", invisible="TRUE");
    select::last_entity();
    g`%var_local(ActivatorID)_StandUUID` = value::uuid<current>;
    entity::set_custom_name_visibility("FALSE");
    DisplayName = variable::set_text(["mplat*", EntityID, "*display*%random_uuid%"], "CONCATENATION");
    world::spawn_item_display(SpawnPos, DisplayName, "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+houANKJ1lzo5kYd8i+/J/Ag1Tz4wDBhzvwcIjtZ6pwGnaY5sjzjVrkhZmu+ZG9c9CeQ0YhYsagI2DE9Y3Nal1h8vfl6Ubq6+Mqfi4zg/YzYXB+vgNb/jxAV9W87J8AAAA");
    select::last_entity();
    g`%var_local(ActivatorID)_DisplayUUID` = value::uuid<current>;
    entity::set_display_brightness(15, 15);
    entity::ride_entity(g`%var_local(ActivatorID)_StandUUID`);
    select::reset();
    if(g`%var_local(ActivatorID)_ActivationType`.equals("while")){
        BlockType = ActivatorPos.get_block_material("ID_WITH_DATA");
        if not (BlockType.text_contains("power=0")){
            g`%var_local(ActivatorID)_IsActive` = 1;
            g`%var_local(ActivatorID)_CurrentPointList` = g`%var_local(ActivatorID)_PointList`;
            code::start_process(p"MoveMPlat", "COPY", "NO_TARGET");
        }
    }
    if(g`%var_local(ActivatorID)_ActivationType`.equals("always")){
        g`%var_local(ActivatorID)_IsActive` = 1;
        g`%var_local(ActivatorID)_CurrentPointList` = g`%var_local(ActivatorID)_PointList`;
        code::start_process(p"MoveMPlat", "COPY", "NO_TARGET");
    }
}

process MoveMPlat{
    code::call_function("MoveMPlatCheck");
    PointListSize = g`%var_local(ActivatorID)_CurrentPointList`.get_list_length();
    SelectTick = 3;
    repeat::on_range(StartIndex, g`%var_local(ActivatorID)_LastIndex`, "%math(%var_local(PointListSize)-2)", 1){
        if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
            code::break();
        }
        g`%var_local(ActivatorID)_LastIndex` = StartIndex;
        StartPos = g`%var_local(ActivatorID)_CurrentPointList`.get_list_value(StartIndex);
        EndPos = g`%var_local(ActivatorID)_CurrentPointList`.get_list_value("%math(%var_local(StartIndex)+1)");
        Dir = variable::get_vector_between_locations(StartPos, EndPos);
        FinalDist = Dir.get_vector_length();
        StepVect = Dir.set_vector_length(g`%var_local(ActivatorID)_Speed`);
        select::entity_by_name(g`%var_local(ActivatorID)_StandUUID`);
        PrevPos = value::location<current>.align_location();
        PrevPos = PrevPos.set_location_direction(Dir);
        NextCenter = PrevPos.shift_location_in_direction(1);
        PrevSpeed = g`%var_local(ActivatorID)_Speed`;
        CurrentDist = 0;
        repeat::while(CurrentDist.less(FinalDist)){
            code::call_function("WAIT");
            if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
                code::break();
            }
            CurrentPos = value::location<current>;
            Sound = variable::random([sound("minecraft:block.barrel.open", 0.25, 0.5, "MASTER"), sound("minecraft:block.barrel.open", 0.25, 0.75, "MASTER")]);
            player::play_sound(Sound, CurrentPos);
            code::start_process(p"MoveEntsMPlat", "COPY", "NO_TARGET");
            NextCenterDist = variable::locations_distance(CurrentPos, NextCenter);
            if(NextCenterDist.less(0.5)){
                code::call_function(p"MoveBlocksMPlat");
            }
            code::call_function("MoveMPlat2");
            code::wait(2);
        }

        entity::teleport(EndPos);
        code::wait(10);
    }
    code::call_function("MoveEndMPlat");
}

function MoveBlocksMPlat{
    SetCorner1 = PrevPos.shift_location_in_direction(2);
    SetCorner1 = SetCorner1.shift_location_in_direction(1, "SIDEWAYS");
    SetCorner2 = SetCorner1.shift_location_in_direction(-2, "SIDEWAYS");
    ClearCorner1 = SetCorner1.shift_location_in_direction(-3);
    ClearCorner2 = SetCorner2.shift_location_in_direction(-3);
    if not (world::block_equals(["air", "barrier"], SetCorner1)){
        code::break();
    }
    if not (world::block_equals(["air", "barrier"], SetCorner2)){
        code::break();
    }
    world::set_region("minecraft:barrier", SetCorner1, SetCorner2);
    world::clear_region(ClearCorner1, ClearCorner2);
    PrevPos = PrevPos.shift_location_in_direction(1);
    NextCenter = NextCenter.shift_location_in_direction(1);
    g`%var_local(ActivatorID)_BarrierCorner1` = SetCorner1;
    g`%var_local(ActivatorID)_BarrierCorner2` = SetCorner2;
}

process MoveEntsMPlat{
    SelectCorner_1 = CurrentPos.shift_all_coordinates(-1.5, -0.5, -1.5);
    SelectCorner_2 = CurrentPos.shift_all_coordinates(1.5, 2, 1.5);
    CurrentY = CurrentPos.get_coordinate("Y");
    CurrentY = variable::add([CurrentY, 0.5]);
    if(SelectTick.equals(3)){
        select::player_by_name(g`LvlPlayerList_%var(%var_local(ActivatorID)_Level)`);
        select::filter_by_conditional(player::in_area(SelectCorner_1, SelectCorner_2, "FALSE", "HITBOX"));
        g`%var_local(ActivatorID)_AreaPlayers` = value::selection_target_uuids;
    }
    else{
        select::player_by_name(g`%var_local(ActivatorID)_AreaPlayers`);
    }
    if(value::selection_size.greater(0)){
        MoveEntType = "player";
        code::start_process(p"MoveOneEntMPlat", "COPY", "FOR_EACH_IN_SELECTION");
    }
    if(SelectTick.equals(3)){
        select::entity_by_name(g`LvlCubeList_%var(%var_local(ActivatorID)_Level)`);
        select::filter_by_conditional(entity::in_area(SelectCorner_1, SelectCorner_2, "FALSE", "HITBOX"));
        g`%var_local(ActivatorID)_AreaEntities` = value::selection_target_uuids;
    }
    else{
        select::entity_by_name(g`%var_local(ActivatorID)_AreaEntities`);
    }
    if(value::selection_size.greater("0.0")){
        MoveEntType = "cube";
        code::start_process(p"MoveOneEntMPlat", "COPY", "FOR_EACH_IN_SELECTION");
    }
    if(g`%var_local(ActivatorID)_Level`.equals(25)){
        if(g`%var_local(ActivatorID)_PlatType`.equals("fall")){
            select::entity_by_conditional(value::name<victim_entity>.text_starts_with("fitem*stand*"));
            select::filter_by_conditional(entity::in_area(SelectCorner_1, SelectCorner_2, "FALSE", "HITBOX"));
            if(value::selection_size.greater("0.0")){
                MoveEntType = "fitem";
                code::start_process(p"MoveOneEntMPlat", "COPY", "FOR_EACH_IN_SELECTION");
            }
        }
    }
}

process MoveOneEntMPlat{
    if(MoveEntType.equals("cube")){
        StandUUID = value::uuid<default>;
        if(g`%var_local(StandUUID)_IsPicked`.equals(1)){
            code::break();
        }
        if(g`%var_local(StandUUID)_IsBeingThrowed`.equals(1)){
            code::break();
        }
    }
    NextPos = value::location<default>.shift_location_on_vector(StepVect);
    NextY = NextPos.get_coordinate("Y");
    if(NextY.less(CurrentY)){
        NextY = CurrentY;
        NextPos = NextPos.set_coordinate(NextY, "Y");
    }
    TestPos = NextPos.shift_location_on_vector(StepVect, value::entity_width_x<default>);
    if not (world::block_equals(["air", "light", "structure_void", "glow_lichen", "nether_portal", "rail", "activator_rail"], TestPos)){
        NextPos = NextPos.shift_location_towards_location(CurrentPos, value::entity_width_x<default>);
        NextPos = NextPos.set_coordinate(NextY, "Y");
    }
    if(MoveEntType.equals("player")){
        g`%player%_MPlatMoving` = 4;
        g`%player%_LastMPlatID` = ActivatorID;
        player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
        player::teleport(NextPos, keep_velocity="TRUE");
        player::give_potion_effect(potion("minecraft:slow_falling", 9, 6), "FALSE", "FALSE", "NONE");
        PlActualDist = variable::locations_distance(value::location<default>, NextPos);
        if(PlActualDist.greater(value::entity_width_x<default>)){
            player::teleport(NextPos);
        }
    }
    if(MoveEntType.equals(["cube", "fitem"])){
        NextPos = NextPos.shift_coordinate(0.02, "Y");
        g`%var_local(StandUUID)_MPlatMoving` = 4;
        entity::teleport(NextPos);
        player::give_potion_effect(potion("minecraft:slow_falling", 9, 6), "FALSE", "FALSE", "NONE");
    }
}

function MoveMPlat2{
    DistToEnd = variable::locations_distance(CurrentPos, EndPos);
    if(DistToEnd.less(g`%var_local(ActivatorID)_Speed`)){
        code::stop_repeat();
    }
    NextPos = CurrentPos.shift_location_on_vector(StepVect);
    entity::teleport(NextPos);
    if(SelectTick.equals(3)){
        SelectTick = 0;
    }
    SelectTick = variable::add([SelectTick, 1]);
    if(g`%var_local(ActivatorID)_Speed`.not_equals(PrevSpeed)){
        StepVect = Dir.set_vector_length(g`%var_local(ActivatorID)_Speed`);
    }
    PrevSpeed = g`%var_local(ActivatorID)_Speed`;
    CurrentDist = variable::add([CurrentDist, PrevSpeed]);
}

function MoveEndMPlat{
    if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
        code::break();
    }
    if(g`%var_local(ActivatorID)_PlatType`.equals("round")){
        g`%var_local(ActivatorID)_Stage` = 1;
    }
    if(g`%var_local(ActivatorID)_Stage`.equals(0)){
        g`%var_local(ActivatorID)_Stage` = 1;
        g`%var_local(ActivatorID)_LastIndex` = 0;
        g`%var_local(ActivatorID)_CurrentPointList` = g`%var_local(ActivatorID)_CurrentPointList`.reverse_list();
        if(g`%var_local(ActivatorID)_PlatType`.equals("fall")){
            code::call_function("KillFallItem");
            code::call_function(p"FallAnimMPlat");
        }
        code::wait(60);
        code::start_process(p"MoveMPlat", "COPY", "NO_TARGET");
    }
    else{
        g`%var_local(ActivatorID)_Stage` = 0;
        g`%var_local(ActivatorID)_LastIndex` = 0;
        if(g`%var_local(ActivatorID)_ActivationType`.equals("pulse")){
            g`%var_local(ActivatorID)_IsActive` = 0;
            g`%var_local(ActivatorID)_CurrentPointList` = 0;
        }
        if(g`%var_local(ActivatorID)_ActivationType`.equals("while")){
            code::wait(60);
            if(g`%var_local(ActivatorID)_IsActive`.equals(1)){
                BlockType = ActivatorPos.get_block_material("ID_WITH_DATA");
                if not (BlockType.text_contains("power=0")){
                    g`%var_local(ActivatorID)_CurrentPointList` = g`%var_local(ActivatorID)_PointList`;
                    code::start_process(p"MoveMPlat", "COPY", "NO_TARGET");
                }
                else{
                    g`%var_local(ActivatorID)_IsActive` = 0;
                    g`%var_local(ActivatorID)_CurrentPointList` = 0;
                }
            }
            else{
                g`%var_local(ActivatorID)_CurrentPointList` = 0;
            }
        }
        code::call_function(p"MoveEndMPlat2");
    }
}

function MoveEndMPlat2{
    if(g`%var_local(ActivatorID)_ActivationType`.equals("always")){
        code::wait(60);
        if(g`%var_local(ActivatorID)_IsActive`.equals(1)){
            g`%var_local(ActivatorID)_CurrentPointList` = g`%var_local(ActivatorID)_PointList`;
            code::start_process(p"MoveMPlat", "COPY", "NO_TARGET");
        }
        else{
            g`%var_local(ActivatorID)_CurrentPointList` = 0;
        }
    }
}

function FallAnimMPlat{
    DirNorm = Dir.set_vector_length(1);
    SideVect = variable::vector_cross_product(DirNorm, vector(0, 1, 0));
    Corner_1 = EndPos.shift_all_coordinates(-1, z=-1);
    Corner_2 = EndPos.shift_all_coordinates(1, z=1);
    world::clear_region(Corner_1, Corner_2);
    select::entity_by_name(g`%var_local(ActivatorID)_DisplayUUID`);
    entity::set_display_interpolation(20, 0);
    entity::set_display_rotation_from_axis_angle(SideVect, -90, "ADD", "DEGREES", "LEFT_ROTATION");
    code::wait(60);
    entity::set_display_interpolation(20, 0);
    entity::set_display_rotation_from_axis_angle(SideVect, 90, "ADD", "DEGREES", "LEFT_ROTATION");
    world::set_region("minecraft:barrier", Corner_1, Corner_2);
}

event<entity_interact>{
    if not (world::event_is_canceled()){
        if(value::name<default_entity>.text_starts_with("lpad*")){
            BlockType = value::event_block_location.get_block_material();
            if(BlockType.equals(["heavy_weighted_pressure_plate", "oak_pressure_plate"])){
                world::cancel_event();
            }
            code::break();
        }
        EntityUUID = value::uuid<default_entity>;
        if(g`%var_local(EntityUUID)_EntityType`.text_starts_with("cube_")){
            BlockType = value::event_block_location.get_block_material();
            if(BlockType.equals("birch_pressure_plate")){
                if(g`%var_local(EntityUUID)_CubeType`.not_equals("rail")){
                    world::cancel_event();
                }
            }
            code::break();
        }
    }
}

event<player_chat>{
    if(player::has_privilege("WHITELISTED")){
        if(player::chat_message_equals("@testent")){
            select::all_entities();
            code::start_process(p"TESTENT", target_mode="FOR_EACH_IN_SELECTION");
        }
        if(player::chat_message_equals("@testkill")){
            select::all_entities();
            entity::remove();
            code::wait(1);
            code::start_process(p"TESTENT", target_mode="FOR_EACH_IN_SELECTION");
        }
    }
    if(player::chat_message_equals("@optifine on")){
        s`%player%_IsUsingOptifine` = 1;
        player::message(["&#abc4d6 Вы &aвключили &#abc4d6исправления при использовании &eOptifine&#abc4d6", "&#abc4d6 Если вы не используете &eOptifine&#abc4d6, выключите эту настройку", "&#abc4d6 Изменить это можно в настройках &8(@menu -> Настройки)"], "SEPARATE_LINES");
        player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
    }
    if(player::chat_message_equals("@optifine off")){
        s`%player%_IsUsingOptifine` = 0;
        player::message(["&#abc4d6 Вы &cвыключили &#abc4d6исправления при использовании &eOptifine&#abc4d6", "&#abc4d6 Если вы используете &eOptifine&#abc4d6, включите эту настройку", "&#abc4d6 Изменить это можно в настройках &8(@menu -> Настройки)"], "SEPARATE_LINES");
        player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
    }
}

process TESTENT{
    Name = variable::set_text(["&b", value::name<default>], "CONCATENATION");
    Type = variable::set_text(["&a", value::entity_type<default>], "CONCATENATION");
    UUID = variable::set_text(["&7", value::uuid<default>], "CONCATENATION");
    if(value::name<default>.equals(["save_", "portal_frame", "gravity_frame"])){
        Name = variable::set_text(["&8", value::name<default>], "CONCATENATION");
        Type = variable::set_text(["&8", value::entity_type<default>], "CONCATENATION");
        UUID = variable::set_text(["&8", value::uuid<default>], "CONCATENATION");
    }
    player::message([Name, Type, UUID]);
}

function LOAD_Sign{
    if(IsFirstLoad.equals(1)){
        SpawnPos = DataList.get_list_value(1);
        LevelName = DataList.get_list_value(2);
        CharsRow1 = DataList.get_list_value(3);
        CharsRow2 = DataList.get_list_value(4);
        SpawnPos = SpawnPos.shift_coordinate(0);
        EntityID = NextLevel;
        code::call_function(p"SpawnSign");
    }
}

function UNLOAD_Sign{
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("sign*%var_local(CurrentLevel)*"));
    if(value::selection_size.greater("0.0")){
        entity::remove();
    }
    select::reset();
}

function SpawnSign{
    SpawnPos = SpawnPos.shift_location_in_direction(-0.49);
    SpawnPos = SpawnPos.shift_location_in_direction(0.15625, "SIDEWAYS");
    LevelName = variable::append_component([m"<font:mono><#c8be84>", LevelName], "CONCATENATION");
    CharsRow1 = variable::append_component([m"<font:mono2><#c8be84>", CharsRow1], "CONCATENATION");
    CharsRow2 = variable::append_component([m"<font:mono2><#c8be84>", CharsRow2], "CONCATENATION");
    Text = variable::append_component([m"", m"", LevelName, m"", m"", CharsRow1, CharsRow2, m""], "SEPARATE_LINES");
    Name = variable::set_text(["sign*", EntityID, "*%random_uuid%"], "CONCATENATION");
    TEMP = SpawnPos.get_block_material();
    world::spawn_text_display(SpawnPos, Name, Text);
    select::last_entity();
    entity::set_text_display_background("#000000", 0);
    entity::set_text_display_text_shadow("FALSE");
    entity::set_display_scale(vector(2.5, 2.5, 1));
    select::reset();
}

function LOAD_Fan{
    g`%var_local(NextLevel)_LvlHasFan` = 1;
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "fan";
        g`%var_local(ActivatorID)_SpawnPos` = DataList.get_list_value(2);
        g`%var_local(ActivatorID)_FanType` = DataList.get_list_value(3);
        g`%var_local(ActivatorID)_ActivationType` = DataList.get_list_value(4);
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        g`%var_local(ActivatorID)_SpawnPos` = g`%var_local(ActivatorID)_SpawnPos`.shift_coordinate(0);
        g`%var_local(ActivatorID)_EntityLevel` = NextLevel;
        EntityID = variable::set_text([NextLevel, "*", LoadID], "CONCATENATION");
        code::call_function(p"SpawnFan");
        LoadID = variable::add([LoadID, 1]);
    }
}

function UNLOAD_Fan{
    if(g`%var_local(CurrentLevel)_LvlHasFan`.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("fan*%var_local(CurrentLevel)*"));
        if(value::selection_size.greater("0.0")){
            variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
            entity::remove();
        }
        select::reset();
    }
}

function ACT_Fan{
    if(IsActive.equals(1)){
        if(g`%var_local(ActivatorID)_ActivationType`.not_equals("always")){
            if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
                g`%var_local(ActivatorID)_IsActive` = 1;
                select::entity_by_name(g`%var_local(ActivatorID)_FanUUID`);
                entity::set_item_in_frame("H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YerQMyC2yEpSyZITV7WzcHroxNu/F4AB15mcXmUz1gbc3mccOeNeuZW00eJPoZUtCn268IAxaW8O4BAQktZVW2luAY+/SN1ca6yai8T8219wWkTJbdzhNGHvC/2wbgl+AAAA");
                select::reset();
                code::start_process("FanLOOP", "COPY", "NO_TARGET");
            }
        }
    }
    else{
        if(g`%var_local(ActivatorID)_ActivationType`.equals("while")){
            if(g`%var_local(ActivatorID)_IsActive`.equals(1)){
                g`%var_local(ActivatorID)_IsActive` = 0;
                select::entity_by_name(g`%var_local(ActivatorID)_FanUUID`);
                entity::set_item_in_frame("H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YWLoGRBbZCWpZMmJq9pZmDg6dOLt3wvAgPNETs+yGmsDLq8j9pxxrdxKWmn2u9DCFoXeXXjAmLQ3B7ALCEnroq00t4DbX6RurjVWzUVi/u1POMyi5DZu8PHB1hdJroYYfgAAAA==");
                select::reset();
            }
        }
    }
}

function SpawnFan{
    Name = variable::set_text(["fan*", EntityID, "*%random_uuid%"], "CONCATENATION");
    Dir = g`%var_local(ActivatorID)_SpawnPos`.get_location_direction();
    Dir = Dir.align_to_axis_vector();
    g`%var_local(ActivatorID)_SpawnPos` = g`%var_local(ActivatorID)_SpawnPos`.set_coordinate(0, "YAW");
    g`%var_local(ActivatorID)_SpawnPos` = g`%var_local(ActivatorID)_SpawnPos`.set_coordinate(0, "PITCH");
    g`%var_local(ActivatorID)_SpawnPos` = g`%var_local(ActivatorID)_SpawnPos`.set_location_direction(Dir);
    TEMP = g`%var_local(ActivatorID)_SpawnPos`.get_block_material();
    world::spawn_mob("H4sIAAAAAAAA/32OSQrCUBBEK2pE40pwWHgTVy5E8ALi7tMmHWn4Q8jvOJ3GoxoHyM5eVr9XVAb0MdmS0oHrKMED0+MIPSmwdOI5r6nU9YnUxIqu3vD53Eeah8YrgCRDlgdXBc9eY4Z5p7SB6N0UbXOCdCc3LpJv76yDRNmZsibHCcZ7f5EoJ8tt62Dffr74osMtVRKNpUdj5c+KVWfkTdTgjAsF28+WMYalDaQxfYubJ373AoMZ1PsIAQAA", g`%var_local(ActivatorID)_SpawnPos`, custom_name=Name, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    select::last_entity();
    g`%var_local(ActivatorID)_FanUUID` = value::uuid<current>;
    entity::set_custom_name(Name);
    entity::set_silenced();
    if(g`%var_local(ActivatorID)_ActivationType`.equals("while")){
        BlockType = ActivatorPos.get_block_material("ID_WITH_DATA");
        if not (BlockType.text_contains("power=0")){
            g`%var_local(ActivatorID)_IsActive` = 1;
            entity::set_item_in_frame("H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YerQMyC2yEpSyZITV7WzcHroxNu/F4AB15mcXmUz1gbc3mccOeNeuZW00eJPoZUtCn268IAxaW8O4BAQktZVW2luAY+/SN1ca6yai8T8219wWkTJbdzhNGHvC/2wbgl+AAAA");
            code::start_process("FanLOOP", "COPY", "NO_TARGET");
        }
    }
    if(g`%var_local(ActivatorID)_ActivationType`.equals("always")){
        g`%var_local(ActivatorID)_IsActive` = 1;
        entity::set_item_in_frame("H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YerQMyC2yEpSyZITV7WzcHroxNu/F4AB15mcXmUz1gbc3mccOeNeuZW00eJPoZUtCn268IAxaW8O4BAQktZVW2luAY+/SN1ca6yai8T8219wWkTJbdzhNGHvC/2wbgl+AAAA");
        code::start_process("FanLOOP", "COPY", "NO_TARGET");
    }
    select::reset();
}

process FanLOOP{
    Angle = 360;
    SelectTick = 3;
    PrtlCheckTick = 6;
    repeat::forever(){
        code::call_function("WAIT");
        if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
            code::break();
        }
        RayCount = 2;
        StartPos = g`%var_local(ActivatorID)_SpawnPos`.shift_location_in_direction(-0.49);
        if(SelectTick.equals(3)){
            select::player_by_name(g`LvlPlayerList_%var(%var_local(ActivatorID)_EntityLevel)`);
            LevelPlayers = value::selection_target_uuids;
        }
        else{
            select::player_by_name(LevelPlayers);
        }
        if(value::selection_size.greater(0)){
            player::play_sound_sequence([sound("minecraft:entity.cow.ambient", 1, 1.2, "say2", "MASTER"), sound("minecraft:entity.breeze.slide", 1, 0.75, "MASTER")], StartPos, 0);
        }
        code::call_function("FanRaycast");
        Angle = variable::subtract([Angle, 10]);
        if(Angle.less_or_equals(0)){
            Angle = 360;
        }
        if(SelectTick.equals(3)){
            SelectTick = 0;
        }
        SelectTick = variable::add([SelectTick, 1]);
        if(PrtlCheckTick.equals(6)){
            PrtlCheckTick = 0;
        }
        PrtlCheckTick = variable::add([PrtlCheckTick, 1]);
        code::wait(2);
    }
}

function FanRaycast{
    if(RayCount.greater(0)){
        code::call_function("WAIT");
        RayCount = variable::subtract([RayCount, 1]);
        Dir = StartPos.get_location_direction();
        EffectDir = variable::multiply_vector(Dir, 0.25);
        Effect = particle("CLOUD", 1, 0, 0, 0, 0, 0).set_particle_offset(EffectDir);
        ParticleSpawn = StartPos.shift_location_in_direction(-0.8);
        EndPos, EndBlock = variable::ray_trace_result(start=StartPos, max_distance=64);
        if(EndPos.equals(0)){
            EndPos = StartPos.shift_location_in_direction(64);
        }
        Dist = variable::locations_distance(StartPos, EndPos);
        Dist = variable::subtract([Dist, 3.2]);
        ParticleCount = "%math((%var_local(Dist)*10)/8)".round();
        SpiralCount = "%math((%var_local(Dist)*4)/8)".round();
        select::player_by_name(LevelPlayers);
        if(value::selection_size.greater(0)){
            player::display_particle_spiral(Effect, ParticleSpawn, Dist, 1, ParticleCount, SpiralCount, Angle);
            code::call_function("FanMoveEnts");
        }
        if(g`%var_local(ActivatorID)_FanType`.equals("portal")){
            if(RayCount.greater(0)){
                if(EndBlock.not_equals(0)){
                    code::call_function(p"FanPrtlChoose");
                    code::call_function(p"FanPrtlCollide");
                }
            }
        }
    }
}

function FanPrtlChoose{
    code::call_function("WAIT");
    if(PrtlCheckTick.equals(6)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("portal*"));
        if(value::selection_size.greater("0.0")){
            select::filter_by_distance(EndPos, "1", "FALSE");
            if(value::selection_size.greater("0.0")){
                l`%var_local(RayCount)_PortalUUID` = value::uuid<current>;
            }
        }
    }
}

function FanPrtlCollide{
    code::call_function("WAIT");
    select::entity_by_name(l`%var_local(RayCount)_PortalUUID`);
    if(value::selection_size.greater("0.0")){
        DistToPrtl = variable::locations_distance(EndPos, value::location<current>);
        if(DistToPrtl.less_or_equals("2.0")){
            PrtlNameList = value::name<current>.split_text("*");
            PrtlOwner = PrtlNameList.get_list_value("1");
            if(g`PrtlIsLinked*portal*%var_local(PrtlOwner)*%selected_uuid%`.equals("1")){
                PortalCorner_1 = g`PrtlCorner_1*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                PortalCorner_2 = g`PrtlCorner_2*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                if(EndPos.in_range(PortalCorner_1, PortalCorner_2)){
                    PrtlNormalVect = g`PrtlNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlCenterPos = g`PrtlCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlDirVect = g`PrtlDirVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlLinkedNormalVect = g`PrtlLinkedNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlLinkedCenterPos = g`PrtlLinkedCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlLinkedDirVect = g`PrtlLinkedDirVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    code::call_function(p"FanPrtlTeleport");
                }
            }
        }
    }
}

function FanPrtlTeleport{
    PrtlShiftedTopPos = PrtlCenterPos.shift_location_on_vector(PrtlDirVect, 0.5);
    PrtlShiftedLowPos = PrtlCenterPos.shift_location_on_vector(PrtlDirVect, -0.5);
    PrtlDistToTop = variable::locations_distance(EndPos, PrtlShiftedTopPos);
    PrtlDistToLow = variable::locations_distance(EndPos, PrtlShiftedLowPos);
    if(PrtlDistToTop.less(PrtlDistToLow)){
        PrtlShiftedLinkedDir = variable::multiply_vector(PrtlLinkedDirVect, 0.5);
    }
    else{
        PrtlShiftedLinkedDir = variable::multiply_vector(PrtlLinkedDirVect, -0.5);
    }
    StartPos = PrtlLinkedCenterPos.shift_location_on_vector(PrtlShiftedLinkedDir);
    StartPos = StartPos.align_location();
    StartPos = StartPos.set_location_direction(PrtlLinkedNormalVect);
    StartPos = StartPos.shift_location_in_direction(-0.49);
    code::call_function(p"FanRaycast");
}

function FanMoveEnts{
    if(Dir.not_equals([vector(0, 1, 0), vector(0, -1, 0)])){
        UpVector = vector(0, 1, 0);
        SideVector = variable::vector_cross_product(Dir, UpVector);
    }
    else{
        UpVector = vector(0, 0, 1);
        SideVector = variable::vector_cross_product(Dir, UpVector);
    }
    Corner_1 = StartPos.shift_location_on_vector(UpVector, -1);
    Corner_1 = Corner_1.shift_location_on_vector(SideVector, -1);
    Corner_2 = EndPos.shift_location_on_vector(UpVector, 1);
    Corner_2 = Corner_2.shift_location_on_vector(SideVector, 1);
    SelCorner_1 = Corner_1.shift_location_on_vector(UpVector, -1);
    SelCorner_1 = SelCorner_1.shift_location_on_vector(SideVector, -1);
    SelCorner_2 = Corner_2.shift_location_on_vector(UpVector, 1);
    SelCorner_2 = SelCorner_2.shift_location_on_vector(SideVector, 1);
    if(SelectTick.equals(3)){
        select::player_by_name(g`LvlPlayerList_%var(%var_local(ActivatorID)_EntityLevel)`);
        select::filter_by_conditional(player::in_area(SelCorner_1, SelCorner_2, "FALSE", "HITBOX"));
        l`AreaPlayers_%var_local(RayCount)` = value::selection_target_uuids;
    }
    else{
        select::player_by_name(l`AreaPlayers_%var_local(RayCount)`);
    }
    if(value::selection_size.greater(0)){
        code::start_process("FanMovePl", "COPY", "FOR_EACH_IN_SELECTION");
    }
    if(SelectTick.equals(3)){
        select::entity_by_name(g`LvlCubeList_%var(%var_local(ActivatorID)_EntityLevel)`);
        select::filter_by_conditional(entity::in_area(SelCorner_1, SelCorner_2, "FALSE", "HITBOX"));
        l`AreaEntities_%var_local(RayCount)` = value::selection_target_uuids;
    }
    else{
        select::entity_by_name(l`AreaEntities_%var_local(RayCount)`);
    }
    if(value::selection_size.greater(0)){
        code::start_process(p"FanMoveCube", "COPY", "FOR_EACH_IN_SELECTION");
    }
}

process FanMovePl{
    if(value::hitbox_midpoint_location<default>.location_in_range(Corner_1, Corner_2, "FULL_BLOCK_RANGE")){
        if(g`%player%_FlyTime`.equals(0)){
            player::launch_up(0.001, "FALSE");
            player::set_movement_speed(100, "FLY");
            player::set_flying();
        }
        player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
        player::give_potion_effect(potion("minecraft:slow_falling", 9, 6), "FALSE", "FALSE", "NONE");
        g`%player%_FlyTime` = 3;
        FlyDir = variable::get_vector_between_locations(value::hitbox_midpoint_location<default>, EndPos);
        FlySpeed = 0.02;
        if(Dir.equals([vector(0, 1, 0), vector(0, -1, 0)])){
            FlySpeed = variable::multiply([FlySpeed, 2]);
        }
        FlyDir = FlyDir.set_vector_length(FlySpeed);
        player::set_velocity(FlyDir);
    }
}

process FanMoveCube{
    if(value::hitbox_midpoint_location<default>.location_in_range(Corner_1, Corner_2, "FULL_BLOCK_RANGE")){
        StandUUID = value::uuid<default>;
        if(g`%var_local(StandUUID)_IsPicked`.equals(1)){
            code::break();
        }
        if(g`%var_local(StandUUID)_FlyTime`.equals(0)){
            g`%var_local(StandUUID)_FlyY` = value::y_coordinate<default>;
        }
        g`%var_local(StandUUID)_FlyTime` = 2;
        Pos = value::location<default>.set_coordinate(g`%var_local(StandUUID)_FlyY`, "Y");
        MidPoint = Pos.shift_coordinate(0.5, "Y");
        if(EndBlock.not_equals(0)){
            EndPos = EndBlock.align_location();
            if(Dir.equals([vector(0, 1, 0), vector(0, -1, 0)])){
                EndPos = EndPos.shift_location_on_vector(Dir, -1.1);
            }
            else{
                EndPos = EndPos.shift_location_on_vector(Dir, -1);
            }
        }
        FlyDir = variable::get_vector_between_locations(MidPoint, EndPos);
        FlyDir = FlyDir.set_vector_length(0.12);
        TestPos = Pos.shift_location_on_vector(FlyDir);
        g`%var_local(StandUUID)_FlyY` = TestPos.get_coordinate("Y");
        Pos = Pos.set_coordinate(g`%var_local(StandUUID)_FlyY`, "Y");
        entity::teleport(Pos);
        entity::set_location(FlyDir, "FALSE");
    }
}

event<player_stop_flight>{
    if(g`%player%_FlyTime`.not_equals(0)){
        world::cancel_event();
    }
}

function LaserInRayB{
    center = RayEndBlock.align_location();
    dir = RayStartPos.get_location_direction();
    dirx, diry, dirz = dir.get_vector_all_components();
    xplaneorig = 0;
    if(dirx.greater(0)){
        xplaneorig = center.shift_location_on_vector(vector(0.5, 0, 0));
        xn = vector(1, 0, 0);
    }
    else{
        xplaneorig = center.shift_location_on_vector(vector(-0.5, 0, 0));
        xn = vector(-1, 0, 0);
    }
    yplaneorig = 0;
    if(diry.greater(0)){
        yplaneorig = center.shift_location_on_vector(vector(0, 0.5, 0));
        yn = vector(0, 1, 0);
    }
    if(variable::is_dummy()){
        yplaneorig = center.shift_location_on_vector(vector(0, -0.5, 0));
        yn = vector(0, -1, 0);
    }
    zplaneorig = 0;
    if(dirz.greater(0)){
        zplaneorig = center.shift_location_on_vector(vector(0, 0, 0.5));
        zn = vector(0, 0, 1);
    }
    else{
        zplaneorig = center.shift_location_on_vector(vector(0, 0, -0.5));
        zn = vector(0, 0, -1);
    }
    code::call_function(p"LaserInRayB2");
}

function LaserInRayB2{
    lenx = 999;
    if(xplaneorig.not_equals(0)){
        denom = variable::vector_dot_product(xn, dir);
        if(denom.not_equals(0)){
            torayorigin = variable::get_vector_between_locations(RayEndPos, xplaneorig);
            lenx = variable::vector_dot_product(torayorigin, xn);
            lenx = variable::divide([lenx, denom]);
        }
    }
    leny = 999;
    if(yplaneorig.not_equals(0)){
        denom = variable::vector_dot_product(yn, dir);
        if(denom.not_equals(0)){
            torayorigin = variable::get_vector_between_locations(RayEndPos, yplaneorig);
            leny = variable::vector_dot_product(torayorigin, yn);
            leny = variable::divide([leny, denom]);
        }
    }
    lenz = 999;
    if(zplaneorig.not_equals(0)){
        denom = variable::vector_dot_product(zn, dir);
        if(denom.not_equals(0)){
            torayorigin = variable::get_vector_between_locations(RayEndPos, zplaneorig);
            lenz = variable::vector_dot_product(torayorigin, zn);
            lenz = variable::divide([lenz, denom]);
        }
    }
    len = variable::min([lenx, leny, lenz]);
    if(len.less(2)){
        len = variable::add([len, 0.05]);
        RayStartPos = RayEndPos.shift_location_on_vector(dir, len);
        RayStartPos = RayStartPos.set_location_direction(dir);
        IsNewRay = 1;
    }
}

function LaserInRayP{
    center = RayEndBlock.align_location();
    centerx, centery, centerz = center.get_all_coordinates();
    dir = RayStartPos.get_location_direction();
    dirx, diry, dirz = dir.get_vector_all_components();
    xplaneorig = 0;
    if(BlockSouth.equals("true")){
        if(dirx.greater(0)){
            xplaneorig = center.shift_location_on_vector(vector(0.0625, 0, 0));
            xn = vector(1, 0, 0);
        }
        else{
            xplaneorig = center.shift_location_on_vector(vector(-0.0625, 0, 0));
            xn = vector(-1, 0, 0);
        }
    }
    zplaneorig = 0;
    if(BlockEast.equals("true")){
        if(dirz.greater(0)){
            zplaneorig = center.shift_location_on_vector(vector(0, 0, 0.0625));
            zn = vector(0, 0, 1);
        }
        else{
            zplaneorig = center.shift_location_on_vector(vector(0, 0, -0.0625));
            zn = vector(0, 0, -1);
        }
    }
    code::call_function(p"LaserInRayP2");
}

function LaserInRayP2{
    lenx = 999;
    if(xplaneorig.not_equals(0)){
        denom = variable::vector_dot_product(xn, dir);
        if(denom.not_equals(0)){
            torayorigin = variable::get_vector_between_locations(RayEndPos, xplaneorig);
            lenx = variable::vector_dot_product(torayorigin, xn);
            lenx = variable::divide([lenx, denom]);
        }
    }
    lenz = 999;
    if(zplaneorig.not_equals(0)){
        denom = variable::vector_dot_product(zn, dir);
        if(denom.not_equals(0)){
            torayorigin = variable::get_vector_between_locations(RayEndPos, zplaneorig);
            lenz = variable::vector_dot_product(torayorigin, zn);
            lenz = variable::divide([lenz, denom]);
        }
    }
    len = variable::min([lenx, lenz]);
    if(len.less(2)){
        testpos = RayEndPos.shift_location_on_vector(dir, len);
        testx, testy, testz = testpos.get_all_coordinates();
        if("%math(abs(%var_local(testy)-%var_local(centery)))".less_or_equals(0.5)){
            continue = 0;
            if(BlockEast.equals("true")){
                if("%math(abs(%var_local(testx)-%var_local(centerx)))".less_or_equals(0.5)){
                    continue = 1;
                }
            }
            if(BlockSouth.equals("true")){
                if("%math(abs(%var_local(testz)-%var_local(centerz)))".less_or_equals(0.5)){
                    continue = 1;
                }
            }
            if(continue.equals(1)){
                RayStartPos = testpos;
                RayStartPos = RayStartPos.set_location_direction(dir);
                RayStartPos = RayStartPos.shift_location_in_direction(0.05);
                IsNewRay = 1;
            }
        }
    }
}

function LaserRelay{
    if(RayCount.less_or_equals(g`MAX_RAY_COUNT`)){
        if(RayUUID.equals("0")){
            if(BlockType.equals("beacon")){
                if(RayEndSide.not_equals(["up", "down"])){
                    BelowPos = RayEndBlock.shift_coordinate(-1, "Y");
                    BelowPosType = BelowPos.get_block_material();
                    if(l`%var_local(RayCount)_RelayPos`.not_equals(0)){
                        if(l`%var_local(RayCount)_RelayPos`.not_equals(BelowPos)){
                            code::call_function(p"LaserRelay2");
                        }
                    }
                    l`%var_local(RayCount)_RelayPos` = BelowPos;
                    if(BelowPosType.not_equals("redstone_block")){
                        world::set_block(BelowPos, "minecraft:redstone_block", "TRUE");
                    }
                    if(RelayLastIndex.less(RayCount)){
                        RelayLastIndex = RayCount;
                    }
                    code::call_function(p"LaserInRayB");
                    if(IsNewRay.equals(1)){
                        RayCount = variable::add([RayCount, 1]);
                    }
                }
            }
            else{
                if(RelayLastIndex.less_or_equals(RayCount)){
                    if(l`%var_local(RayCount)_RelayPos`.not_equals(0)){
                        code::call_function(p"LaserRelay2");
                    }
                }
            }
        }
        else{
            if(RelayLastIndex.less_or_equals(RayCount)){
                if(l`%var_local(RayCount)_RelayPos`.not_equals(0)){
                    code::call_function(p"LaserRelay2");
                }
            }
        }
    }
}

function LaserRelayClear{
    if(RelayLastIndex.greater(RayCount)){
        repeat::multi_times(amount=g`MAX_RAY_COUNT`){
            if(l`%var_local(RelayLastIndex)_RelayPos`.not_equals(0)){
                world::set_block(l`%var_local(RelayLastIndex)_RelayPos`, "minecraft:red_terracotta", "TRUE");
                l`%var_local(RelayLastIndex)_RelayPos` = 0;
            }
            RelayLastIndex = variable::subtract([RelayLastIndex, 1]);
            if(RelayLastIndex.less_or_equals(0)){
                code::stop_repeat();
            }
        }
    }
}

function LaserFilter{
    if(RayCount.less_or_equals(g`MAX_RAY_COUNT`)){
        if(RayUUID.equals("0")){
            if(BlockType.equals(["blue_stained_glass_pane", "orange_stained_glass_pane"])){
                if(RayEndSide.not_equals(["up", "down"])){
                    if(BlockType.text_starts_with(Color)){
                        BlockEast = RayEndBlock.get_block_data("east");
                        BlockSouth = RayEndBlock.get_block_data("south");
                        code::call_function(p"LaserInRayP");
                    }
                }
            }
            if(BlockType.equals(["blue_stained_glass", "orange_stained_glass"])){
                if(BlockType.text_starts_with(Color)){
                    code::call_function(p"LaserInRayB");
                }
            }
        }
    }
}

function LevelTPItems{
    if(g`%player%_GivePortalGun`.equals(1)){
        g`%player%_HasPortalGun` = "1";
        if(g`%player%_GiveGravityGun`.equals(0)){
            player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemPortalGunBlue`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
        else{
            player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemPortalGunBlue`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
    }
    if(g`%player%_GiveGravityGun`.equals(1)){
        g`%player%_HasGravityGun` = "1";
        if(g`%player%_GivePortalGun`.equals(0)){
            player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemGravityGun`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
        else{
            player::set_itemsg`ItemGravityGun`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
    }
}

function GiveGunItems{
    player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`]);
    if(g`%player%_HasPortalGun`.equals("1")){
        if(g`%player%_HasGravityGun`.equals(0)){
            player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemPortalGunBlue`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
        else{
            player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemPortalGunBlue`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
    }
    if(g`%player%_HasGravityGun`.equals("1")){
        if(g`%player%_HasPortalGun`.equals(0)){
            player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemGravityGun`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
        else{
            player::set_itemsg`ItemGravityGun`, "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="]);
        }
    }
}

function SelectedItem{
    SelectedItem = "none";
    if(g`%player%_HasPortalGun`.equals("1")){
        if(g`%player%_HasGravityGun`.equals(0)){
            if(value::held_slot<default>.equals(4)){
                SelectedItem = "portal_gun";
            }
        }
        else{
            if(value::held_slot<default>.equals(3)){
                SelectedItem = "portal_gun";
            }
        }
    }
    if(g`%player%_HasGravityGun`.equals("1")){
        if(g`%player%_HasPortalGun`.equals(0)){
            if(value::held_slot<default>.equals(4)){
                SelectedItem = "gravity_gun";
            }
        }
        else{
            if(value::held_slot<default>.equals(5)){
                SelectedItem = "gravity_gun";
            }
        }
    }
}

function PlClearField{
    PosBlockType = CurrentPos.get_block_material();
    EyeBlockType = value::eye_location<default>.get_block_material();
    if("nether_portal".equals([PosBlockType, EyeBlockType])){
        player::set_item_cooldown("5.0", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
        if(InField.equals(0)){
            InField = 1;
            code::call_function("UnloadPrtls");
        }
    }
    else{
        if(InField.equals("1")){
            InField = 0;
        }
    }
}

event<player_change_slot>{
    if(g`%player%_InMenu`.equals(0)){
        if(g`%player%_CubePicked`.equals(1)){
            player::play_sound_from_entity(value::name<default>, sound("minecraft:item.dye.use", 1, 0.6, "MASTER"));
            g`%player%_CubePicked` = "0.0";
            if(g`%player%_PickedUUID`.not_equals("none")){
                StandUUID = g`%player%_PickedUUID`;
                g`%var_local(StandUUID)_IsPicked` = "0";
                g`%player%_PickedUUID` = "none";
            }
        }
        if(g`%player%_GravityPickUUID`.not_equals(0)){
            code::call_function(p"SelectedItem");
            if(SelectedItem.equals("gravity_gun")){
                world::cancel_event();
                if(g`%var(%player%_GravityPickUUID)_InsideBlockType`.equals("activator_rail")){
                    select::entity_by_name(g`%player%_GravityPickUUID`);
                    Angle = value::location<current>.get_coordinate("YAW");
                    Adder = 3;
                    if(player::is_sneaking()){
                        Adder = 10;
                    }
                    if(value::event_slot.greater(value::held_slot<default>)){
                        Angle = variable::add([Angle, Adder]);
                    }
                    else{
                        Angle = variable::subtract([Angle, Adder]);
                    }
                    entity::set_rotation(Angle);
                    select::entity_by_name(g`%var(%player%_GravityPickUUID)_MarkerUUID`);
                    entity::set_rotation(Angle);
                    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.spyglass.use", 1, 1, "MASTER"));
                }
            }
            else{
                g`%player%_GravityPickUUID` = 0;
                player::play_sound_from_entity(value::name<default>, sound("minecraft:item.dye.use", 1, 0.6, "MASTER"));
                player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
            }
        }
    }
}

function ParticleViewStart{
    ParticleViewStart = value::eye_location<default>.shift_location_in_direction(0.7);
    ParticleViewStart = ParticleViewStart.shift_location_in_direction(-0.25, "UPWARD");
    ParticleViewSideVect = ParticleViewStart.set_coordinate(0, "PITCH");
    ParticleViewSideVect = ParticleViewSideVect.get_location_direction();
    ParticleViewSideVect = ParticleViewSideVect.rotate_vector_around_axis(-90, "Y");
    ParticleViewStart = ParticleViewStart.shift_location_on_vector(ParticleViewSideVect, 0.25);
    ParticleViewStart = ParticleViewStart.shift_location_in_direction(g`%player%_WalkMult`);
}

function ParticleGravLMB{
    code::call_function("ParticleViewStart");
    player::display_particle(particle("SWEEP_ATTACK", 1, 0, 0, 0, 0, 0, size=1), ParticleViewStart);
    player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart, CubeCenter, 0.25, "DISTANCE");
    player::play_sound_from_entity(value::name<default>, sound("minecraft:entity.blaze.shoot", 1, 1.5, "MASTER"));
    PlPushVect = variable::get_vector_between_locations(CubeCenter, value::hitbox_midpoint_location<default>);
    DistToCube = PlPushVect.get_vector_length("LENGTH");
    PlPushPower = variable::subtract([5, DistToCube]);
    if(PlPushPower.less(0)){
        PlPushPower = 0;
    }
    PowerFactor = variable::divide([PlPushPower, 5]);
    PowerFactor = variable::multiply([PowerFactor, PowerFactor]);
    PlPushPower = variable::multiply([PlPushPower, 0.1]);
    PlPushVect = PlPushVect.set_vector_length(PlPushPower);
    PlVelY = value::velocity<default>.get_vector_component("Y");
    PlVelY = PowerFactor.lerp_number(PlVelY, 0.28);
    PlVel = value::velocity<default>.set_vector_component(PlVelY, "Y");
    PlPushVect = variable::add_vectors([PlPushVect, PlVel]);
    player::set_velocity(PlPushVect, "FALSE");
    if(DistToCube.less_or_equals(1.25)){
        player::display_particle(particle("FLASH", 1, 0, 0, 0, 0, 0), ParticleViewStart);
        player::play_sound_from_entity(value::name<default>, sound("minecraft:entity.dragon_fireball.explode", 0.5, 2, "MASTER"));
    }
    if(value::name<current>.text_contains(["*thrower*", "*heavy*"])){
        ThrowVect = ThrowVect.set_vector_length(0.75);
    }
}

function PlCursorCb2{
    if(HelpActionBarTimer.greater(0)){
        HelpActionBarTimer = variable::subtract([HelpActionBarTimer, 10]);
        if(HelpActionBarTimer.less_or_equals(0)){
            player::send_action_bar("&r");
        }
    }
}

function CbGravityPick{
    ShulkerUUID = value::uuid<current>;
    if(g`%var_local(ShulkerUUID)_IsFirstSpawned`.equals("0")){
        StandUUID = g`%var_local(ShulkerUUID)_StandUUID`;
        if(g`%var_local(StandUUID)_FlyTime`.greater(0)){
            code::break();
        }
        g`%player%_GravityPickUUID` = StandUUID;
        player::play_sound_from_entity(value::name<default>, [sound("minecraft:item.dye.use", 0.5, 1.2, "MASTER"), sound("minecraft:entity.fishing_bobber.retrieve", 1, 0.5, "MASTER")]);
        code::start_process("GravPickLOOP", "COPY");
    }
}

function CbGravityUnpick{
    world::cancel_event();
    g`%player%_GravityPickUUID` = 0;
    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.dye.use", 1, 0.6, "MASTER"));
    player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
}

process GravPickLOOP{
    repeat::while(g`%player%_GravityPickUUID`.not_equals(0)){
        code::call_function("WAIT");
        select::entity_by_name(StandUUID);
        if(value::selection_size.less_or_equals("0.0")){
            g`%player%_GravityPickUUID` = 0;
            code::break();
        }
        code::call_function(p"GravPickRay");
        CbCenter = value::location<current>.shift_coordinate(0.5, "Y");
        DistToPl = variable::locations_distance(CbCenter, value::hitbox_midpoint_location<default>);
        if(DistToPl.greater(5)){
            g`%player%_GravityPickUUID` = 0;
            player::play_sound_from_entity(value::name<default>, sound("minecraft:item.dye.use", 1, 0.6, "MASTER"));
            code::break();
        }
        code::call_function("GravPickPart");
        PushVect = variable::get_vector_between_locations(CbCenter, EndPos);
        PushVect = PushVect.set_vector_component(0, "Y");
        PushPower = PushVect.get_vector_length();
        PushPower = variable::subtract([PushPower, 1.5]);
        if(PushPower.less(0)){
            PushPower = 0;
        }
        if(PushPower.greater(0.05)){
            PushPower = variable::multiply([PushPower, 0.5]);
            if(PushPower.greater(0.1)){
                PushPower = 0.1;
            }
            code::call_function("GravPickRail");
            if(Return.not_equals(0)){
                SoundI = variable::add([SoundI, 1]);
                if(SoundI.greater_or_equals(3)){
                    SoundI = 0;
                    player::play_sound_from_entity(StandUUID, sound("minecraft:block.grindstone.use", 0.25, 0.5, "MASTER"));
                }
                entity::set_location(PushVect);
            }
        }
        code::wait(2);
    }

}

function GravPickPart{
    code::call_function(p"ParticleViewStart");
    PartDist = "0.25";
    if(s`%player%_SettingLaserPartCount`.equals(1)){
        PartDist = 0.5;
    }
    if(s`%player%_SettingLaserPartCount`.equals(2)){
        PartDist = 1;
    }
    if(value::cpu_usage.less(75)){
        x1, y1, z1 = ParticleViewStart.get_all_coordinates();
        x2, y2, z2 = EndPos.get_all_coordinates();
        x3, y3, z3 = CbCenter.get_all_coordinates();
        DistToPl = variable::locations_distance(CbCenter, ParticleViewStart);
        DistToPl = variable::divide([DistToPl, PartDist]);
        DistToPl = DistToPl.round(round_type="FLOOR");
        PointShift = variable::divide([1, DistToPl]);
        repeat::on_range(t, 0, 1, PointShift){
            code::call_function(p"WAIT");
            l`1-t` = variable::subtract([1, t]);
            l`1-tsqr` = variable::multiply([l`1-t`, l`1-t`]);
            tsqr = variable::multiply([t, t]);
            new1 = variable::multiply([l`1-tsqr`, x1]);
            new2 = variable::multiply([2, l`1-t`, t, x2]);
            new3 = variable::multiply([tsqr, x3]);
            newx = variable::add([new1, new2, new3]);
            new1 = variable::multiply([l`1-tsqr`, y1]);
            new2 = variable::multiply([2, l`1-t`, t, y2]);
            new3 = variable::multiply([tsqr, y3]);
            newy = variable::add([new1, new2, new3]);
            new1 = variable::multiply([l`1-tsqr`, z1]);
            new2 = variable::multiply([2, l`1-t`, t, z2]);
            new3 = variable::multiply([tsqr, z3]);
            newz = variable::add([new1, new2, new3]);
            PartPos = variable::set_all_coordinates(newx, newy, newz);
            player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), PartPos);
        }
    }
    else{
        player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart, EndPos, PartDist, "DISTANCE");
        player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), EndPos, CbCenter, PartDist, "DISTANCE");
    }
}

function GravPickRail{
    Return = 0;
    BlockType = value::location<current>.get_block_material("ID");
    g`%var_local(StandUUID)_InsideBlockType` = BlockType;
    if(BlockType.equals(["rail", "activator_rail"])){
        Shape = value::location<current>.get_block_data("shape");
        dotNorth = variable::vector_dot_product(PushVect, vector(0, 0, -1));
        dotSouth = variable::vector_dot_product(PushVect, vector(0, 0, 1));
        dotEast = variable::vector_dot_product(PushVect, vector(1, 0, 0));
        dotWest = variable::vector_dot_product(PushVect, vector(-1, 0, 0));
        if(Shape.equals("north_south")){
            if(dotSouth.greater(dotNorth)){
                PushVect = vector(0, 0, 1).set_vector_length(PushPower);
                Return = 1;
            }
            else{
                PushVect = vector(0, 0, -1).set_vector_length(PushPower);
                Return = 1;
            }
        }
        if(Shape.equals("east_west")){
            if(dotEast.greater(dotWest)){
                PushVect = vector(1, 0, 0).set_vector_length(PushPower);
                Return = 1;
            }
            else{
                PushVect = vector(-1, 0, 0).set_vector_length(PushPower);
                Return = 1;
            }
        }
        code::call_function(p"GravPickRail2");
    }
    code::call_function("GravPickPlate");
}

function GravPickRail2{
    if(Shape.equals("north_east")){
        if(dotNorth.greater(dotEast)){
            PushVect = vector(0, 0, -1).set_vector_length(PushPower);
            Return = 1;
        }
        else{
            PushVect = vector(1, 0, 0).set_vector_length(PushPower);
            Return = 1;
        }
    }
    if(Shape.equals("north_west")){
        if(dotNorth.greater(dotWest)){
            PushVect = vector(0, 0, -1).set_vector_length(PushPower);
            Return = 1;
        }
        else{
            PushVect = vector(-1, 0, 0).set_vector_length(PushPower);
            Return = 1;
        }
    }
    code::call_function(p"GravPickRail3");
}

function GravPickRail3{
    if(Shape.equals("south_east")){
        if(dotSouth.greater(dotEast)){
            PushVect = vector(0, 0, 1).set_vector_length(PushPower);
            Return = 1;
        }
        else{
            PushVect = vector(1, 0, 0).set_vector_length(PushPower);
            Return = 1;
        }
    }
    if(Shape.equals("south_west")){
        if(dotSouth.greater(dotWest)){
            PushVect = vector(0, 0, 1).set_vector_length(PushPower);
            Return = 1;
        }
        else{
            PushVect = vector(-1, 0, 0).set_vector_length(PushPower);
            Return = 1;
        }
    }
    TestPos = value::location<current>.shift_location_on_vector(PushVect, 0.5);
    if(world::block_equals(["air", "light"], TestPos)){
        Return = 0;
        code::return_function();
    }
    code::call_function("GravPickRound");
}

function GravPickRound{
    RoundTestPos = TestPos.align_location(coordinates_mode="ALL");
    RoundX, RoundZ = RoundTestPos.get_all_coordinates();
    TestX = PushVect.get_vector_component("X");
    if(TestX.equals(0)){
        if(value::x_coordinate<current>.not_equals(RoundX)){
            TestPos = value::location<current>.set_coordinate(RoundX);
            entity::teleport(TestPos);
        }
    }
    else{
        if(value::z_coordinate<current>.not_equals(RoundZ)){
            TestPos = value::location<current>.set_coordinate(RoundZ, "Z");
            entity::teleport(TestPos);
        }
    }
}

function GravPickPlate{
    if(BlockType.equals(["polished_blackstone_pressure_plate", "stone_pressure_plate", "birch_pressure_plate"])){
        PushVect = PushVect.align_to_axis_vector("FALSE");
        TestPos = value::location<current>.shift_location_on_vector(PushVect, 0.5);
        if not (world::block_equals(["air", "light"], TestPos)){
            PushVect = PushVect.set_vector_length(PushPower);
            Return = 1;
            code::call_function("GravPickRound");
        }
    }
}

function PlGravPickHelp{
    if(g`%var(%player%_GravityPickUUID)_InsideBlockType`.equals("activator_rail")){
        player::send_action_bar(m"<white> <#abc4d6>- <font:smallcaps>Опустить куб | <font:default><white> <#abc4d6>- <font:smallcaps>Повернуть куб | <font:default><white> <#abc4d6>+ <white> <#abc4d6>- <font:smallcaps>Сильно повернуть куб");
    }
    else{
        player::send_action_bar(m"<white> <#abc4d6>- <font:smallcaps>Опустить куб");
    }
}

function TEMPLsrBlDetect{
    code::call_function(p"WAIT");
    TEMPEndPos, TEMPEndBlock, TEMPEndSide = variable::ray_trace_result(start=TEMPStartPos, ray_size="0", max_distance=TEMPLength, ignore_passable_blocks="FALSE", fluid_collision_mode="ALWAYS");
    if(TEMPEndPos.not_equals("0")){
        TEMPType = TEMPEndBlock.shift_all_coordinates(0.5, 0.5, 0.5);
        TEMPType = TEMPType.get_block_material();
        if(TEMPType.equals(["light", "structure_void", "glow_lichen"])){
            TEMPLength2 = variable::locations_distance(TEMPStartPos, TEMPEndPos);
            TEMPDir = TEMPStartPos.get_location_direction();
            TEMPStartPos = TEMPEndPos;
            TEMPStartPos = TEMPStartPos.set_location_direction(TEMPDir);
            TEMPStartPos = TEMPStartPos.shift_location_in_direction(1.415);
            TEMPLength = variable::subtract([TEMPLength, TEMPLength2, 1.415]);
            if(TEMPLength.less_or_equals(0)){
                code::return_function();
            }
            code::call_function(p"TEMPLsrBlDetect");
        }
        else{
            if(TEMPType.equals("nether_portal")){
                PrtlHitPoint = TEMPEndPos;
                PrtlHitBlockPos = TEMPEndBlock;
                PrtlHitSide = TEMPEndSide;
            }
        }
    }
}

function ACT3Intro{
    R21Intro = 1;
    code::call_function(p"MusicPlay");
    if(s`%player%_SettingDisableIntro`.equals("0.0")){
        g`%player%_IntroStarted` = 1;
        player::teleport(location(-18.5, 39, 11.5, -180, -90), "FALSE");
        player::play_animation_action("WAKE_UP");
        player::set_gamemode("SPECTATOR");
        code::wait(1);
        world::spawn_item_display(location(-19.65, 39.1, 9.65, 50, 0), "intro*%player%*2", "H4sIAAAAAAAA/02MMQ7CMBAEF6IgMFXS5ic0NHkDoouM7UiW4lvkuygtT4d0TD0zDmhwHb35R6qaKUD3POOYI/qSJYXqZ7uFStUXtwZt4CoG4ODgAsubksTUYfizVzWWqTCmZYq/9QWneaE3bffw/sHOF9UsJ456AAAA");
        select::last_entity();
        Intro2UUID = value::uuid<current>;
        player::hide_entity(Intro2UUID);
        player::hide_entity(Intro2UUID, "FALSE");
        world::spawn_item_display(location(-18.5, 39, 11.5, -180, -90), "intro*%player%", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYeDPzcxLTS5KTCuxKi7Jz0tlZmBNzi/NK2FgYGBkAAAtZYiiOAAAAA==");
        select::last_entity();
        IntroUUID = value::uuid<current>;
        entity::set_display_view_range(0);
        player::spectate_target(IntroUUID);
        code::wait(60);
        entity::set_display_teleport_duration(40);
        code::wait(1);
        entity::teleport(location(-19, 40, 11, 135, 45));
        Ping = value::ping<default>;
        code::wait("%math(50+ceil(%var_local(Ping)/50))");
        entity::set_display_teleport_duration(40);
        code::wait(1);
        TEMPPos = g`%player%_LvlSpawnPos`.shift_coordinate(1.5, "Y");
        entity::teleport(TEMPPos);
        Ping = value::ping<default>;
        code::wait("%math(50+ceil(%var_local(Ping)/50))");
        player::set_gamemode("ADVENTURE");
        select::add_entity_by_name(Intro2UUID);
        entity::remove();
        select::reset();
        g`%player%_IntroStarted` = 0;
    }
    else{
        player::teleport(g`%player%_LvlSpawnPos`, "FALSE");
    }
}

process `*ACT3Anim1`{
    if(value::entity_type<default>.equals("player")){
        code::call_function(p"RepeatIfDialog");
        code::wait(20);
        g`%player%_IntroStarted` = 1;
        g`%player%_ShowDialog` = 0;
        code::call_function("UnloadPrtls");
        player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
        player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
        player::stop_sound([]);
        if(value::location<default>.location_in_range(location(-49.5, 40.5, 15.5, 0, 0), location(-45.5, 46.5, 11.5, 0, 0), "FULL_BLOCK_RANGE")){
            Pos = value::location<default>.shift_coordinate(8);
            player::teleport(Pos, keep_velocity="TRUE");
        }
        else{
            player::teleport(location(-39.5, 41, 14.5, -180, 0), "FALSE", "FALSE");
        }
        player::play_sound(sound("minecraft:block.iron_door.close", 1, 1, "MASTER"), location(-39.5, 41.5, 16.5, 0, 0));
        code::wait(60);
        g`%player%_HasPortalGun` = "0";
        player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`]);
        code::call_function(p"ParticleViewStart");
        ParticleViewStart = ParticleViewStart.shift_coordinate(20, "PITCH");
        world::spawn_item_display(ParticleViewStart, "intro*%player%", "H4sIAAAAAAAA/02MMQ7CMBAEF6IgMFXS5ic0NHkDoouM7UiW4lvkuygtT4d0TD0zDmhwHb35R6qaKUD3POOYI/qSJYXqZ7uFStUXtwZt4CoG4ODgAsubksTUYfizVzWWqTCmZYq/9QWneaE3bffw/sHOF9UsJ456AAAA");
        select::last_entity();
        IntroUUID = value::uuid<current>;
        entity::set_default_visible();
        player::hide_entity(IntroUUID, "FALSE");
        entity::set_display_teleport_duration(2);
        MoveDir = variable::get_vector_between_locations(value::location<current>, location(-39.5, 43.5, 13.5, 0, 0));
        MoveDir = variable::multiply_vector(MoveDir, 0.025);
        repeat::multi_times(amount=40){
            entity::set_display_interpolation(2);
            entity::set_display_rotation_from_axis_angle(ParticleViewSideVect, 10, "ADD");
            MovePos = value::location<current>.shift_location_on_vector(MoveDir);
            entity::teleport(MovePos, "FALSE");
            code::wait(2);
        }
        code::call_function(p"ACT3Anim1-2");
        FancyTitleArgs = ["АКТ 3.1: Подарок", "&#ffb657&l", "Уровень №%var(%player%_Level)", "&#abc4d6", "50.0", 10, 2, 20, 0, 0, 0, 0, 0, "smallcaps"];
        code::start_process(p"FancyTitleAsync", "COPY");
        code::call_function(p"MusicPlay");
    }
}

function `ACT3Anim1-2`{
    repeat::multi_times(amount=15){
        entity::set_display_interpolation(2);
        entity::set_display_rotation_from_axis_angle(ParticleViewSideVect, 10, "ADD");
        code::wait(2);
    }
    CurrentPos = value::location<current>;
    world::spawn_item_display(CurrentPos, "intro*%player%*2", "H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YWLgDIgtihxXipTYKHbuD3Tp278XgAnnZ/L04m5FBbi8j9iXjGsrwtTT4ncf3StHo+E8YSYd4gB2AYG0fVRY3AJum6Bhri02zVxj/u1POCxVk9v8hw+sfQHCeOWzfgAAAA==");
    select::last_entity();
    Intro2UUID = value::uuid<current>;
    entity::set_display_billboard("CENTER");
    entity::set_display_scale(vector(2.5, 2.5, 2.5));
    entity::set_default_visible();
    player::hide_entity(Intro2UUID, "FALSE");
    select::entity_by_name(IntroUUID);
    repeat::multi_times(amount=50){
        entity::set_display_interpolation(2);
        entity::set_display_rotation_from_axis_angle(ParticleViewSideVect, 10, "ADD");
        RandVect = variable::set_vector("%math(%random%*2-1)", "%math(%random%*2-1)", "%math(%random%*2-1)");
        RandVect = RandVect.set_vector_length(0.5);
        Part = particle("FIREWORK", 1, 0, 0, 0, 0, 0).set_particle_offset(RandVect);
        player::display_particle([Part, particle("EXPLOSION_EMITTER", 1, 0, 0, 0, 0, 0)], CurrentPos);
        player::play_sound_sequence([sound("minecraft:item.trident.hit_ground", 1, 0.5, "MASTER"), sound("minecraft:block.conduit.deactivate", 1, 1, "MASTER"), sound("minecraft:ambient.basalt_deltas.additions", 1, 2, "basaltground2", "MASTER")], CurrentPos, 0);
        code::wait(2);
    }
    player::display_particle(particle("EXPLOSION", 1, 0, 0, 0, 0, 0), CurrentPos);
    select::add_entity_by_name(Intro2UUID);
    entity::remove();
    select::reset();
    code::wait(60);
    Pos = value::location<default>.shift_coordinate(-16);
    player::teleport(Pos, keep_velocity="TRUE");
    player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBiYGABgWD35RgAAAA==");
    player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(-55.5, 41.5, 10.5, 0, 0));
    g`%player%_IntroStarted` = 0;
}

function LoadLvlDataMap{
    AllLvlsContainerList = [location(-13.5, 18.5, 14.5, 0, 0), location(-13.5, 19.5, 14.5, 0, 0)];
    g`LvlDataMap` = variable::create_map();
    repeat::for_each_in_list(value_variable=AllLvlsContainer, list=AllLvlsContainerList){
        AllLvlsContainerItems = AllLvlsContainer.get_container_contents();
        repeat::for_each_in_list(value_variable=LocalLvlContainers, list=AllLvlsContainerItems){
            LocalLvlContainers = LocalLvlContainers.get_item_name();
            LocalLvlContainers = LocalLvlContainers.split_text("|");
            LvlKey = LocalLvlContainers.get_list_value(0);
            LocalLvlContainers = LocalLvlContainers.get_list_value(1);
            g`LvlDataMap` = g`LvlDataMap`.set_map_value(LvlKey, LocalLvlContainers);
        }
    }
}

function Lvl_LOAD{
    error_type = "load";
    controller::catch_exception(error, "ERROR"){
        g`%player%_CubeList` = [];
        g`%player%_CubeListBeacon` = [];
        g`%player%_CubeListThrower` = [];
        g`%player%_CubeListHeavy` = [];
        g`%player%_CubeListRail` = [];
        IsFirstLoad = 0;
        if(g`LvlPlayerList_%var_local(NextLevel)`.equals(0)){
            IsFirstLoad = 1;
        }
        else{
            if(g`LvlPlayerList_%var_local(NextLevel)`.list_is_empty()){
                IsFirstLoad = 1;
            }
        }
        if(IsFirstLoad.equals(1)){
            g`LvlPlayerList_%var_local(NextLevel)` = [];
            g`LvlCubeList_%var_local(NextLevel)` = [];
            g`LvlTrigList_%var_local(NextLevel)` = [];
            g`LvlTrigFastList_%var_local(NextLevel)` = [];
            g`LvlActivatorList_%var_local(NextLevel)` = [];
            g`LvlLaserBlockList_%var_local(NextLevel)` = [];
            g`LvlBallBlockList_%var_local(NextLevel)` = [];
            g`LvlTurretList_%var_local(NextLevel)` = [];
        }
        g`LvlPlayerList_%var_local(NextLevel)`.append_value(p"%player%");
        LvlKey = variable::set_text(NextLevel, "CONCATENATION");
        LocalLvlDataMap = g`LvlDataMap`.get_map_value(LvlKey, "{\"x\":0.5,\"y\":0.5,\"z\":0.5}");
        LocalLvlDataMap = LocalLvlDataMap.split_text("*");
        repeat::for_each_in_list(value_variable=LvlData, list=LocalLvlDataMap){
            code::call_function(p"WAIT");
            Data = LvlData.get_container_contents();
            code::call_function(p"Lvl_LOAD1");
        }
    }
    code::call_function("LogError");
}

function LevelTPEnd2{
    if(g`%player%_IsInSecret`.equals(0)){
        if(g`%player%_Level`.not_equals([21, -33, -35])){
            code::call_function(p"MusicPlay");
        }
        if(g`%player%_RespawnPoint`.equals(0)){
            if(g`%player%_Level`.not_equals([-33, -35])){
                code::call_function("StartLvlTime");
            }
            if(Messages.not_equals("0")){
                code::start_process(p"DialogAudioAsync", "COPY");
            }
        }
    }
    else{
        g`%player%_SecretSoundTicks` = 0;
    }
}

function LaserRelay2{
    world::set_block(l`%var_local(RayCount)_RelayPos`, "minecraft:red_terracotta", "TRUE");
    l`%var_local(RayCount)_RelayPos` = 0;
    repeat::multi_times(amount=g`MAX_RAY_COUNT`){
        RelayLastIndex = variable::subtract([RelayLastIndex, 1]);
        if(l`%var_local(RelayLastIndex)_RelayPos`.not_equals(0)){
            code::stop_repeat();
        }
        if(RelayLastIndex.less_or_equals(0)){
            code::stop_repeat();
        }
    }
}

process `*SpawnFallItem`{
    if(value::entity_type<default>.equals("player")){
        SpawnPos = location(-176.5, 61.5, -110.5, 0, 0);
        code::wait(130);
        player::play_sound_sequence([sound("minecraft:block.anvil.land", 0.5, 2, "MASTER"), sound("minecraft:block.anvil.land", 0.5, 2, "MASTER"), sound("minecraft:block.anvil.land", 0.5, 2, "MASTER"), sound("minecraft:block.beehive.exit", 1, 2, "MASTER")], SpawnPos, 20);
        code::wait(58);
        world::spawn_armor_stand("AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", SpawnPos, "fitem*stand*%player%*%random_uuid%", "TRUE", small="FALSE", show_arms="FALSE", invisible="TRUE");
        select::last_entity();
        g`%player%_FItemStandUUID` = value::uuid<current>;
        entity::set_silenced();
        entity::set_default_visible();
        entity::set_death_drops("FALSE");
        entity::set_collidable("FALSE");
        entity::set_invulnerable();
        entity::set_attribute(0.04, "GENERIC_GRAVITY");
        SpawnPos = SpawnPos.shift_coordinate(0.1, "Y");
        world::spawn_item_display(SpawnPos, "fitem*display*%player%*%random_uuid%", "H4sIAAAAAAAA/02MMQ7CMBAEF6IgMFXS5ic0NHkDoouM7UiW4lvkuygtT4d0TD0zDmhwHb35R6qaKUD3POOYI/qSJYXqZ7uFStUXtwZt4CoG4ODgAsubksTUYfizVzWWqTCmZYq/9QWneaE3bffw/sHOF9UsJ456AAAA");
        select::last_entity();
        g`%player%_FItemDisplayUUID` = value::uuid<current>;
        entity::set_default_visible();
        entity::set_display_teleport_duration(2);
        entity::set_display_translation(vector(0, 0, -0.2));
        entity::set_display_rotation_from_euler_angles(yaw=45);
        select::reset();
        player::hide_entity([g`%player%_FItemStandUUID`, g`%player%_FItemDisplayUUID`], "FALSE");
        code::start_process(p"FallItemLOOP");
    }
}

process FallItemLOOP{
    Rotate = 1;
    repeat::forever(){
        code::call_function(p"WAIT");
        select::entity_by_name(g`%player%_FItemStandUUID`);
        if(value::selection_size.less_or_equals(0)){
            code::stop_repeat();
        }
        StandPos = value::location<current>.shift_coordinate(0.1, "Y");
        BlockType = StandPos.get_block_material("ID_WITH_DATA");
        if(BlockType.text_contains(["minecraft:water", "waterlogged=true"])){
            code::stop_repeat();
        }
        if(Rotate.equals(1)){
            if(entity::is_standing_on_block("minecraft:barrier", [])){
                Rotate = 0;
                Align = 1;
                player::play_sound(sound("minecraft:block.bone_block.fall", 1, 0.5, "MASTER"), StandPos);
            }
        }
        code::call_function(p"WAIT");
        select::entity_by_name(g`%player%_FItemDisplayUUID`);
        if(value::selection_size.less_or_equals(0)){
            code::stop_repeat();
        }
        entity::teleport(StandPos, "FALSE");
        if(Rotate.equals(1)){
            entity::set_display_rotation_from_euler_angles(roll=10, mode="ADD");
        }
        code::call_function(p"FallItemLOOP2");
        code::wait(2);
    }
    if(Convert.equals(0)){
        select::entity_by_name([g`%player%_FItemStandUUID`, g`%player%_FItemDisplayUUID`]);
        if(value::selection_size.greater(0)){
            entity::remove();
        }
        variable::purge("%player%_FItem", match="NAME_CONTAINS");
    }
}

function FallItemLOOP2{
    if(Align.equals(1)){
        Align = 0;
        RotX, RotZ = value::display_entity_left_rotation<current>.get_vector_all_components();
        entity::set_display_interpolation(2);
        entity::set_display_rotation_from_euler_angles(RotX, input="RADIANS");
        entity::set_display_rotation_from_euler_angles(roll=RotZ, mode="ADD", input="RADIANS");
    }
}

event<player_right_click_entity>{
    if(g`%player%_InMenu`.equals(0)){
        if(value::event_equipment_slot.equals("hand")){
            if(g`%player%_Level`.equals(25)){
                if(value::uuid<default_entity>.equals(g`%player%_FItemStandUUID`)){
                    world::cancel_event();
                    if(g`%player%_HasPortalGun`.equals("0")){
                        g`%player%_HasPortalGun` = "1";
                        player::set_item_cooldown(999999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSi7KLy5Oyi9nZmBNzi/NK2FgYGBkAABT0ZmYOwAAAA==");
                        code::call_function(p"GiveGunItems");
                        player::set_item_cooldown("5", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
                        if(g`%player%_HasGravityGun`.equals(0)){
                            player::set_hotbar_slot("4");
                        }
                        else{
                            player::set_hotbar_slot(3);
                        }
                        player::play_sound_from_entity(value::name<default>, sound("minecraft:item.armor.equip_netherite", 1, 2, "MASTER"));
                        select::entity_by_name([g`%player%_FItemStandUUID`, g`%player%_FItemDisplayUUID`]);
                        if(value::selection_size.greater(0)){
                            entity::remove();
                        }
                        variable::purge("%player%_FItem", match="NAME_CONTAINS");
                    }
                }
            }
        }
    }
}

function KillFallItem{
    if(g`%var_local(ActivatorID)_Level`.equals(25)){
        TempCorner1 = EndPos.shift_all_coordinates(-1.5, -1, -1.5);
        TempCorner2 = EndPos.shift_all_coordinates(1.5, 1, 1.5);
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("fitem*"));
        select::filter_by_conditional(entity::in_area(TempCorner1, TempCorner2, "FALSE"));
        if(value::selection_size.greater(0)){
            entity::remove();
        }
        select::reset();
    }
}

function LOAD_Ball{
    g`%var_local(NextLevel)_LvlHasBall` = 1;
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "ball";
        g`%var_local(ActivatorID)_SpawnPos` = DataList.get_list_value(2);
        g`%var_local(ActivatorID)_EndPoint` = DataList.get_list_value(3);
        g`%var_local(ActivatorID)_Speed` = DataList.get_list_value(4);
        g`%var_local(ActivatorID)_InteractType` = DataList.get_list_value(5);
        g`%var_local(ActivatorID)_ActivationType` = DataList.get_list_value(6);
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        g`%var_local(ActivatorID)_SpawnPos` = g`%var_local(ActivatorID)_SpawnPos`.shift_coordinate(0);
        g`%var_local(ActivatorID)_EndPoint` = g`%var_local(ActivatorID)_EndPoint`.shift_coordinate(0);
        if not (g`LvlBallBlockList_%var_local(NextLevel)`.list_contains_value(ActivatorID)){
            g`LvlBallBlockList_%var_local(NextLevel)`.append_value(ActivatorID);
        }
        if(world::block_equals("minecraft:redstone_block", g`%var_local(ActivatorID)_EndPoint`)){
            world::set_block(g`%var_local(ActivatorID)_EndPoint`, "minecraft:red_terracotta", "TRUE");
        }
        g`%var_local(ActivatorID)_Speed` = variable::add([g`%var_local(ActivatorID)_Speed`, 0]);
        g`%var_local(ActivatorID)_EntityLevel` = NextLevel;
        g`%var_local(ActivatorID)_EntityID` = variable::set_text([NextLevel, "*", LoadID], "CONCATENATION");
        code::call_function("SpawnBallSP");
        LoadID = variable::add([LoadID, 1]);
    }
}

function UNLOAD_Ball{
    if(g`%var_local(CurrentLevel)_LvlHasBall`.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("ball*%var_local(CurrentLevel)*"));
        select::add_entity_by_conditional(entity::has_custom_tag("name", "ball*%var_local(CurrentLevel)*", "STARTS_WITH"));
        if(value::selection_size.greater("0.0")){
            variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
            entity::remove();
        }
        select::reset();
    }
}

function UNLOAD_BallB{
    if(g`%var_local(CurrentLevel)_LvlHasBall`.equals(1)){
        if(g`%var_local(CurrentLevel)_LvlHasBoss`.equals(0)){
            if(g`LvlBallBlockList_%var_local(CurrentLevel)`.not_equals(0)){
                repeat::for_each_in_list(value_variable=ActivatorID, list=g`LvlBallBlockList_%var_local(CurrentLevel)`){
                    if(world::block_equals("minecraft:redstone_block", g`%var_local(ActivatorID)_EndPoint`)){
                        g`%var_local(ActivatorID)_IsBlocked` = 0;
                        g`%var_local(ActivatorID)_IsSpawned` = 0;
                        world::set_block(g`%var_local(ActivatorID)_EndPoint`, "minecraft:red_terracotta", "TRUE");
                        select::entity_by_name(g`%var_local(ActivatorID)_ReceiverUUID`);
                        entity::set_item_display_item("H4sIAAAAAAAA/0WNsQ7CMAwFH1RFECZmxI8wMfANiC0ySYoiJXYVu2Ltp7eduPGk0zmgw/lJRq/UNAsDl/cR+xxxq5lTaDTY/dPkx16NVhP9t5Bqhz7IxAZg5+CC1FE4sanD9R+GSU2qrxJT8XG9nHAYipBpv4WPGRsLRiWdcIUAAAA=");
                        select::reset();
                        if(g`%var_local(ActivatorID)_ActivationType`.equals("always")){
                            g`%var_local(ActivatorID)_IsActive` = 1;
                            code::call_function(p"SpawnBall");
                        }
                    }
                }
            }
        }
    }
    else{
        variable::purge("LvlLaserBallList_%var_local(CurrentLevel)");
    }
}

function SpawnBallSP{
    TEMP = g`%var_local(ActivatorID)_SpawnPos`.get_block_material();
    Name1 = variable::set_text(["ball*", g`%var_local(ActivatorID)_EntityID`, "*spawner*%random_uuid%"], "CONCATENATION");
    Name2 = variable::set_text(["ball*", g`%var_local(ActivatorID)_EntityID`, "*receiver*%random_uuid%"], "CONCATENATION");
    g`%var_local(ActivatorID)_BallName` = variable::set_text(["ball*", g`%var_local(ActivatorID)_EntityID`, "*orb*%random_uuid%"], "CONCATENATION");
    g`%var_local(ActivatorID)_SpawnDir` = g`%var_local(ActivatorID)_SpawnPos`.get_location_direction();
    LocalSpawnPos = g`%var_local(ActivatorID)_SpawnPos`.shift_coordinate(90, "YAW");
    g`%var_local(ActivatorID)_ReceiverPos` = g`%var_local(ActivatorID)_EndPoint`.shift_location_in_direction(1);
    g`%var_local(ActivatorID)_ReceiverDir` = g`%var_local(ActivatorID)_ReceiverPos`.get_location_direction();
    world::spawn_item_display(LocalSpawnPos, Name1, "H4sIAAAAAAAA/0WNwQrCMBAFXy0Vjaeeiz/iyYPfIN7CmqQlkOxKdou/b/XiHAeGcUCP042M7qlpFgbGxwG7HHGumVNoNNvl2eTNXo02E/1SSLXHEGRlA9A5uCD1JZzY1GH6h2FVk+qrxFR83C5H7OciZDp8wyt+fACeMS1uhQAAAA==");
    select::last_entity();
    g`%var_local(ActivatorID)_SpawnerUUID` = value::uuid<current>;
    entity::set_custom_name(Name1);
    entity::set_silenced();
    TEMP = g`%var_local(ActivatorID)_ReceiverPos`.get_block_material();
    world::spawn_item_display(g`%var_local(ActivatorID)_ReceiverPos`, Name2, "H4sIAAAAAAAA/0WNsQ7CMAwFH1RFECZmxI8wMfANiC0ySYoiJXYVu2Ltp7eduPGk0zmgw/lJRq/UNAsDl/cR+xxxq5lTaDTY/dPkx16NVhP9t5Bqhz7IxAZg5+CC1FE4sanD9R+GSU2qrxJT8XG9nHAYipBpv4WPGRsLRiWdcIUAAAA=");
    select::last_entity();
    g`%var_local(ActivatorID)_ReceiverUUID` = value::uuid<current>;
    entity::set_display_rotation_from_euler_angles(90);
    if(g`%var_local(ActivatorID)_InteractType`.equals("special")){
        entity::set_display_translation(vector(0, 0, 1));
        entity::set_display_scale(vector(3, 3, 3));
    }
    select::reset();
    if(g`%var_local(ActivatorID)_ActivationType`.equals("while")){
        BlockType = ActivatorPos.get_block_material("ID_WITH_DATA");
        if not (BlockType.text_contains("power=0")){
            g`%var_local(ActivatorID)_IsActive` = 1;
            code::call_function(p"SpawnBall");
        }
    }
    if(g`%var_local(ActivatorID)_ActivationType`.equals("always")){
        g`%var_local(ActivatorID)_IsActive` = 1;
        code::call_function(p"SpawnBall");
    }
}

function ACT_Ball{
    if(IsActive.equals(1)){
        if(g`%var_local(ActivatorID)_ActivationType`.not_equals("always")){
            if(g`%var_local(ActivatorID)_IsBlocked`.equals(0)){
                if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
                    g`%var_local(ActivatorID)_IsActive` = 1;
                    if(g`%var_local(ActivatorID)_IsSpawned`.equals(0)){
                        code::call_function(p"SpawnBall");
                    }
                    if(g`%var_local(ActivatorID)_ActivationType`.equals("pulse")){
                        g`%var_local(ActivatorID)_IsActive` = 0;
                    }
                }
            }
        }
    }
    else{
        if(g`%var_local(ActivatorID)_ActivationType`.equals("while")){
            if(g`%var_local(ActivatorID)_IsActive`.equals(1)){
                g`%var_local(ActivatorID)_IsActive` = 0;
            }
        }
    }
}

function SpawnBall{
    g`%var_local(ActivatorID)_IsSpawned` = 1;
    if(BallReflect.equals(0)){
        SpawnPos = g`%var_local(ActivatorID)_SpawnPos`;
        ThrowVect = g`%var_local(ActivatorID)_SpawnDir`;
        LifeTime = 600;
        if(g`%var_local(ActivatorID)_EntityLevel`.equals(-35)){
            LifeTime = 900;
        }
        code::start_process(p"BallSpawnerAct", "COPY", "NO_TARGET");
        player::play_sound_sequence([sound("minecraft:entity.armadillo.brush", 0.8, 0.5, "MASTER"), sound("minecraft:block.conduit.activate", 1, 2, "MASTER")], SpawnPos, 0);
    }
    TEMP = SpawnPos.get_block_material();
    world::launch_projectile("H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDNzcxLTS5KTCuxKs/MS4lPzkgsSk9lZmBNzi/NK2FgYGBkAAB062hGPgAAAA==", SpawnPos);
    select::last_entity();
    BallUUID = value::uuid<current>;
    g`%var_local(BallUUID)_ActivatorID` = ActivatorID;
    g`%var_local(BallUUID)_LifeTime` = LifeTime;
    g`%var_local(BallUUID)_MoveVect` = ThrowVect.set_vector_length(g`%var_local(ActivatorID)_Speed`);
    entity::set_custom_tag("name", g`%var_local(ActivatorID)_BallName`);
    entity::set_gravity("FALSE");
    entity::set_location(g`%var_local(BallUUID)_MoveVect`, "FALSE");
    select::reset();
}

process BallSpawnerAct{
    select::entity_by_name(g`%var_local(ActivatorID)_SpawnerUUID`);
    if(value::selection_size.greater(0)){
        entity::set_item_display_item("H4sIAAAAAAAA/0WNwQrCMBAFn5aKxpNn8Uc89eA3SG9hTVIJJLslu8Xfb3tyjgPDOKDD9UVG79Q0CwO38YxjjnjUzCk0muz5afJjr0abif5bSLVDH2RhA3BwcEHqLJzY1OH+D8OiJtVXian4uF0uOE1FyLTfw2HAzgryO3VhhQAAAA==");
        code::wait(20);
        if(entity::exists()){
            entity::set_item_display_item("H4sIAAAAAAAA/0WNwQrCMBAFXy0Vjaeeiz/iyYPfIN7CmqQlkOxKdou/b/XiHAeGcUCP042M7qlpFgbGxwG7HHGumVNoNNvl2eTNXo02E/1SSLXHEGRlA9A5uCD1JZzY1GH6h2FVk+qrxFR83C5H7OciZDp8wyt+fACeMS1uhQAAAA==");
        }
    }
}

event<entity_spawn>{
    code::wait(1);
    if(entity::has_custom_tag("name", "ball*", "STARTS_WITH")){
        BallUUID = value::uuid<default_entity>;
        ActivatorID = g`%var_local(BallUUID)_ActivatorID`;
        Level = g`%var_local(ActivatorID)_EntityLevel`;
        repeat::on_range(g`%var_local(BallUUID)_LifeTime`, g`%var_local(BallUUID)_LifeTime`, 0, -1){
            code::call_function(p"WAIT");
            if not (entity::exists()){
                variable::purge(value::uuid<default_entity>, match="NAME_CONTAINS");
                code::break();
            }
            if(world::block_equals("water", value::location<default_entity>)){
                code::stop_repeat();
            }
            player::display_particle(particle("DUST", 2, 0.20000000298023224, 0.20000000298023224, 0, 0, 0, color=-26112), value::location<default_entity>);
            player::play_sound(sound("minecraft:block.beehive.work", 0.5, 1, "work1", "MASTER"), value::location<default_entity>);
            Tick1 = variable::add([Tick1, 1]);
            if(Tick1.greater_or_equals(2)){
                Tick1 = 0;
                Corner1 = value::location<default_entity>.shift_all_coordinates(-0.2, -0.2, -0.2);
                Corner2 = value::location<default_entity>.shift_all_coordinates(0.2, 0.2, 0.2);
                select::player_by_name(g`LvlPlayerList_%var_local(Level)`);
                select::filter_by_conditional(player::in_area(Corner1, Corner2, "FALSE", "HITBOX"));
                if(value::selection_size.greater(0)){
                    player::damage(100);
                    code::stop_repeat();
                }
                select::reset();
            }
            code::call_function("BallFroze");
            code::wait(2);
        }
        if(entity::exists()){
            player::display_particle(particle("DUST_COLOR_TRANSITION", 1, 0, 0, 0, 0, 0, color=-26112), value::location<default_entity>);
            player::play_sound(sound("minecraft:block.conduit.deactivate", 0.5, 2, "MASTER"), value::location<default_entity>);
        }
        entity::remove();
        variable::purge(BallUUID, match="NAME_CONTAINS");
        code::wait(60);
        code::call_function(p"RespawnBall");
    }
}

event<projective_collide>{
    if(entity::has_custom_tag("name", "ball*", "STARTS_WITH")){
        world::cancel_event();
        BallUUID = value::uuid<projectile>;
        ActivatorID = g`%var_local(BallUUID)_ActivatorID`;
        if(value::entity_type<victim_entity>.equals(["shulker", "falling_block"])){
            code::call_function(p"BallCbReflect");
        }
        if(value::entity_type<victim_entity>.equals("player")){
            player::display_particle(particle("DUST_COLOR_TRANSITION", 1, 0, 0, 0, 0, 0, color=-26112), value::location<projectile>);
            player::play_sound(sound("minecraft:block.conduit.deactivate", 1, 2, "MASTER"), value::location<projectile>);
            entity::remove();
            variable::purge(BallUUID, match="NAME_CONTAINS");
            player::damage(100);
            code::wait(60);
            code::call_function(p"SpawnBall");
        }
    }
}

event<projectile_hit>{
    if(entity::has_custom_tag("name", "ball*", "STARTS_WITH")){
        world::cancel_event();
        BallUUID = value::uuid<projectile>;
        ActivatorID = g`%var_local(BallUUID)_ActivatorID`;
        LifeTime = g`%var_local(BallUUID)_LifeTime`;
        ThrowVect = g`%var_local(BallUUID)_MoveVect`;
        if(ThrowVect.equals(0)){
            code::break();
        }
        SpawnPos = value::location<projectile>;
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=-26112), SpawnPos);
        player::play_sound(sound("minecraft:block.beehive.work", 1, 2, "work1", "MASTER"), SpawnPos);
        select::event_target("PROJECTILE");
        entity::remove();
        variable::purge(BallUUID, match="NAME_CONTAINS");
        select::reset();
        BallReflect = 0;
        if(g`%var_local(ActivatorID)_InteractType`.equals(["portal", "special"])){
            code::call_function(p"BallPrtlCollide");
        }
        MaxDistToEnd = 1.5;
        if(g`%var_local(ActivatorID)_InteractType`.equals("special")){
            MaxDistToEnd = 3.5;
        }
        code::call_function(p"BallBlockReact");
        if(BallReflect.equals(1)){
            code::wait(2);
            code::call_function(p"RespawnBall");
        }
    }
}

function BallCbReflect{
    EntityUUID = value::uuid<victim_entity>;
    StandUUID = g`%var_local(EntityUUID)_StandUUID`;
    select::entity_by_name(StandUUID);
    if(value::selection_size.greater(0)){
        RayStart = value::location<projectile>.shift_location_on_vector(g`%var_local(BallUUID)_MoveVect`, -0.25);
        RayStart = RayStart.set_location_direction(g`%var_local(BallUUID)_MoveVect`);
        EndSide = variable::ray_trace_result(start=RayStart, ray_size=0, max_distance=1, ray_collision_mode="ONLY_ENTITIES");
        if(EndSide.not_equals(0)){
            SurfNormal = variable::get_vector_from_block_face(EndSide);
            CbAngle = value::yaw<current>;
            if(CbAngle.greater(180)){
                CbAngle = variable::subtract([CbAngle, 360]);
            }
            CbAngle = CbAngle.remainder(90);
            Angle = variable::multiply([CbAngle, -1]);
            if not (CbAngle.in_range(-45, 45)){
                Angle = variable::subtract(["%math(sign(%var_local(CbAngle))*90)", CbAngle]);
            }
            SurfNormal = SurfNormal.rotate_vector_around_axis(Angle, "Y");
            LifeTime = g`%var_local(BallUUID)_LifeTime`;
            ThrowVect = g`%var_local(BallUUID)_MoveVect`;
            SpawnPos = value::location<projectile>;
            player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=-26112), SpawnPos);
            player::play_sound(sound("minecraft:block.beehive.work", 1, 2, "work1", "MASTER"), SpawnPos);
            select::event_target("PROJECTILE");
            entity::remove();
            variable::purge(BallUUID, match="NAME_CONTAINS");
            select::reset();
            BallReflect = 1;
            ThrowVect = variable::reflect_vector_product(ThrowVect, SurfNormal);
            code::wait(2);
            code::call_function(p"RespawnBall");
            code::break();
        }
    }
    select::reset();
}

function BallPrtlCollide{
    select::entity_by_conditional(value::name<victim_entity>.text_starts_with("portal*"));
    select::filter_by_distance(SpawnPos, "1", "FALSE", "NEAREST");
    if(value::selection_size.greater("0.0")){
        DistToPrtl = variable::locations_distance(SpawnPos, value::location<current>);
        if(DistToPrtl.less_or_equals("2.0")){
            PrtlNameList = value::name<current>.split_text("*");
            PrtlOwner = PrtlNameList.get_list_value("1");
            if(g`PrtlIsLinked*portal*%var_local(PrtlOwner)*%selected_uuid%`.equals("1")){
                PrtlColorType = PrtlNameList.get_list_value("2.0");
                PortalCorner_1 = g`PrtlCorner_1*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                PortalCorner_2 = g`PrtlCorner_2*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                if(SpawnPos.in_range(PortalCorner_1, PortalCorner_2)){
                    PrtlNormalVect = g`PrtlNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlCenterPos = g`PrtlCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlDirVect = g`PrtlDirVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlLinkedNormalVect = g`PrtlLinkedNormalVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlLinkedCenterPos = g`PrtlLinkedCenterPos*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    PrtlLinkedDirVect = g`PrtlLinkedDirVect*portal*%var_local(PrtlOwner)*%selected_uuid%`;
                    code::call_function(p"BallPrtlTeleport");
                }
            }
        }
    }
}

function BallPrtlTeleport{
    PrtlShiftedTopPos = PrtlCenterPos.shift_location_on_vector(PrtlDirVect, 0.5);
    PrtlShiftedLowPos = PrtlCenterPos.shift_location_on_vector(PrtlDirVect, -0.5);
    PrtlDistToTop = variable::locations_distance(SpawnPos, PrtlShiftedTopPos);
    PrtlDistToLow = variable::locations_distance(SpawnPos, PrtlShiftedLowPos);
    if(PrtlDistToTop.less(PrtlDistToLow)){
        PrtlShiftedLinkedDir = variable::multiply_vector(PrtlLinkedDirVect, 0.5);
    }
    else{
        PrtlShiftedLinkedDir = variable::multiply_vector(PrtlLinkedDirVect, -0.5);
    }
    BallReflect = 1;
    SpawnPos = PrtlLinkedCenterPos.shift_location_on_vector(PrtlShiftedLinkedDir);
    SpawnPos = SpawnPos.align_location();
    ThrowVect = PrtlLinkedNormalVect;
    player::play_sound(sound("minecraft:entity.enderman.teleport", 1, 2, "MASTER"), PrtlCenterPos);
    player::play_sound(sound("minecraft:entity.enderman.teleport", 1, 2, "MASTER"), PrtlLinkedCenterPos);
    if(PrtlColorType.equals("BLUE")){
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=5592575), PrtlCenterPos);
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16755200), PrtlLinkedCenterPos);
    }
    else{
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16755200), PrtlCenterPos);
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=5592575), PrtlLinkedCenterPos);
    }
}

function BallBlockReact{
    if(BallReflect.equals(0)){
        BallReflect = 1;
        SurfNormal = variable::get_vector_from_block_face(value::event_block_face);
        OldThrowVect = ThrowVect;
        ThrowVect = variable::reflect_vector_product(ThrowVect, SurfNormal);
        DistToEnd = variable::locations_distance(SpawnPos, g`%var_local(ActivatorID)_ReceiverPos`);
        if(g`%var_local(ActivatorID)_InteractType`.equals("special")){
            Dist1 = variable::locations_distance(SpawnPos, location(-21.5, 114.5, -6.5, 0, 0));
            Dist2 = variable::locations_distance(SpawnPos, location(0.5, 114.5, -28.5, 0, 0));
            Dist3 = variable::locations_distance(SpawnPos, location(22.5, 114.5, -6.5, 0, 0));
            DistToEnd = variable::min([Dist1, Dist2, Dist3]);
        }
        if(DistToEnd.less_or_equals(MaxDistToEnd)){
            BallReflect = 0;
            g`%var_local(ActivatorID)_IsBlocked` = 1;
            g`%var_local(ActivatorID)_EndPoint` = g`%var_local(ActivatorID)_ReceiverPos`.shift_location_in_direction(-1);
            player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=-65536), SpawnPos);
            player::play_sound(sound("minecraft:block.beacon.power_select", 1, 2, "power3", "MASTER"), SpawnPos);
            world::set_block(g`%var_local(ActivatorID)_EndPoint`, "minecraft:redstone_block", "TRUE");
            select::entity_by_name(g`%var_local(ActivatorID)_ReceiverUUID`);
            entity::set_item_display_item("H4sIAAAAAAAA/0WNQQrCMBBFv5aKxpVr8SKuXHgGcRfGJJVAMlMyU7xOj9p25Vs+eDwHdDg/yeiVmmZh4PI+Yp8jbjVzCo0Gu3+a/Nir0Wqi/xZS7dAHmdgA7BxckDoKJzZ1uP7DMKlJ9VViKj6ulxMOQxEy7bfwMWNjAXAgMXeFAAAA");
            select::reset();
        }
        else{
            BlockType = value::event_block_location.get_block_material();
            if(BlockType.equals(["red_terracotta", "redstone_block"])){
                if(value::event_block_location.not_equals(g`%var_local(ActivatorID)_ReceiverPos`)){
                    player::display_particle(particle("CRIT", 4, 0.25, 0.25, 0, 0.20000000298023224, 0), SpawnPos);
                    player::play_sound(sound("minecraft:entity.bee.death", 1, 2, "death1", "MASTER"), SpawnPos);
                }
            }
            if(BlockType.equals("jack_o_lantern")){
                FacingVect = value::event_block_location.get_block_data("facing");
                FacingVect = variable::get_vector_from_block_face(FacingVect);
                if(FacingVect.not_equals(SurfNormal)){
                    ThrowVect = FacingVect;
                    SpawnPos = value::event_block_location.shift_location_on_vector(FacingVect);
                }
            }
            code::call_function(p"BallBlockReact2");
        }
    }
}

function BallBlockReact2{
    if(BlockType.equals("purpur_stairs")){
        FacingVect = value::event_block_location.get_block_data("half");
        FacingVect = vector(0, 1, 0);
        if(FacingVect.equals("top")){
            FacingVect = vector(0, -1, 0);
        }
        if(FacingVect.not_equals(SurfNormal)){
            ThrowVect = FacingVect;
            SpawnPos = value::event_block_location.shift_location_on_vector(FacingVect);
        }
    }
    if(BlockType.equals("nether_brick_wall")){
        StateNorth = value::event_block_location.get_block_data("north");
        StateWest = value::event_block_location.get_block_data("west");
        StateSouth = value::event_block_location.get_block_data("south");
        StateEast = value::event_block_location.get_block_data("east");
        Data = variable::set_text([StateNorth, ",", StateWest, ",", StateSouth, ",", StateEast], "CONCATENATION");
        DataMap = variable::create_map_from_values(["low,low,none,none", "none,low,low,none", "none,none,low,low", "low,none,none,low", "tall,tall,none,none", "none,tall,tall,none", "none,none,tall,tall", "tall,none,none,tall", "low,none,none,none", "none,low,none,none", "none,none,low,none", "none,none,none,low", "tall,none,none,none", "none,tall,none,none", "none,none,tall,none"], [vector(-1, 0, -1), vector(-1, 0, 1), vector(1, 0, 1), vector(1, 0, -1), vector(-1, 0, -1), vector(-1, 0, 1), vector(1, 0, 1), vector(1, 0, -1), vector(0, 1, -1), vector(-1, 1, 0), vector(0, 1, 1), vector(1, 1, 0), vector(0, -1, -1), vector(-1, -1, 0), vector(0, -1, 1)]);
        DataMap = DataMap.set_map_value("none,none,none,tall", vector(1, -1, 0));
        SurfVector = DataMap.get_map_value(Data, vector(0, 0, 0));
        InvThrowVect = variable::multiply_vector(OldThrowVect, -1);
        if(SurfVector.equals(vector(0, 0, 0))){
            ThrowVect = InvThrowVect;
        }
        else{
            Angle = variable::get_angle_between_vectors(InvThrowVect, SurfVector);
            if(Angle.greater(90)){
                ThrowVect = InvThrowVect;
            }
            else{
                ThrowVect = variable::reflect_vector_product(OldThrowVect, SurfVector);
                PartPos = value::event_block_location.shift_location_on_vector(SurfVector, 0.2);
                player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=-26112), PartPos);
            }
        }
        SpawnPos = value::event_block_location.shift_location_on_vector(ThrowVect, 1);
    }
}

function RespawnBall{
    if(g`%var(%var_local(ActivatorID)_EntityLevel)_LvlHasBall`.equals(1)){
        if(1.equals([g`%var_local(ActivatorID)_IsActive`, BallReflect])){
            select::entity_by_conditional(entity::has_custom_tag("name", "ball*%var(%var_local(ActivatorID)_EntityID)*", "STARTS_WITH"));
            if(value::selection_size.greater(0)){
                code::break();
            }
            code::call_function(p"SpawnBall");
        }
        else{
            g`%var_local(ActivatorID)_IsSpawned` = 0;
        }
    }
}

event<entity_explode>{
    if(entity::has_custom_tag("name", "ball*", "STARTS_WITH")){
        world::cancel_event();
    }
}

event<player_pre_attack_entity>{
    if(entity::has_custom_tag("name", "ball*", "STARTS_WITH")){
        world::cancel_event();
    }
}

function GravityLMB2{
    select::entity_by_conditional(entity::has_custom_tag("name", "ball*%var(%player%_Level)*", "STARTS_WITH"));
    select::filter_by_raycast(origin=value::eye_location<default>, max_distance=8, ray_size=1, consider_blocks="TRUE");
    select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
    if(value::selection_size.greater(0)){
        player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart, value::hitbox_midpoint_location<current>, 0.25, "DISTANCE");
        BallUUID = value::uuid<current>;
        ActivatorID = g`%var_local(BallUUID)_ActivatorID`;
        LifeTime = g`%var_local(BallUUID)_LifeTime`;
        SpawnPos = value::location<current>;
        player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=-26112), SpawnPos);
        player::play_sound(sound("minecraft:block.beehive.work", 1, 2, "work1", "MASTER"), SpawnPos);
        entity::remove();
        variable::purge(BallUUID, match="NAME_CONTAINS");
        BallReflect = 1;
        ThrowVect = value::direction_of_view<default>;
        code::wait(2);
        code::call_function(p"RespawnBall");
    }
}

function PlClearBall{
    select::entity_by_conditional(entity::has_custom_tag("name", "ball*%var(%player%_Level)*", "STARTS_WITH"));
    select::filter_by_raycast(origin=value::eye_location<default>, max_distance=16, ray_size=1);
    select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
    if(value::selection_size.greater("0.0")){
        player::set_item_cooldown("60", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxKkosj88sys9jZmBNzi/NK2FgYGBkAADt+ipTOwAAAA==");
        BallUUID = value::uuid<current>;
        ActivatorID = g`%var_local(BallUUID)_ActivatorID`;
        player::display_particle(particle("DUST_COLOR_TRANSITION", 1, 0, 0, 0, 0, 0, color=-26112), value::location<current>);
        player::play_sound(sound("minecraft:block.conduit.deactivate", 1, 2, "MASTER"), value::location<current>);
        entity::remove();
        variable::purge(BallUUID, match="NAME_CONTAINS");
        code::wait(60);
        code::call_function(p"RespawnBall");
    }
    else{
        select::reset();
        code::call_function(p"PlClearPrtls");
    }
}

function CbPrtlTeleport2{
    entity::teleport(TeleportPos, "FALSE");
    code::call_function(p"CbPrtlPreTrig");
    if(BlockPrtlLaunch.equals(1)){
        BlockPrtlLaunch = 0;
    }
    else{
        if(g`%var_local(StandUUID)_FlyTime`.equals(0)){
            if(g`%var_local(StandUUID)_LPADPrtlReLaunch`.equals(0)){
                entity::set_location(ThrowVect, "FALSE");
            }
            else{
                code::start_process(p"CbPrtlAddLaunch", "COPY", "FOR_EACH_IN_SELECTION");
            }
        }
        else{
            g`%var_local(StandUUID)_FlyY` = TeleportPos.get_coordinate("Y");
        }
    }
}

process CbPrtlAddLaunch{
    if(PrtlLinkedNormalVect.not_equals([vector(0, 1, 0), vector(0, -1, 0)])){
        targetLocation = g`%var_local(StandUUID)_LPADPrtlReLaunch`;
        g`%var_local(StandUUID)_LPADPrtlReLaunch` = 0;
        code::call_function("LPADSetLaunch");
        code::start_process("LPADLaunchEnt", "COPY", "CURRENT_TARGET");
    }
    else{
        g`%var_local(StandUUID)_LPADPrtlReLaunch` = 0;
        entity::set_location(ThrowVect, "FALSE");
    }
}

process PlPrtlLaunch{
    if(BlockPrtlLaunch.equals(0)){
        if(g`%player%_FlyTime`.equals(0)){
            if(g`%player%_LPADPrtlReLaunch`.not_equals(0)){
                targetLocation = g`%player%_LPADPrtlReLaunch`;
                g`%player%_LPADPrtlReLaunch` = 0;
                code::call_function(p"LPADSetLaunch");
                code::start_process("LPADLaunchPl", "COPY");
                g`%player%_InTeleportation` = 0;
                code::break();
            }
            player::set_movement_speed(0, "FLY");
            player::set_flying();
            ping = value::ping<default>;
            code::wait("%math(floor(%var_local(ping)/50)+2)");
            player::set_flying("FALSE");
            player::set_velocity(ThrowVect, "FALSE");
        }
        code::call_function("PlPrtlClearArea");
    }
    g`%player%_InTeleportation` = 0;
}

function PlPrtlClearArea{
    TEMPLength = ThrowVect.get_vector_length();
    TEMPLength = variable::multiply([TEMPLength, 4]);
    TEMPStartPos = TeleportPos.set_location_direction(ThrowVect);
    code::call_function(p"TEMPLsrBlDetect");
    if(TEMPType.equals("nether_portal")){
        player::set_item_cooldown("5.0", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
        code::call_function(p"UnloadPrtls");
    }
}

function Lvl_UNLOAD2{
    code::call_function(p"UNLOAD_Sign");
    code::call_function(p"UNLOAD_Decor");
    code::call_function(p"UNLOAD_Trig");
    code::call_function(p"UNLOAD_TrigFast");
    code::call_function("UNLOAD_Laser");
    code::call_function(p"UNLOAD_LPAD");
    code::call_function(p"UNLOAD_MPlat");
    code::call_function(p"UNLOAD_Fan");
    code::call_function(p"UNLOAD_Ball");
    code::call_function(p"UNLOAD_Turret");
    code::call_function(p"UNLOAD_ECore");
}

function LOAD_Trig{
    g`%var_local(NextLevel)_LvlHasTrig` = 1;
    if(IsFirstLoad.equals(1)){
        Corner_1 = DataList.get_list_value(1);
        Corner_2 = DataList.get_list_value(2);
        TrigType = DataList.get_list_value(3);
        FunctionName = DataList.get_list_value(4, "0");
        FunctionData = DataList.get_list_value(5, "0");
        TrigCenter = variable::center_location([Corner_1, Corner_2]);
        g`TrigData*%var_local(TrigCenter)*Corner_1` = Corner_1.shift_coordinate(0);
        g`TrigData*%var_local(TrigCenter)*Corner_2` = Corner_2.shift_coordinate(0);
        g`TrigData*%var_local(TrigCenter)*TrigType` = TrigType;
        g`TrigData*%var_local(TrigCenter)*FunctionName` = FunctionName;
        g`TrigData*%var_local(TrigCenter)*FunctionData` = FunctionData;
        g`LvlTrigList_%var_local(NextLevel)`.append_value(TrigCenter);
    }
}

function UNLOAD_Trig{
    if(g`%var_local(CurrentLevel)_LvlHasTrig`.equals(1)){
        if not (g`LvlTrigList_%var_local(CurrentLevel)`.list_is_empty()){
            repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigList_%var_local(CurrentLevel)`){
                variable::purge("*%var_local(TrigCenter)*", match="NAME_CONTAINS");
            }
        }
    }
}

function TrigRunFunc{
    if(g`TrigData*%var_local(TrigCenter)*FunctionName`.not_equals("0")){
        if not (g`TrigData*%var_local(TrigCenter)*FunctionName`.text_starts_with("*")){
            code::call_function("%var(TrigData*%var_local(TrigCenter)*FunctionName)");
        }
        else{
            code::start_process("%var(TrigData*%var_local(TrigCenter)*FunctionName)", "COPY", "FOR_EACH_IN_SELECTION");
        }
    }
}

function PlLvlTrig{
    if(g`%var(%player%_Level)_LvlHasTrig`.equals(1)){
        if not (g`LvlTrigList_%var(%player%_Level)`.list_is_empty()){
            CurrentBlockPos = CurrentPos.align_location("REMOVE", align_mode="CORNER");
            if(CurrentBlockPos.not_equals(PrevBlockPos)){
                if(TrigFindTick.greater_or_equals(2)){
                    TrigFindTick = 0;
                    repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigList_%var(%player%_Level)`){
                        code::call_function(p"WAIT");
                        if(CurrentPos.location_in_range(g`TrigData*%var_local(TrigCenter)*Corner_1`, g`TrigData*%var_local(TrigCenter)*Corner_2`, "FULL_BLOCK_RANGE")){
                            if(g`TrigData*%var_local(TrigCenter)*TrigType`.not_equals("always")){
                                if(g`TrigData*%player%*%var_local(TrigCenter)*IsActive`.equals(0)){
                                    g`TrigData*%player%*%var_local(TrigCenter)*IsActive` = 1;
                                    code::call_function(p"TrigRunFunc");
                                }
                            }
                            else{
                                code::call_function(p"TrigRunFunc");
                            }
                        }
                        else{
                            if(g`TrigData*%player%*%var_local(TrigCenter)*IsActive`.equals(1)){
                                if(g`TrigData*%var_local(TrigCenter)*TrigType`.equals("enter")){
                                    g`TrigData*%player%*%var_local(TrigCenter)*IsActive` = 0;
                                }
                            }
                        }
                    }
                }
                TrigFindTick = variable::add([TrigFindTick, 1]);
            }
            PrevBlockPos = CurrentBlockPos;
        }
    }
    code::call_function(p"PlLvlTrigFast");
}

function CbLvlTrig{
    if(g`%var(%var_local(StandUUID)_Level)_LvlHasTrig`.equals(1)){
        if not (g`LvlTrigList_%var(%var_local(StandUUID)_Level)`.list_is_empty()){
            CurrentBlockPos = StandPos.align_location("REMOVE", align_mode="CORNER");
            if(CurrentBlockPos.not_equals(PrevBlockPos)){
                if(TrigFindTick.greater_or_equals(2)){
                    TrigFindTick = 0;
                    repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigList_%var(%var_local(StandUUID)_Level)`){
                        code::call_function(p"WAIT");
                        if(StandPos.location_in_range(g`TrigData*%var_local(TrigCenter)*Corner_1`, g`TrigData*%var_local(TrigCenter)*Corner_2`, "FULL_BLOCK_RANGE")){
                            if(g`TrigData*%var_local(TrigCenter)*TrigType`.not_equals("always")){
                                if(g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive`.equals(0)){
                                    g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive` = 1;
                                    code::call_function(p"TrigRunFunc");
                                }
                            }
                            else{
                                code::call_function(p"TrigRunFunc");
                            }
                        }
                        else{
                            if(g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive`.equals(1)){
                                if(g`TrigData*%var_local(TrigCenter)*TrigType`.equals("enter")){
                                    g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive` = 0;
                                }
                            }
                        }
                    }
                }
                TrigFindTick = variable::add([TrigFindTick, 1]);
            }
            PrevBlockPos = CurrentBlockPos;
        }
    }
    code::call_function(p"CbLvlTrigFast");
}

function PlPrtlPreTrig{
    BlockPrtlLaunch = 0;
    if(g`%var(%player%_Level)_LvlHasTrig`.equals(1)){
        if not (g`LvlTrigList_%var(%player%_Level)`.list_is_empty()){
            repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigList_%var(%player%_Level)`){
                code::call_function(p"WAIT");
                if(TeleportPos.location_in_range(g`TrigData*%var_local(TrigCenter)*Corner_1`, g`TrigData*%var_local(TrigCenter)*Corner_2`, "FULL_BLOCK_RANGE")){
                    if(g`TrigData*%player%*%var_local(TrigCenter)*IsActive`.equals(0)){
                        g`TrigData*%player%*%var_local(TrigCenter)*IsActive` = 1;
                        code::call_function(p"TrigRunFunc");
                    }
                }
                else{
                    if(g`TrigData*%player%*%var_local(TrigCenter)*IsActive`.equals(1)){
                        if(g`TrigData*%var_local(TrigCenter)*TrigType`.equals("enter")){
                            g`TrigData*%player%*%var_local(TrigCenter)*IsActive` = 0;
                        }
                    }
                }
            }
        }
    }
}

function CbPrtlPreTrig{
    BlockPrtlLaunch = 0;
    if(g`%var(%var_local(StandUUID)_Level)_LvlHasTrig`.equals(1)){
        if not (g`LvlTrigList_%var(%var_local(StandUUID)_Level)`.list_is_empty()){
            repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigList_%var(%var_local(StandUUID)_Level)`){
                code::call_function(p"WAIT");
                if(TeleportPos.location_in_range(g`TrigData*%var_local(TrigCenter)*Corner_1`, g`TrigData*%var_local(TrigCenter)*Corner_2`, "FULL_BLOCK_RANGE")){
                    if(g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive`.equals(0)){
                        g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive` = 1;
                        code::call_function(p"TrigRunFunc");
                    }
                }
                else{
                    if(g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive`.equals(1)){
                        if(g`TrigData*%var_local(TrigCenter)*TrigType`.equals("enter")){
                            g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive` = 0;
                        }
                    }
                }
            }
        }
    }
}

function TrigLaunch{
    BlockPrtlLaunch = 1;
    targetLocation = g`TrigData*%var_local(TrigCenter)*FunctionData`.shift_coordinate(0);
    code::start_process(p"TrigLaunchAsync", "COPY", "FOR_EACH_IN_SELECTION");
}

process TrigLaunchAsync{
    code::call_function(p"LPADSetLaunch");
    if(value::entity_type<default>.equals("player")){
        code::start_process("LPADLaunchPl", "COPY");
    }
    else{
        code::start_process(p"LPADLaunchEnt", "COPY");
    }
}

function TrigAreaDmg{
    if(value::entity_type<current>.equals("player")){
        BelowType = CurrentPos.shift_coordinate(-0.2, "Y");
        BelowType = BelowType.get_block_material();
        if(BelowType.not_equals(["air", "light", "structure_void", "glow_lichen"])){
            if(g`%player%_Level`.not_equals(-33)){
                if(g`TrigData*%var_local(TrigCenter)*FunctionData`.not_equals("0")){
                    g`%player%_RespawnPoint` = g`TrigData*%var_local(TrigCenter)*FunctionData`.shift_coordinate(0);
                }
                player::damage(100);
            }
            else{
                player::damage(8);
                player::launch_up(1.5, "FALSE");
            }
        }
    }
    else{
        BelowType = StandPos.shift_coordinate(-0.2, "Y");
        BelowType = BelowType.get_block_material();
        if(BelowType.not_equals(["air", "light", "structure_void", "glow_lichen"])){
            g`%var_local(StandUUID)_IsDeleted` = "1";
        }
    }
}

process `*ACT3Anim2`{
    if(value::entity_type<default>.equals("player")){
        code::call_function(p"RepeatIfDialog");
        g`%player%_IntroStarted` = 1;
        g`%player%_ShowDialog` = 0;
        code::wait(10);
        code::call_function("UnloadPrtls");
        player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
        player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
        if(value::location<default>.location_in_range(location(76.5, 57.5, 178.5, 0, 0), location(70.5, 63.5, 184.5, 0, 0), "FULL_BLOCK_RANGE")){
            Pos = value::location<default>.shift_coordinate(8);
            player::teleport(Pos, keep_velocity="TRUE");
        }
        else{
            player::teleport(location(81.5, 58, 180.5, 0, 0), "FALSE", "FALSE");
        }
        player::play_sound(sound("minecraft:block.iron_door.close", 1, 1, "MASTER"), location(81.5, 58.5, 178.5, 0, 0));
        code::wait(40);
        g`%player%_HasPortalGun` = "0";
        player::set_items(["AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`, g`ItemEmpty`]);
        code::call_function(p"ParticleViewStart");
        ParticleViewStart = ParticleViewStart.shift_coordinate(20, "PITCH");
        world::spawn_item_display(ParticleViewStart, "intro*%player%", "H4sIAAAAAAAA/02MMQ7CMBAEF6IgMFXS5ic0NHkDoouM7UiW4lvkuygtT4d0TD0zDmhwHb35R6qaKUD3POOYI/qSJYXqZ7uFStUXtwZt4CoG4ODgAsubksTUYfizVzWWqTCmZYq/9QWneaE3bffw/sHOF9UsJ456AAAA");
        select::last_entity();
        IntroUUID = value::uuid<current>;
        entity::set_default_visible();
        player::hide_entity(IntroUUID, "FALSE");
        entity::set_display_teleport_duration(2);
        MoveDir = variable::get_vector_between_locations(value::location<current>, location(81.5, 60.5, 181.5, 0, 0));
        MoveDir = variable::multiply_vector(MoveDir, 0.025);
        repeat::multi_times(amount=40){
            entity::set_display_interpolation(2);
            entity::set_display_rotation_from_axis_angle(ParticleViewSideVect, 10, "ADD");
            MovePos = value::location<current>.shift_location_on_vector(MoveDir);
            entity::teleport(MovePos, "FALSE");
            code::wait(2);
        }
        code::call_function(p"ACT3Anim2-2");
    }
}

function `ACT3Anim2-2`{
    repeat::multi_times(amount=10){
        entity::set_display_interpolation(2);
        entity::set_display_rotation_from_axis_angle(ParticleViewSideVect, 10, "ADD");
        code::wait(2);
    }
    CurrentPos = value::location<current>;
    world::spawn_item_display(CurrentPos, "intro*%player%*2", "H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YWLgDIgtihxXipTYKHbuD3Tp278XgAnnZ/L04m5FBbi8j9iXjGsrwtTT4ncf3StHo+E8YSYd4gB2AYG0fVRY3AJum6Bhri02zVxj/u1POCxVk9v8hw+sfQHCeOWzfgAAAA==");
    select::last_entity();
    Intro2UUID = value::uuid<current>;
    entity::set_display_billboard("CENTER");
    entity::set_display_scale(vector(2.5, 2.5, 2.5));
    entity::set_default_visible();
    player::hide_entity(Intro2UUID, "FALSE");
    select::entity_by_name(IntroUUID);
    repeat::multi_times(amount=25){
        entity::set_display_interpolation(2);
        entity::set_display_rotation_from_axis_angle(ParticleViewSideVect, 10, "ADD");
        RandVect = variable::set_vector("%math(%random%*2-1)", "%math(%random%*2-1)", "%math(%random%*2-1)");
        RandVect = RandVect.set_vector_length(0.5);
        Part = particle("FIREWORK", 1, 0, 0, 0, 0, 0).set_particle_offset(RandVect);
        player::display_particle([Part, particle("EXPLOSION_EMITTER", 1, 0, 0, 0, 0, 0)], CurrentPos);
        player::play_sound_sequence([sound("minecraft:item.trident.hit_ground", 1, 0.5, "MASTER"), sound("minecraft:block.conduit.deactivate", 1, 1, "MASTER"), sound("minecraft:ambient.basalt_deltas.additions", 1, 2, "basaltground2", "MASTER")], CurrentPos, 0);
        code::wait(2);
    }
    player::display_particle(particle("EXPLOSION", 1, 0, 0, 0, 0, 0), CurrentPos);
    select::add_entity_by_name(Intro2UUID);
    entity::remove();
    select::reset();
    code::wait(20);
    Pos = value::location<default>.shift_coordinate(8);
    player::teleport(Pos, keep_velocity="TRUE");
    player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
    player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(89.5, 58.5, 184.5, 0, 0));
    g`%player%_IntroStarted` = 0;
}

function R29_End{
    g`%player%_R29Ending` = 1;
    code::call_function("Lvl_UNLOAD");
    code::call_function("Lvl_LOAD");
    g`%player%_Level` = NextLevel;
    code::call_function("SaveLvlTime");
    s`%player%_SavedLevel` = g`%player%_Level`;
    if(s`%player%_MaxPlayedLevel`.less(s`%player%_SavedLevel`)){
        s`%player%_MaxPlayedLevel` = s`%player%_SavedLevel`;
    }
    player::set_item_cooldown(60, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_item_cooldown(60, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
    code::wait(20);
    if not (value::location<default>.location_in_range(location(82.5, 58.5, 192.5, 0, 0), location(80.5, 60.5, 188.5, 0, 0), "FULL_BLOCK_RANGE")){
        player::teleport(location(80.5, 58, 198.5, -90, 0), "FALSE", "FALSE");
    }
    else{
        R20_TPPos = value::location<default>.shift_coordinate(8, "Z");
        player::teleport(R20_TPPos, keep_velocity="TRUE");
    }
    player::stop_sound([]);
    player::play_sound(sound("minecraft:block.iron_door.close", 1, 1.25, "MASTER"), location(83.5, 58.5, 198.5, 0, 0));
    code::wait(40);
    code::call_function(p"Transition");
    player::set_experience(g`%player%_Level`, "LEVEL");
    code::call_function("LevelTP");
    g`%player%_R29Ending` = 0;
}

process `*R30_ChGravGun`{
    if(value::entity_type<default>.equals("player")){
        if(g`%player%_HasGravityGun`.equals(0)){
            if(g`%player%_ShowDialog`.equals(0)){
                Messages = "Следует осмотреть другую комнату...";
                code::call_function(p"SelfDialog");
            }
        }
        else{
            TPPos = value::location<default>.shift_coordinate(-10, "Z");
            player::teleport(TPPos, keep_velocity="TRUE");
            player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(40.5, 41.5, -79.5, 0, 0));
        }
    }
}

function PauseCONTINUE2{
    if(g`%player%_Level`.equals(0)){
        code::call_function(p"MusicPlay");
        if(g`%player%_IntroStarted`.equals(1)){
            g`%player%_IntroStarted` = 0;
            TPPos = value::location<default>.shift_coordinate("18.0", "Z");
            player::teleport(TPPos, "TRUE");
            Messages = ["audio|cubed.dialog.intro_2", "text|Проследуйте к выходу, чтобы начать тестирование.|88"];
            code::start_process(p"DialogAudioAsync", "COPY");
            player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(-1.5, 6.5, 41.5, 0, 0));
            player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(0.5, 6.5, 47.5, 0, 0));
        }
    }
    else{
        if(g`%player%_IsInSecret`.equals(0)){
            code::call_function(p"MusicPlay");
            if(g`%player%_Level`.equals(21)){
                if(g`%player%_IntroStarted`.equals(1)){
                    g`%player%_IntroStarted` = 0;
                    player::teleport(location(-55.5, 41, 13.5, -180, 0), "FALSE");
                    player::set_item_cooldown(5, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
                    player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(-55.5, 41.5, 10.5, 0, 0));
                    g`%player%_TitleTicks` = "60";
                    player::send_title("&#ffb657&l« АКТ 3 »", "&#abc4d6Уровень &#ffb657%var(%player%_Level)", 5, "50.0", 5);
                    g`%player%_HasPortalGun` = "0";
                }
            }
        }
        else{
            g`%player%_SecretSoundTicks` = 0;
        }
    }
}

event<player_fail_move>{
    if(g`%player%_InMenu`.equals(0)){
        if(value::event_fail_move_reason.equals("clipped_into_block")){
            if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSkpNLSnKzy9hZmBNzi/NK2FgYGBkAACq4ndoOwAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
                world::set_event_move_allowed();
            }
        }
    }
}

process ViewDistAsync{
    Ping = value::ping<default>;
    code::wait("%math(1+ceil(%var_local(Ping)/50))");
    RenderDist = 6;
    if(NextLevel.equals(-35)){
        RenderDist = 8;
    }
    if(NextLevel.equals(888)){
        if(g`%player%_IntroStarted`.equals(1)){
            RenderDist = 16;
        }
    }
    player::set_fog_distance(RenderDist);
}

function LOAD_Turret{
    g`%var_local(NextLevel)_LvlHasTurret` = 1;
    if(IsFirstLoad.equals(1)){
        SpawnPos = DataList.get_list_value(1);
        Type = DataList.get_list_value(2);
        Model = DataList.get_list_value(3, "normal");
        SpawnPos = SpawnPos.shift_coordinate(0);
        EntityID = variable::set_text([NextLevel, "*", LoadID], "CONCATENATION");
        IsOnSpider = 0;
        code::call_function(p"SpawnTurret");
        LoadID = variable::add([LoadID, 1]);
    }
}

function UNLOAD_Turret{
    if(g`%var_local(CurrentLevel)_LvlHasTurret`.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("turret*%var_local(CurrentLevel)*"));
        if(value::selection_size.greater("0.0")){
            repeat::for_each_in_list(value_variable=TurretUUID, list=value::selection_target_uuids){
                if(g`%var_local(TurretUUID)_PartType`.equals("head")){
                    g`LvlTurretList_%var_local(CurrentLevel)` = g`LvlTurretList_%var_local(CurrentLevel)`.remove_list_value(TurretUUID);
                }
            }
            variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
            entity::remove();
        }
        select::reset();
        if(g`LvlTurretList_%var_local(CurrentLevel)`.list_is_empty()){
            variable::purge("LvlTurretList_%var_local(CurrentLevel)");
        }
    }
}

function SpawnTurret{
    if(IsOnSpider.equals(0)){
        NameLegs = variable::set_text(["turret*", EntityID, "*legs*%random_uuid%"], "CONCATENATION");
        LegsSpawnPos = SpawnPos;
        DisplayItem = "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+houANiM4yZwdZ2LdRfPl/Ag1Tz4wDOhzvwcIjTS1TgdNzj22OONesSaYw2PXNEv2rUD4deuGsBmDj4IR1pCa15nD5+zI3Y/WVMRUf1/kBu6EwWOu/4Q0/FrccvkV8AAAA";
        if(Model.equals("ceil")){
            DisplayItem = "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+houANKJ1lzg6ysG9RfPlfngapmHpmHNDheA8WHmlqmQqchj22OeJcsyaZwmjXF0v0z0J5d+iFsxqAjYMT1g81qTWHy9+XuRmrr4yp+PibH7AbC4O1fg1vC1a+AwJWVHwAAAA=";
            LegsSpawnPos = LegsSpawnPos.set_location_direction(vector(0, 0, 1));
        }
        TEMP = LegsSpawnPos.get_block_material();
        world::spawn_item_display(LegsSpawnPos, NameLegs, DisplayItem);
        select::last_entity();
        LegsUUID = value::uuid<current>;
        if(Model.equals("ceil")){
            entity::set_display_translation(vector(0, 2, 0));
        }
        g`%var_local(LegsUUID)_PartType` = "legs";
        g`%var_local(LegsUUID)_Level` = NextLevel;
    }
    HeadSpawnPos = SpawnPos.shift_coordinate(0.75, "Y");
    NameHead = variable::set_text(["turret*", EntityID, "*head*%random_uuid%"], "CONCATENATION");
    TEMP = HeadSpawnPos.get_block_material();
    if(Type.equals("normal")){
        DisplayItem = "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+hSsEbUDrLnB1kYd+i+PL/kIqpZ8YBHc6PYOGZ5papwGU8Yp8jrjVrkjlMdn+zRP8qlE+HXrioAdg5OGH9UpNac7j9fVmasfrKmIqPv/kJh6kwWOu3cBiwsQLbFuZKfAAAAA==";
        if(Model.equals("ceil")){
            DisplayItem = "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+houANKJ1lzg6ysG9RfPlvngKpmHpmHNDheA8WHmlqmQqchj22OeJcsyaZwmjXF0v0z0J5d+iFsxqAjYMT1g81qTWHy9+XuRmrr4yp+PibH7AbC4O1fg1vC1a+NQf6U3wAAAA=";
        }
        world::spawn_item_display(HeadSpawnPos, NameHead, DisplayItem);
    }
    else{
        world::spawn_item_display(HeadSpawnPos, NameHead, "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+houANKJ1lzg6ysG9RfOnzdEjF1DPjgA7He7DwSFPLVOA07LHNEeeaNckURru+WKJ/Fsq7Qy+c1QBsHJywfqhJrTlc/r7MzVh9ZUzFx9/8gN1YGKz1a3hbsPIFbwgOW3wAAAA=");
    }
    select::last_entity();
    TurretUUID = value::uuid<current>;
    g`%var_local(TurretUUID)_PartType` = "head";
    g`%var_local(TurretUUID)_Level` = NextLevel;
    g`%var_local(TurretUUID)_Type` = Type;
    g`%var_local(TurretUUID)_Model` = Model;
    if(IsOnSpider.equals(0)){
        g`%var_local(TurretUUID)_LegsUUID` = LegsUUID;
        g`%var_local(LegsUUID)_TurretUUID` = TurretUUID;
    }
    code::call_function(p"SpawnTurret2");
}

function SpawnTurret2{
    g`%var_local(TurretUUID)_State` = "idle";
    g`%var_local(TurretUUID)_RealLookVect` = HeadSpawnPos.get_location_direction();
    g`%var_local(TurretUUID)_RotAngle` = g`%var_local(TurretUUID)_RealLookVect`;
    g`%var_local(TurretUUID)_RotAdder` = 2;
    g`%var_local(TurretUUID)_NameBullet` = variable::set_text(["turret*", EntityID, "*bullet*%random_uuid%"], "CONCATENATION");
    entity::set_display_teleport_duration(2);
    if(IsOnSpider.equals(1)){
        g`%var_local(TurretUUID)_IsOnSpider` = 1;
        g`%var_local(TurretUUID)_SpiderBodyUUID` = SpiderBodyUUID;
        entity::set_display_translation(vector(0, 0.65, 0));
    }
    select::reset();
    if(g`LvlTurretList_%var_local(NextLevel)`.list_is_empty()){
        g`LvlTurretList_%var_local(NextLevel)`.append_value(TurretUUID);
        code::start_process(p"TurretLOOP", "COPY", "NO_TARGET");
    }
    else{
        if not (g`LvlTurretList_%var_local(NextLevel)`.list_contains_value(TurretUUID)){
            g`LvlTurretList_%var_local(NextLevel)`.append_value(TurretUUID);
        }
    }
}

process TurretLOOP{
    repeat::forever(){
        if(g`LvlTurretList_%var_local(NextLevel)`.equals(0)){
            code::break();
        }
        if(g`LvlTurretList_%var_local(NextLevel)`.list_is_empty()){
            code::break();
        }
        repeat::for_each_in_list(value_variable=TurretUUID, list=g`LvlTurretList_%var_local(NextLevel)`){
            code::call_function(p"WAIT");
            select::entity_by_name(TurretUUID);
            CurrentPos = value::location<current>.shift_coordinate(0.025, "Y");
            if(g`%var_local(TurretUUID)_IsOnSpider`.equals(1)){
                if(g`%var(%var_local(TurretUUID)_SpiderBodyUUID)_IsDead`.equals(1)){
                    g`TurretUUIDList` = g`TurretUUIDList`.remove_list_value(TurretUUID);
                    code::skip_iteration();
                }
                CurrentPos = g`%var(%var_local(TurretUUID)_SpiderBodyUUID)_CurrentPos`.set_location_direction(value::direction_of_view<current>);
                entity::teleport(CurrentPos, "FALSE");
                CurrentPos = CurrentPos.shift_coordinate(0.025, "Y");
                CurrentPos = CurrentPos.shift_location_in_direction(0.65, "UPWARD");
                g`%var_local(TurretUUID)_RealLookVect` = g`%var(%var_local(TurretUUID)_SpiderBodyUUID)_ForwardVect`;
                g`%var_local(TurretUUID)_RotAngle` = g`%var_local(TurretUUID)_RealLookVect`;
            }
            LaserTargetPos = CurrentPos.shift_location_in_direction(32);
            LookVect = CurrentPos.get_location_direction();
            PlaySoundLevel = g`%var_local(TurretUUID)_Level`;
            IsActive = 1;
            if(g`%var_local(TurretUUID)_Model`.equals("ceil")){
                if(g`BossTurretsActive`.equals(0)){
                    IsActive = 0;
                }
            }
            if(IsActive.equals(1)){
                code::call_function(p"TurretFindPl");
                code::call_function(p"TurretStates");
                code::call_function(p"TurretLaser");
            }
        }
        code::wait(2);
    }
}

function TurretFindPl{
    if(l`%var_local(TurretUUID)_Tick1`.greater_or_equals(10)){
        l`%var_local(TurretUUID)_Tick1` = 0;
        PlayerCandidats = variable::create_map();
        code::call_function(p"TurretAngles");
        code::call_function("TurretFixList");
        repeat::for_each_in_list(value_variable=PlayerUUID, list=g`LvlPlayerList_%var(%var_local(TurretUUID)_Level)`){
            code::call_function(p"WAIT");
            select::player_by_name(PlayerUUID);
            if(g`%selected%_InMenu`.equals(0)){
                if(player::gamemode_equals("ADVENTURE")){
                    PlayerUUID = value::uuid<current>;
                    ToPlayerVect = variable::get_vector_between_locations(CurrentPos, value::hitbox_midpoint_location<current>);
                    ToPlayerAngle = variable::get_angle_between_vectors(LookVect, ToPlayerVect);
                    ToPlayerRealAngle = variable::get_angle_between_vectors(g`%var_local(TurretUUID)_RealLookVect`, ToPlayerVect);
                    if(ToPlayerAngle.less_or_equals(Angle1)){
                        if(ToPlayerRealAngle.less_or_equals(Angle2)){
                            RayStartPos = CurrentPos.set_location_direction(ToPlayerVect);
                            RayEntities = PlayerUUID;
                            RayEntityUUID = variable::ray_trace_result(start=RayStartPos, ray_size=0, max_distance=40, entities=RayEntities, ray_collision_mode="BLOCKS_AND_ENTITIES");
                            if(RayEntityUUID.equals(PlayerUUID)){
                                ToPlayerDist = ToPlayerVect.get_vector_length();
                                PlayerCandidats = PlayerCandidats.set_map_value(PlayerUUID, ToPlayerDist);
                            }
                        }
                    }
                }
            }
        }
        if not (PlayerCandidats.list_is_empty()){
            PlayerCandidats = PlayerCandidats.sort_map(sort_type="VALUES");
            PlayerCandidats = PlayerCandidats.get_map_keys();
            l`%var_local(TurretUUID)_TargetPlayerUUID` = PlayerCandidats.get_list_value(0);
            code::call_function(p"TurretSwitchState");
        }
        else{
            code::call_function(p"TurretResetState");
        }
        select::entity_by_name(TurretUUID);
    }
    l`%var_local(TurretUUID)_Tick1` = variable::add([l`%var_local(TurretUUID)_Tick1`, 1]);
}

function TurretSwitchState{
    CurrentState = g`%var_local(TurretUUID)_State`;
    if(g`%var_local(TurretUUID)_IsOnSpider`.equals(1)){
        if(g`%var(%var_local(TurretUUID)_SpiderBodyUUID)_DontShoot`.equals(1)){
            SavedState = CurrentState;
            g`%var_local(TurretUUID)_State` = "idle";
            code::return_function();
        }
    }
    if(SavedState.not_equals(0)){
        CurrentState = SavedState;
        SavedState = 0;
    }
    if(CurrentState.equals("idle")){
        g`%var_local(TurretUUID)_State` = "target_player";
        l`%var_local(TurretUUID)_Tick2` = 0;
        PlaySoundPos = CurrentPos;
        PlaySoundSound = sound("minecraft:entity.breeze.inhale", 2, 2, "inhale1", "MASTER");
        code::start_process(p"PlaySoundLvl", "COPY");
    }
    if(CurrentState.equals(["target_player", "target_lost"])){
        if(l`%var_local(TurretUUID)_Tick2`.greater(0)){
            l`%var_local(TurretUUID)_Tick2` = variable::subtract([l`%var_local(TurretUUID)_Tick2`, 1]);
        }
        else{
            g`%var_local(TurretUUID)_State` = "target_shoot";
            l`%var_local(TurretUUID)_Shots` = 0;
            PlaySoundPos = CurrentPos;
            PlaySoundSound = sound("minecraft:entity.bat.ambient", 2, 0.5, "idle2", "MASTER");
            code::start_process(p"PlaySoundLvl", "COPY");
        }
    }
}

function TurretResetState{
    CurrentState = g`%var_local(TurretUUID)_State`;
    if(CurrentState.equals(["target_player", "target_shoot"])){
        g`%var_local(TurretUUID)_State` = "target_lost";
        l`%var_local(TurretUUID)_Tick3` = 2;
        PlaySoundPos = CurrentPos;
        PlaySoundSound = sound("minecraft:entity.bat.hurt", 2, 2, "hurt4", "MASTER");
        code::start_process(p"PlaySoundLvl", "COPY");
    }
    if(CurrentState.equals("target_lost")){
        if(l`%var_local(TurretUUID)_Tick3`.greater(0)){
            l`%var_local(TurretUUID)_Tick3` = variable::subtract([l`%var_local(TurretUUID)_Tick3`, 1]);
        }
        else{
            g`%var_local(TurretUUID)_State` = "idle";
            PlaySoundPos = CurrentPos;
            PlaySoundSound = sound("minecraft:entity.bat.takeoff", 2, 2, "MASTER");
            code::start_process(p"PlaySoundLvl", "COPY");
        }
    }
}

function TurretStates{
    if(g`%var_local(TurretUUID)_State`.equals("idle")){
        if(g`%var_local(TurretUUID)_IsOnSpider`.equals(0)){
            ToRealAngle = variable::get_angle_between_vectors(g`%var_local(TurretUUID)_RotAngle`, g`%var_local(TurretUUID)_RealLookVect`);
            if(ToRealAngle.greater(45)){
                if(l`%var_local(TurretUUID)_RotChanged`.equals(0)){
                    l`%var_local(TurretUUID)_RotChanged` = 1;
                    g`%var_local(TurretUUID)_RotAdder` = variable::multiply([g`%var_local(TurretUUID)_RotAdder`, -1]);
                }
            }
            else{
                if(l`%var_local(TurretUUID)_RotChanged`.equals(1)){
                    l`%var_local(TurretUUID)_RotChanged` = 0;
                }
            }
            g`%var_local(TurretUUID)_RotAngle` = g`%var_local(TurretUUID)_RotAngle`.rotate_vector_around_axis(g`%var_local(TurretUUID)_RotAdder`, "Y");
        }
        entity::set_rotation_by_vector(g`%var_local(TurretUUID)_RotAngle`);
        if(g`%var_local(TurretUUID)_Model`.equals("ceil")){
            entity::set_rotation_by_vector(vector(0, -1, 0));
        }
    }
    if(g`%var_local(TurretUUID)_State`.equals(["target_player", "target_shoot"])){
        select::player_by_name(l`%var_local(TurretUUID)_TargetPlayerUUID`);
        LaserTargetPos = value::hitbox_midpoint_location<current>;
        ToPlayerVect = variable::get_vector_between_locations(CurrentPos, LaserTargetPos);
        g`%var_local(TurretUUID)_RotAngle` = ToPlayerVect.set_vector_component(0, "Y");
        ToRealAngle = variable::get_angle_between_vectors(ToPlayerVect, g`%var_local(TurretUUID)_RealLookVect`);
        if(ToRealAngle.greater(45)){
            MinVect = g`%var_local(TurretUUID)_RealLookVect`.rotate_vector_around_axis(-45, "Y");
            MaxVect = g`%var_local(TurretUUID)_RealLookVect`.rotate_vector_around_axis(45, "Y");
            MinAngle = variable::get_angle_between_vectors(ToPlayerVect, MinVect);
            MaxAngle = variable::get_angle_between_vectors(ToPlayerVect, MaxVect);
            if(MinAngle.less(MaxAngle)){
                g`%var_local(TurretUUID)_RotAngle` = MinVect;
            }
            else{
                g`%var_local(TurretUUID)_RotAngle` = MaxVect;
            }
        }
        select::entity_by_name(TurretUUID);
        entity::set_rotation_by_vector(ToPlayerVect);
    }
    code::call_function(p"TurretStates2");
}

function TurretStates2{
    if(g`%var_local(TurretUUID)_State`.equals("target_shoot")){
        AttackWait = 4;
        if(g`%var_local(TurretUUID)_Type`.equals(["rocket", "rocketslow"])){
            AttackWait = 10;
        }
        if(l`%var_local(TurretUUID)_Attack1`.greater_or_equals(AttackWait)){
            l`%var_local(TurretUUID)_Attack1` = 0;
            l`%var_local(TurretUUID)_Shots` = variable::add([l`%var_local(TurretUUID)_Shots`, 1]);
            if(l`%var_local(TurretUUID)_Shots`.equals(0)){
                PlaySoundPos = CurrentPos;
                PlaySoundSound = sound("minecraft:entity.bat.hurt", 2, 0.5, "hurt4", "MASTER");
                code::start_process(p"PlaySoundLvl", "COPY");
            }
            if(l`%var_local(TurretUUID)_Shots`.less_or_equals(0)){
                l`%var_local(TurretUUID)_Attack1` = variable::add([l`%var_local(TurretUUID)_Attack1`, 1]);
                code::return_function();
            }
            if(g`%var_local(TurretUUID)_Type`.equals("rocketslow")){
                if(l`%var_local(TurretUUID)_Shots`.greater_or_equals(5)){
                    l`%var_local(TurretUUID)_Shots` = -5;
                    l`%var_local(TurretUUID)_Attack1` = variable::add([l`%var_local(TurretUUID)_Attack1`, 1]);
                    PlaySoundPos = CurrentPos;
                    PlaySoundSound = sound("minecraft:entity.bat.hurt", 2, 1, "hurt4", "MASTER");
                    code::start_process(p"PlaySoundLvl", "COPY");
                    code::return_function();
                }
            }
            code::call_function(p"TurretShoot");
        }
        l`%var_local(TurretUUID)_Attack1` = variable::add([l`%var_local(TurretUUID)_Attack1`, 1]);
    }
}

function TurretShoot{
    BulletPos = CurrentPos.shift_location_in_direction(0.5);
    if(g`%var_local(TurretUUID)_Type`.equals("normal")){
        BulletPos = BulletPos.shift_location_in_direction(-0.21875, "SIDEWAYS");
        ThrowVect = ToPlayerVect.set_vector_length(2);
        PlaySoundPos = BulletPos;
        PlaySoundSound = [sound("minecraft:entity.armor_stand.place", 2, 1, "MASTER"), sound("minecraft:item.flintandsteel.use", 2, 2, "MASTER"), sound("minecraft:cubed.turret.shoot", 2, 1, "MASTER")];
        code::start_process(p"PlaySoundLvl", "COPY");
        world::launch_projectile("H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxKs7LL09KzMlhZmBNzi/NK2FgYGBkAABDCe1qOwAAAA==", BulletPos, 0, 0, g`%var_local(TurretUUID)_NameBullet`, particle("CRIT", 1, 0, 0, 0, 0.10000000149011612, 0));
    }
    else{
        BulletPos = BulletPos.shift_location_in_direction(-0.28125, "SIDEWAYS");
        ThrowVect = ToPlayerVect.set_vector_length(0.75);
        PlaySoundPos = BulletPos;
        PlaySoundSound = [sound("minecraft:item.firecharge.use", 2, 1, "MASTER"), sound("minecraft:entity.firework_rocket.launch", 2, 0.5, "MASTER"), sound("minecraft:entity.firework_rocket.shoot", 2, 0.5, "MASTER"), sound("minecraft:cubed.turret.shoot", 2, 0.5, "MASTER")];
        code::start_process(p"PlaySoundLvl", "COPY");
        world::launch_projectile("H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxKs7LL09KzMlhZmBNzi/NK2FgYGBkAABDCe1qOwAAAA==", BulletPos, 0, 0, g`%var_local(TurretUUID)_NameBullet`, particle("WHITE_SMOKE", 1, 0, 0, 0, 0, 0));
    }
    select::last_entity();
    BulletUUID = value::uuid<current>;
    code::call_function(p"TurretShoot2");
}

function TurretShoot2{
    g`%var_local(BulletUUID)_PartType` = "bullet";
    if(g`%var_local(TurretUUID)_Type`.equals(["rocket", "rocketslow"])){
        g`%var_local(BulletUUID)_PartType` = "rocket";
    }
    g`%var_local(BulletUUID)_Level` = g`%var_local(TurretUUID)_Level`;
    g`%var_local(BulletUUID)_ParentModel` = g`%var_local(TurretUUID)_Model`;
    if(g`%var_local(TurretUUID)_Type`.equals("normal")){
        entity::set_default_visible();
    }
    else{
        entity::set_projectile_display_item("H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YWHpGRBbFDmuFCmxUezsHB068fbvBWDCeUmentytqACX1xH7knFtRZh6Wv3uo3vlaDScJ8ykQxzALiCQtrcKi1vA7S9omGuLTTPXmH/7Ew5r1eQ2b/DxwdYX2Mx1t34AAAA=");
    }
    entity::set_gravity("FALSE");
    entity::set_location(ThrowVect, "FALSE");
    if(g`%var_local(TurretUUID)_Type`.equals(["rocket", "rocketslow"])){
        world::spawn_item_display(BulletPos, g`%var_local(TurretUUID)_NameBullet`, "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgMBUSHT+houANKJ1lzg6ysG9RfPlPngqpmHpmHNDheA8WHmlqmQqchj22OeJcsyaZwmjXF0v0z0J5d+iFsxqAjYMT1g81qTWHy9+XuRmrr4yp+PibH7AbC4O1fg1vC1a+WQ2iXHwAAAA=");
        select::last_entity();
        RocketUUID = value::uuid<current>;
        g`%var_local(RocketUUID)_PartType` = "rocket_item";
        g`%var_local(BulletUUID)_RocketUUID` = RocketUUID;
        entity::ride_entity(BulletUUID);
        entity::set_display_translation(vector(0, -0.25, 0));
        entity::set_display_scale(vector(0.5, 0.5, 0.5));
        entity::set_display_rotation_from_euler_angles(yaw=180);
        entity::set_rotation_by_vector(ThrowVect);
    }
}

function TurretLaser{
    LaserPos = CurrentPos.shift_location_in_direction(0.5);
    if(g`%var_local(TurretUUID)_Type`.equals("normal")){
        Effect = particle("DUST", 1, 0, 0, 0, 0, 0, color=-44991);
        LaserPos = LaserPos.shift_location_in_direction(0.15625, "SIDEWAYS");
    }
    else{
        Effect = particle("DUST", 1, 0, 0, 0, 0, 0, color=-16711681);
        LaserPos = LaserPos.shift_location_in_direction(0.21875, "SIDEWAYS");
    }
    LaserPos = LaserPos.face_location(LaserTargetPos);
    select::player_by_name(g`LvlPlayerList_%var(%var_local(TurretUUID)_Level)`);
    if(g`%var_local(TurretUUID)_IsOnSpider`.equals(0)){
        LaserEnd = variable::ray_trace_result(start=LaserPos, ray_size=0, max_distance=32, ray_collision_mode="BLOCKS_AND_ENTITIES");
    }
    else{
        if(g`%var(%var_local(TurretUUID)_SpiderBodyUUID)_DontShoot`.equals(1)){
            code::return_function();
        }
        EntityList = value::selection_target_uuids.append_list(g`SandListForRays`);
        LaserEnd = variable::ray_trace_result(start=LaserPos, ray_size=0, max_distance=32, entities=EntityList, ray_collision_mode="BLOCKS_AND_ENTITIES");
    }
    if(LaserEnd.equals(0)){
        LaserEnd = LaserTargetPos;
    }
    code::start_process(p"TurretParticles", "COPY", "FOR_EACH_IN_SELECTION");
}

event<projective_collide>{
    if(value::name<projectile>.text_starts_with("turret*")){
        if(value::name<victim_entity>.text_starts_with("spider*")){
            world::cancel_event();
            code::break();
        }
        BulletUUID = value::uuid<projectile>;
        if(g`%var_local(BulletUUID)_PartType`.equals("bullet")){
            if(value::entity_type<victim_entity>.equals("player")){
                Dmg = 1.5;
                if(g`%var_local(BulletUUID)_ParentModel`.equals("ceil")){
                    Dmg = 1;
                }
                player::damage(Dmg);
                player::set_invulnerability_ticks(1);
            }
            variable::purge(BulletUUID, match="NAME_CONTAINS");
            code::break();
        }
        if(g`%var_local(BulletUUID)_PartType`.equals("rocket")){
            select::entity_by_name(g`%var_local(BulletUUID)_RocketUUID`);
            entity::remove();
            variable::purge(g`%var_local(BulletUUID)_RocketUUID`, match="NAME_CONTAINS");
            Pos = value::location<projectile>;
            Lvl = g`%var_local(BulletUUID)_Level`;
            code::call_function(p"RocketExplosion");
            variable::purge(BulletUUID, match="NAME_CONTAINS");
        }
    }
}

event<projectile_hit>{
    if(value::name<projectile>.text_starts_with("turret*")){
        BulletUUID = value::uuid<projectile>;
        if(g`%var_local(BulletUUID)_PartType`.equals("rocket")){
            select::entity_by_name(g`%var_local(BulletUUID)_RocketUUID`);
            entity::remove();
            variable::purge(g`%var_local(BulletUUID)_RocketUUID`, match="NAME_CONTAINS");
            Pos = value::location<projectile>;
            Lvl = g`%var_local(BulletUUID)_Level`;
            code::call_function(p"RocketExplosion");
            variable::purge(BulletUUID, match="NAME_CONTAINS");
        }
    }
}

function RocketExplosion{
    Radius = 3;
    player::display_particle([particle("LAVA", 8, 0.5, 0.20000000298023224, 0, 0, 0), particle("POOF", 4, 0.5, 0.20000000298023224, 0, 0, 0), particle("CAMPFIRE_COSY_SMOKE", 4, 1, 0.20000000298023224, 0, 0.05000000074505806, 0), particle("FLASH", 1, 0, 0, 0, 0, 0)], Pos);
    PlaySoundLevel = Lvl;
    PlaySoundPos = Pos;
    PlaySoundSound = [sound("minecraft:item.mace.smash_ground_heavy", 1, 2, "MASTER"), sound("minecraft:entity.breeze.shoot", 1, 0.5, "MASTER"), sound("minecraft:cubed.turret.explosion", 1, 1.5, "MASTER")];
    code::start_process(p"PlaySoundLvl", "COPY");
    select::player_by_name(g`LvlPlayerList_%var_local(Lvl)`);
    select::filter_by_conditional(player::is_near(Radius, Pos, "FALSE"));
    if(value::selection_size.greater(0)){
        player::damage(4.25);
    }
}

function TurretAngles{
    FindRayLen = 40;
    Angle1 = 360;
    Angle2 = 80;
    if(g`%var_local(TurretUUID)_IsOnSpider`.equals(1)){
        FindRayLen = 128;
        Angle2 = 360;
    }
    if(g`%var_local(TurretUUID)_Model`.equals("ceil")){
        Angle2 = 360;
    }
}

function TrigSpider{
    if(value::entity_type<current>.equals("player")){
        if(g`%var(%player%_Level)_LvlHasSpider`.equals(0)){
            g`%var(%player%_Level)_LvlHasSpider` = 1;
            if(g`TrigData*%var_local(TrigCenter)*FunctionData`.equals("0")){
                SpawnPos = location(-14.5, 48, -168.5, -180, 0);
                Behaviour = "line";
                WalkPathNodes = [location(-14.5, 48, -172.5, 0, 0), location(-30.5, 48, -172.5, 0, 0), location(-30.5, 48, -176.5, 0, 0), location(-26.5, 48, -176.5, 0, 0)];
            }
            if(g`TrigData*%var_local(TrigCenter)*FunctionData`.equals("1")){
                SpawnPos = location(-122.5, 52, -168.5, -180, 0);
                Behaviour = "enter";
                WalkPathNodes = [location(-122.5, 52, -176.5, -90, 0), location(-114.5, 52, -176.5, -180, 0), location(-114.5, 52, -188.5, -90, 0), location(-106.5, 52, -188.5, -90, 0)];
                PointNodes = [location(-94.5, 52, -188.5, -90, 0), location(-86.5, 52, -184.5, 115, 0), location(-94.5, 52, -188.5, -90, 0), location(-90.5, 53, -196.5, 25, 0), location(-94.5, 52, -188.5, -90, 0), location(-102.5, 52, -192.5, -65, 0), location(-94.5, 52, -188.5, -90, 0), location(-98.5, 53, -180.5, -155, 0)];
                SpeedEffect = potion("minecraft:speed", 1, -1);
                RedstonePos = location(-122.5, 47.5, -188.5, 0, 0);
                world::set_region("minecraft:barrier", location(-115.5, 52.5, -178.5, 0, 0), location(-113.5, 55.5, -178.5, 0, 0));
                world::clear_region(location(-121.5, 52.5, -174.5, 0, 0), location(-123.5, 56.5, -174.5, 0, 0));
            }
            code::call_function("TrigSpider2");
            if(g`%var(%player%_Level)_LvlSpiderFighters`.equals(0)){
                g`%var(%player%_Level)_LvlSpiderFighters` = [];
            }
            if(RedstonePos.not_equals(0)){
                if not (world::block_equals("minecraft:structure_void", RedstonePos)){
                    world::set_block(RedstonePos, "minecraft:structure_void");
                    world::update_block(RedstonePos);
                }
            }
            code::call_function(p"SpawnSpider");
        }
        if not (g`%var(%player%_Level)_LvlSpiderFighters`.list_contains_value("%player%")){
            g`%var(%player%_Level)_LvlSpiderFighters`.append_value("%player%");
            if(g`TrigData*%var_local(TrigCenter)*FunctionData`.equals("1")){
                g`%player%_RespawnPoint` = location(-74.5, 52, -188.5, 90, 0);
                code::call_function(p"MusicPlay");
            }
        }
    }
}

function UNLOAD_Spider{
    if(g`%var_local(CurrentLevel)_LvlHasSpider`.equals(1)){
        if(g`%var_local(CurrentLevel)_LvlSpiderFighters`.list_contains_value("%player%")){
            g`%var_local(CurrentLevel)_LvlSpiderFighters` = g`%var_local(CurrentLevel)_LvlSpiderFighters`.remove_list_value("%player%");
        }
        LvlSpiderFightersSize = g`%var_local(CurrentLevel)_LvlSpiderFighters`.get_list_length();
        if(LvlSpiderFightersSize.less_or_equals(0)){
            select::entity_by_conditional(value::name<victim_entity>.text_starts_with("spider*%var_local(CurrentLevel)*"));
            if(value::selection_size.greater(0)){
                repeat::for_each_in_list(value_variable=SpiderUUID, list=value::selection_target_uuids){
                    if(g`%var_local(SpiderUUID)_PartType`.equals("body")){
                        g`SpiderUUIDList` = g`SpiderUUIDList`.remove_list_value(SpiderUUID);
                        g`TurretUUIDList` = g`TurretUUIDList`.remove_list_value(g`%var_local(SpiderUUID)_TurretUUID`);
                        if(g`%var_local(SpiderUUID)_RedstonePos`.not_equals(0)){
                            world::set_block(g`%var_local(SpiderUUID)_RedstonePos`, "minecraft:structure_void");
                            world::update_block(g`%var_local(SpiderUUID)_RedstonePos`);
                        }
                        select::add_entity_by_name(g`%var_local(SpiderUUID)_TurretUUID`);
                    }
                }
                variable::purge(["%var_local(CurrentLevel)_LvlHasSpider", "%var_local(CurrentLevel)_LvlSpiderFighters"]);
                variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
                entity::remove();
            }
            select::reset();
        }
    }
}

function SpiderParams{
    NextLevel = g`%player%_Level`;
    SpiderSegmentCount = 2;
    SpiderLocalSegmentCount = 3;
    SpiderLegLength = 1.25;
    SpiderLegDistance = 0.75;
    SpiderLegSpread = 0.75;
    SpiderStepDistance = 1;
    SpiderHeight = 2.25;
    SpiderInterpolation = 3;
    SpiderLegAngles = [70, 180, 290];
    g`%var(%player%_Level)_LvlHasTurret` = 1;
    Type = "rocketslow";
    EntityID = variable::set_text([NextLevel, "*", "999"], "CONCATENATION");
    IsOnSpider = 1;
}

function SpawnSpider{
    code::call_function(p"SpiderParams");
    SpiderBodyName = variable::set_text(["spider*", NextLevel, "*body*%random_uuid%"], "CONCATENATION");
    world::spawn_mob("H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDPzcxLTS5KTCuxSs4vjy8uSCzPi09NT2dmYE3OL80rYWBgYGQAAGJGt+RAAAAA", SpawnPos, custom_name=SpiderBodyName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    select::last_entity();
    SpiderBodyUUID = value::uuid<current>;
    entity::set_custom_name_visibility("FALSE");
    entity::set_silenced();
    entity::set_death_drops("FALSE");
    entity::set_invulnerable();
    entity::set_invisible();
    entity::set_despawning("FALSE");
    entity::set_aware("FALSE");
    if(SpeedEffect.not_equals(0)){
        entity::give_potion_effects(SpeedEffect, "FALSE", "FALSE", "NONE");
    }
    g`SpiderUUIDList`.append_value(SpiderBodyUUID);
    g`%var_local(SpiderBodyUUID)_Level` = NextLevel;
    g`%var_local(SpiderBodyUUID)_PartType` = "body";
    g`%var_local(SpiderBodyUUID)_HP` = 2;
    g`%var_local(SpiderBodyUUID)_IsDead` = 0;
    g`%var_local(SpiderBodyUUID)_DontShoot` = 1;
    SpiderCurrentPos = SpawnPos;
    SpiderPrevPos = SpiderCurrentPos;
    g`%var_local(SpiderBodyUUID)_CurrentPos` = SpiderCurrentPos;
    g`%var_local(SpiderBodyUUID)_ForwardVect` = SpiderCurrentPos.get_location_direction();
    g`%var_local(SpiderBodyUUID)_RedstonePos` = RedstonePos;
    code::call_function(p"SpiderDisplay");
    code::call_function(p"SpawnTurret");
    g`%var_local(SpiderBodyUUID)_TurretUUID` = TurretUUID;
    SpiderState = "idle";
    WalkMoveTick = 10;
    DeathAngleList = [1, -1];
    DeathAngleMaxList = [70, -70];
    DeathCloseLegList = [2, 0];
    DeathFarLegList = [0, 2];
    DeathIndex = variable::random([0, 1]);
    DeathAngle = DeathAngleList.get_list_value(DeathIndex);
    DeathAngleMax = DeathAngleMaxList.get_list_value(DeathIndex);
    DeathCloseLeg = DeathCloseLegList.get_list_value(DeathIndex);
    DeathFarLeg = DeathFarLegList.get_list_value(DeathIndex);
    code::start_process(p"SpiderLOOP", "COPY", "NO_TARGET");
}

function SpiderDisplay{
    Light1 = 14;
    Light2 = 0;
    SpiderLegName = variable::set_text(["spider*", g`%var_local(SpiderBodyUUID)_Level`, "*leg*%random_uuid%"], "CONCATENATION");
    world::spawn_item_display(SpiderCurrentPos, SpiderLegName, "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhU3YWLgDIgtCo6rRiQ2Stydo0Mn3v7pOaDH6RYs3Lm2pAKMjwN2KWIqSZhqmO0ibAvXZOyfWenVYyBdxQB0Do60vFVYrDmc/4jWZlp80cjZx9/hiP2cNVgbNnj9YOsLmsF244EAAAA=");
    select::last_entity();
    SpiderHeadUUID = value::uuid<current>;
    entity::set_display_brightness(Light1, Light2);
    entity::set_display_teleport_duration(SpiderInterpolation);
    entity::set_display_translation(vector(0, -0.2, 0));
    g`%var_local(SpiderHeadUUID)_PartType` = "head";
    DisplayItems = ["H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhU3YerAGRBbFBxXjUhslLj3h068/dNzQI/LPVh4cG1JBRifJxxSxFSSMNWw2E3YVq7J2L+y0rvHQLqJAegcHGn5qLBYc7j+EW3NtPiikbOPv8MZxyVrsDbscJ6x9wUu357ygQAAAA==", "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhU3YWLgDIgtCo6rRiQ2Stz7cFToxNs/PQf0ON2ChTvXllSA8XHALkVMJQlTDbNdhG3hmoz9Myu9egykqxiAzsGRlrcKizWH8x/R2kyLLxo5+/g7HLGfswZrwwavH2x9AazE2uSBAAAA", "H4sIAAAAAAAA/0XNOw7CMBBF0QdREDhVSsROqCiyhojOMuOJsLBnInuyfz4Ntz+6DugwTMHCzLUlFWC8H7FPEeeShKmGxa7C9uSajP0jK7069KSbGICdgyMtqwqLNYfLH9HWTIsvGjn7+DmccFiyBmv9F97w6w1C1cb9gQAAAA=="];
    PartTypes = ["leghigh", "legmiddle", "leglow"];
    repeat::for_each_in_list(AnInd, Angle, SpiderLegAngles){
        repeat::on_range(N, 0, "%math(%var_local(SpiderLocalSegmentCount)-1)"){
            code::call_function(p"WAIT");
            DisplayItem = DisplayItems.get_list_value(N);
            world::spawn_item_display(SpiderCurrentPos, SpiderLegName, DisplayItem);
            select::last_entity();
            l`%var_local(AnInd)_%var_local(N)_SpiderSegmentUUID` = value::uuid<current>;
            entity::set_rotation(0, 0);
            entity::set_display_brightness(Light1, Light2);
            entity::set_display_teleport_duration(SpiderInterpolation);
            g`%var_local(%var_local(AnInd)_%var_local(N)_SpiderSegmentUUID)_PartType` = PartTypes.get_list_value(N);
        }
        l`%var_local(AnInd)_LegOnGround` = 1;
        l`%var_local(AnInd)_LegEndPos` = location(0, 0, 0, 0, 0);
        Neighbor1 = variable::add([AnInd, 1]);
        Neighbor2 = variable::subtract([AnInd, 1]);
        Neighbor1 = Neighbor1.warp(0, SpiderSegmentCount);
        Neighbor2 = Neighbor2.warp(0, SpiderSegmentCount);
        l`%var_local(AnInd)_LegNeighbors` = [Neighbor1, Neighbor2];
    }
}

function SpiderLegStraight{
    l`%var_local(AnInd)_-1_TipPos` = l`%var_local(AnInd)_LegOriginPos`;
    StraightDiretion = variable::get_vector_between_locations(l`%var_local(AnInd)_LegOriginPos`, EndPoint);
    SegUpVect = variable::vector_cross_product(vector(0, 1, 0), StraightDiretion);
    SegUpVect = SegUpVect.set_vector_length(1);
    StraightDiretion1 = StraightDiretion.rotate_vector_around_vector(SegUpVect, -90);
    StraightDiretion2 = StraightDiretion.rotate_vector_around_vector(SegUpVect, 90);
    Target = l`%var_local(AnInd)_LegOriginPos`;
    repeat::on_range(N, 0, "%math(%var_local(SpiderLocalSegmentCount)-1)"){
        code::call_function(p"WAIT");
        StraightDiretion = StraightDiretion2;
        if(N.equals(0)){
            StraightDiretion = StraightDiretion1;
        }
        code::call_function(p"SpideLegSize");
        l`%var_local(AnInd)_%var_local(N)_TipPos` = Target.set_location_direction(StraightDiretion);
        l`%var_local(AnInd)_%var_local(N)_TipPos` = l`%var_local(AnInd)_%var_local(N)_TipPos`.shift_location_in_direction(LocalLegLengthOverride);
        l`%var_local(AnInd)_%var_local(N)_TipPos` = l`%var_local(AnInd)_%var_local(N)_TipPos`.face_location(Target);
        Target = l`%var_local(AnInd)_%var_local(N)_TipPos`;
    }
}

function SpiderLegFABRIK{
    code::call_function(p"SpiderLegStraight");
    repeat::multi_times(I, 10){
        l`%var_local(AnInd)_%math(%var_local(SpiderLocalSegmentCount)-1)_TipPos` = EndPoint;
        repeat::on_range(N, "%math(%var_local(SpiderLocalSegmentCount)-1)", 0, -1){
            code::call_function(p"WAIT");
            code::call_function(p"SpideLegSize");
            l`N-1` = variable::subtract([N, 1]);
            l`%var_local(AnInd)_%var_local(N)_TipPos` = l`%var_local(AnInd)_%var_local(N)_TipPos`.face_location(l`%var_local(AnInd)_%var_local(N-1)_TipPos`);
            l`%var_local(AnInd)_%var_local(N-1)_TipPos` = l`%var_local(AnInd)_%var_local(N)_TipPos`.shift_location_in_direction(LocalLegLengthOverride);
        }
        l`%var_local(AnInd)_-1_TipPos` = l`%var_local(AnInd)_LegOriginPos`;
        repeat::on_range(N, 0, "%math(%var_local(SpiderLocalSegmentCount)-1)"){
            code::call_function(p"WAIT");
            code::call_function(p"SpideLegSize");
            l`N-1` = variable::subtract([N, 1]);
            l`%var_local(AnInd)_%var_local(N)_TipPos` = l`%var_local(AnInd)_%var_local(N-1)_TipPos`.face_location(l`%var_local(AnInd)_%var_local(N)_TipPos`);
            l`%var_local(AnInd)_%var_local(N)_TipPos` = l`%var_local(AnInd)_%var_local(N)_TipPos`.shift_location_in_direction(LocalLegLengthOverride);
            l`%var_local(AnInd)_%var_local(N)_TipPos` = l`%var_local(AnInd)_%var_local(N)_TipPos`.face_location(l`%var_local(AnInd)_%var_local(N-1)_TipPos`);
        }
        SegDist = variable::locations_distance(l`%var_local(AnInd)_%math(%var_local(SpiderLocalSegmentCount)-1)_TipPos`, EndPoint);
        if(SegDist.less(0.01)){
            code::stop_repeat();
        }
    }
    l`%var_local(AnInd)_LegEndPos` = EndPoint;
    repeat::on_range(N, 0, "%math(%var_local(SpiderLocalSegmentCount)-1)"){
        code::call_function(p"WAIT");
        code::call_function(p"SpideLegSize");
        NewLegSize = variable::set_vector(1, 1, LocalLegLengthOverride);
        SegDirection = l`%var_local(AnInd)_%var_local(N)_TipPos`.get_location_direction();
        NewLegShift = variable::multiply_vector(SegDirection, "%math(%var_local(LocalLegLengthOverride)*0.5)");
        select::entity_by_name(l`%var_local(AnInd)_%var_local(N)_SpiderSegmentUUID`);
        entity::teleport(l`%var_local(AnInd)_%var_local(N)_TipPos`, "FALSE");
        entity::set_display_interpolation(SpiderInterpolation);
        code::call_function(p"SpiderLegRotation");
        entity::set_display_scale(NewLegSize);
        entity::set_display_translation(NewLegShift);
    }
}

function SpiderLegRotation{
    SegDirX, SegDirY, SegDirZ = SegDirection.get_vector_all_components();
    SegRotYaw = variable::atan2(SegDirX, SegDirZ);
    SegRotPitch = variable::atan2("%math(-%var_local(SegDirY))", "%math(sqrt(%var_local(SegDirX)*%var_local(SegDirX)+%var_local(SegDirZ)*%var_local(SegDirZ)))");
    SegRightVect = variable::vector_cross_product(SegUpVect, SegDirection);
    SegRightVect = SegRightVect.set_vector_length(1);
    SegRightY = SegRightVect.get_vector_component("Y");
    SegUpY = SegUpVect.get_vector_component("Y");
    SegRotRoll = variable::atan2(SegRightY, SegUpY);
    entity::set_display_rotation_from_euler_angles(yaw=SegRotYaw, input="RADIANS");
    entity::set_display_rotation_from_euler_angles(SegRotPitch, mode="ADD", input="RADIANS");
    entity::set_display_rotation_from_euler_angles(roll=SegRotRoll, mode="ADD", input="RADIANS");
}

function SpideLegSize{
    LocalLegLengthOverride = LocalLegLength;
    if(N.equals(0)){
        LocalLegLengthOverride = variable::multiply([LocalLegLengthOverride, 0.8]);
    }
    if(N.equals(1)){
        LocalLegLengthOverride = variable::multiply([LocalLegLengthOverride, 0.5]);
    }
}

process SpiderLOOP{
    PlaySoundLevel = g`%var_local(SpiderBodyUUID)_Level`;
    repeat::forever(){
        code::call_function(p"WAIT");
        select::entity_by_name(SpiderBodyUUID);
        if(value::selection_size.less_or_equals(0)){
            code::break();
        }
        if(DeathToggle.equals(0)){
            SpiderCurrentPos = value::location<current>.set_coordinate(0, "PITCH");
            SpiderForwardVect = SpiderCurrentPos.get_location_direction();
            SpiderRightVect = SpiderForwardVect.rotate_vector_around_axis(90, "Y");
            SpiderUpVect = SpiderForwardVect.rotate_vector_around_vector(SpiderRightVect, -90);
            SpiderCenterPos = SpiderCurrentPos.shift_location_on_vector(SpiderUpVect, SpiderHeight);
            g`%var_local(SpiderBodyUUID)_CurrentPos` = SpiderCenterPos;
            g`%var_local(SpiderBodyUUID)_ForwardVect` = SpiderForwardVect;
        }
        code::call_function(p"SpiderAI");
        code::call_function(p"SpiderWalkAnim");
        SpiderPrevPos = SpiderCurrentPos;
        if(DeathToggle.equals(1)){
            DeathAngle = variable::multiply([DeathAngle, 1.05]);
        }
        code::wait(1);
    }
}

function SpiderWalkAnim{
    if(WalkUpdateTick.less_or_equals(0)){
        WalkUpdateTick = SpiderInterpolation;
        IsStanding = 0;
        LocalStepDistance = SpiderStepDistance;
        if(SpiderCurrentPos.equals(SpiderPrevPos)){
            IsStanding = 1;
            LocalStepDistance = 0.2;
            if(WalkMoveTick.greater(0)){
                WalkMoveTick = variable::subtract([WalkMoveTick, 1]);
            }
        }
        else{
            WalkMoveTick = 10;
        }
        if(WalkMoveTick.greater(0)){
            code::call_function(p"SpiderWalkAnim2");
        }
    }
    if(WalkUpdateTick.greater(0)){
        WalkUpdateTick = variable::subtract([WalkUpdateTick, 1]);
    }
}

function SpiderWalkAnim2{
    repeat::for_each_in_list(AnInd, Angle, SpiderLegAngles){
        code::call_function(p"WAIT");
        AngleDirection = SpiderForwardVect.rotate_vector_around_vector(SpiderUpVect, Angle);
        l`%var_local(AnInd)_LegOriginPos` = SpiderCenterPos.shift_location_on_vector(AngleDirection, SpiderLegDistance);
        l`%var_local(AnInd)_LegSpreadPos` = l`%var_local(AnInd)_LegOriginPos`.set_location_direction(AngleDirection);
        if(DeathToggle.equals(0)){
            l`%var_local(AnInd)_LegSpreadPos` = variable::ray_trace_result(start=l`%var_local(AnInd)_LegSpreadPos`, ray_size=0, max_distance="%math(%var_local(SpiderLegLength)*%var_local(SpiderSegmentCount)*0.2)");
            LegWallHit = 1;
        }
        else{
            l`%var_local(AnInd)_LegSpreadPos` = 0;
        }
        if(l`%var_local(AnInd)_LegSpreadPos`.equals(0)){
            LegWallHit = 0;
            l`%var_local(AnInd)_LegSpreadPos` = l`%var_local(AnInd)_LegOriginPos`.shift_location_on_vector(AngleDirection, SpiderLegSpread);
        }
        EndPoint = l`%var_local(AnInd)_LegEndPos`;
        LocalLegLength = SpiderLegLength;
        code::call_function(p"SpiderWalkAnim3");
        RayLength = variable::locations_distance(l`%var_local(AnInd)_LegSpreadPos`, EndPoint);
        if(RayLength.greater("%math(%var_local(SpiderLegLength)*%var_local(SpiderSegmentCount))")){
            LocalLegLength = variable::divide([RayLength, SpiderSegmentCount]);
            LocalLegLength = variable::min([LocalLegLength, 1.5]);
            LocalLegLength = variable::add([LocalLegLength, 0.1]);
        }
        code::call_function(p"SpiderLegFABRIK");
    }
    select::entity_by_name(SpiderHeadUUID);
    entity::teleport(SpiderCenterPos);
    if(DeathToggle.equals(1)){
        HeadShift = (vector(0, -0.2, 0)).rotate_vector_around_vector(SpiderForwardVect, DeathAngleCheck);
        entity::set_display_interpolation(SpiderInterpolation);
        entity::set_display_rotation_from_euler_angles(roll=DeathAngleCheck);
        entity::set_display_translation(HeadShift);
    }
}

function SpiderWalkAnim3{
    if(DeathToggle.equals(1)){
        if(l`%var_local(AnInd)_NextMove`.not_equals([0, 1])){
            EndPoint = l`%var_local(AnInd)_NextMove`;
        }
        if(DeathToggle2.equals(0)){
            EndPoint = EndPoint.shift_location_on_vector(CenterProjVect, DeathCenterDistance);
            if(AnInd.equals(DeathFarLeg)){
                EndPoint = EndPoint.shift_location_on_vector(CenterProjVect, "%math(-%var_local(DeathCenterDistance)*0.8)");
            }
            if(AnInd.equals(DeathCloseLeg)){
                EndPoint = EndPoint.shift_location_on_vector(CenterProjVect, "%math(-%var_local(DeathCenterDistance)*14)");
                EndPoint = EndPoint.shift_location_on_vector(SpiderForwardVect, "%math(-%var_local(DeathCenterDistance)*14)");
            }
        }
        code::return_function();
    }
    if(l`%var_local(AnInd)_InAir`.equals(1)){
        code::call_function("SpiderWalkRay");
        EndPoint = PossibleEndPoint;
    }
    if(l`%var_local(AnInd)_NextMove`.equals(1)){
        l`%var_local(AnInd)_LegOnGround` = 1;
        l`%var_local(AnInd)_NextMove` = 0;
    }
    else{
        if(l`%var_local(AnInd)_NextMove`.equals(0)){
            code::call_function(p"SpiderWalkAnim4");
        }
        else{
            EndPoint = l`%var_local(AnInd)_NextMove`;
            l`%var_local(AnInd)_NextMove` = 1;
            if(l`%var_local(AnInd)_InAir`.equals(0)){
                PlaySoundPos = EndPoint;
                PlaySoundSound = sound("minecraft:block.netherite_block.step", 1, 2, "MASTER");
                code::start_process(p"PlaySoundLvl", "COPY");
            }
        }
    }
}

function SpiderWalkAnim4{
    BlockMovement = 0;
    repeat::for_each_in_list(value_variable=NeInd, list=l`%var_local(AnInd)_LegNeighbors`){
        if(l`%var_local(NeInd)_LegOnGround`.equals(0)){
            BlockMovement = 1;
            code::stop_repeat();
        }
    }
    if(BlockMovement.equals(0)){
        code::call_function("SpiderWalkRay");
        StepDistance = variable::locations_distance(l`%var_local(AnInd)_LegEndPos`, PossibleEndPoint);
        if(AnInd.equals(1)){
            LocalStepDistance = variable::multiply([LocalStepDistance, 0.75]);
        }
        if(StepDistance.greater(LocalStepDistance)){
            l`%var_local(AnInd)_LegOnGround` = 0;
            if(IsStanding.equals(0)){
                if(AnInd.not_equals(1)){
                    l`%var_local(AnInd)_LegSpreadPos` = l`%var_local(AnInd)_LegSpreadPos`.shift_location_on_vector(SpiderForwardVect, 0.98);
                }
                else{
                    l`%var_local(AnInd)_LegSpreadPos` = l`%var_local(AnInd)_LegSpreadPos`.shift_location_on_vector(SpiderForwardVect, 0.73);
                }
            }
            code::call_function("SpiderWalkRay");
            EndPoint = variable::center_location([l`%var_local(AnInd)_LegEndPos`, PossibleEndPoint]);
            EndPoint = EndPoint.shift_location_on_vector(SpiderUpVect, 1);
            l`%var_local(AnInd)_NextMove` = PossibleEndPoint;
        }
    }
}

function SpiderWalkRay{
    l`%var_local(AnInd)_InAir` = 0;
    if(LegWallHit.equals(0)){
        SpiderDownVect = variable::multiply_vector(SpiderUpVect, -1);
        RayStart = l`%var_local(AnInd)_LegSpreadPos`.set_location_direction(SpiderDownVect);
        RayEnd = variable::ray_trace_result(start=RayStart, ray_size=0, max_distance=4);
        if(RayEnd.equals(0)){
            l`%var_local(AnInd)_InAir` = 1;
            RayStart = RayStart.shift_location_on_vector(AngleDirection, -0.5);
            RayEnd = RayStart.shift_location_in_direction(4);
        }
        PossibleEndPoint = RayEnd;
    }
    else{
        PossibleEndPoint = l`%var_local(AnInd)_LegSpreadPos`;
    }
}

function SpiderAI{
    if(g`%var_local(SpiderBodyUUID)_IsDead`.equals(1)){
        if(DeathToggle2.equals(0)){
            code::call_function(p"SpiderDeath");
        }
        else{
            if(WalkMoveTick.greater(0)){
                WalkMoveTick = variable::subtract([WalkMoveTick, 1]);
            }
            else{
                code::call_function(p"SpiderRedstone");
                code::break();
            }
        }
    }
    else{
        code::call_function(p"SpiderSounds");
        if(StopWalking.equals(1)){
            StopWalking = 0;
            StateSwitch = 1;
            entity::set_aware("FALSE");
            entity::set_location(vector(0, 0, 0), "FALSE");
        }
        if(WalkTarget.not_equals(0)){
            entity::set_aware();
            entity::move_to_location(WalkTarget);
            WalkTargetDistance = variable::locations_distance(SpiderCurrentPos, WalkTarget);
            if(WalkTargetDistance.greater(1)){
                EyeY = value::eye_location<current>.get_coordinate("Y");
                LookTarget = WalkTarget.set_coordinate(EyeY, "Y");
                entity::face_location(LookTarget);
            }
            else{
                entity::move_to_location_stop();
                entity::teleport(WalkTarget);
                entity::set_location(vector(0, 0, 0), "FALSE");
                StopWalking = 1;
                WalkTarget = 0;
            }
        }
        code::call_function("SpiderActions");
        code::call_function(p"SpiderStates");
    }
}

function SpiderDeath{
    WalkMoveTick = 10;
    DeathAngleCheck = variable::add([DeathAngleCheck, DeathAngle]);
    if(DeathIndex.equals(0)){
        if(DeathAngleCheck.greater(DeathAngleMax)){
            DeathToggle2 = 1;
        }
    }
    else{
        if(DeathAngleCheck.less(DeathAngleMax)){
            DeathToggle2 = 1;
        }
    }
    entity::teleport(SpiderCurrentPos);
    DeathCenterVect = variable::get_vector_between_locations(SpiderCurrentPos, SpiderCenterPos);
    DeathCenterVect = DeathCenterVect.rotate_vector_around_vector(SpiderForwardVect, DeathAngle);
    SpiderRightVect = SpiderRightVect.rotate_vector_around_vector(SpiderForwardVect, DeathAngle);
    SpiderUpVect = SpiderUpVect.rotate_vector_around_vector(SpiderForwardVect, DeathAngle);
    SpiderCenterPos = SpiderCurrentPos.shift_location_on_vector(DeathCenterVect);
    CenterProjVect = SpiderCenterPos.set_coordinate(value::y_coordinate<current>, "Y");
    CenterProjVect = variable::get_vector_between_locations(CenterProjVect, SpiderCurrentPos);
    DeathCenterDistance = DeathAngleCheck.sine();
    DeathCenterDistance = DeathCenterDistance.absolute();
    DeathCenterDistance = variable::multiply([DeathCenterDistance, 0.05]);
    player::display_particle([particle("LARGE_SMOKE", 10, 1, 1, 0, 0, 0), particle("EXPLOSION", 10, 1, 1, 0, 0, 0)], SpiderCenterPos);
    select::entity_by_name(g`%var_local(SpiderBodyUUID)_TurretUUID`);
    if(DeathToggle.equals(0)){
        DeathToggle = 1;
        TurretPos = SpiderCenterPos.shift_coordinate(0.65, "Y");
        entity::set_display_translation(vector(0, 0, 0));
        PlaySoundPos = SpiderCenterPos;
        PlaySoundSound = sound("minecraft:cubed.spider.death", 2, 1, "MASTER");
        code::start_process(p"PlaySoundLvl", "COPY", "NO_TARGET");
        code::start_process("SpiderStopMusic", "COPY", "NO_TARGET");
    }
    TurretVect = variable::get_vector_between_locations(SpiderCurrentPos, TurretPos);
    TurretVect = TurretVect.rotate_vector_around_vector(SpiderForwardVect, DeathAngle);
    TurretPos = SpiderCurrentPos.shift_location_on_vector(TurretVect);
    TurretShiftVect = (vector(0, 0.65, 0)).rotate_vector_around_vector(SpiderForwardVect, DeathAngleCheck);
    entity::teleport(TurretPos, "FALSE");
    entity::set_display_rotation_from_euler_angles(roll=DeathAngleCheck);
}

function SpiderSounds{
    if(Behaviour.equals(["line", "fight"])){
        Random = variable::random_number(-1, 2);
        SoundChance = variable::add([SoundChance, Random]);
        Random = variable::random_number(1, 500);
        if(Random.in_range(10, SoundChance)){
            SoundChance = -10;
            PlaySoundUUID = SpiderHeadUUID;
            PlaySoundSound = sound("minecraft:cubed.spider.idle", 1, 1, "MASTER");
            code::start_process(p"PlaySoundLvl", "COPY");
        }
    }
}

function SpiderStates{
    CurrentState = SpiderState;
    if(CurrentState.equals("idle")){
        g`%var_local(SpiderBodyUUID)_DontShoot` = 1;
        WalkPathIndex = 0;
        WalkTarget = WalkPathNodes.get_list_value(WalkPathIndex);
        entity::set_aware();
        entity::move_to_location(WalkTarget);
        SpiderState = "walk";
    }
    if(CurrentState.equals("walk")){
        if(StateSwitch.equals(1)){
            StateSwitch = 0;
            WalkPathIndex = variable::add([WalkPathIndex, 1]);
            if(WalkPathIndex.less("%length_local(WalkPathNodes)")){
                WalkTarget = WalkPathNodes.get_list_value(WalkPathIndex);
                entity::set_aware();
                entity::move_to_location(WalkTarget);
            }
            else{
                if(Behaviour.equals("line")){
                    CurrentLevel = g`%var_local(SpiderBodyUUID)_Level`;
                    g`%var_local(CurrentLevel)_LvlSpiderFighters` = [];
                    code::call_function(p"UNLOAD_Spider");
                    code::break();
                }
                if(Behaviour.equals("enter")){
                    AnimTime = 60;
                    SpiderState = "anim1";
                    PlaySoundUUID = SpiderHeadUUID;
                    PlaySoundSound = sound("minecraft:cubed.spider.scream", 2, 1, "MASTER");
                    code::start_process(p"PlaySoundLvl", "COPY");
                }
            }
        }
    }
    code::call_function(p"SpiderStates2");
}

function SpiderStates2{
    if(CurrentState.equals("anim1")){
        WalkMoveTick = 10;
        AnimForwardAngle = -90;
        if(g`%var_local(SpiderBodyUUID)_Level`.equals(-35)){
            AnimForwardAngle = 0;
        }
        if(AnimTime.greater(0)){
            AnimTime = variable::subtract([AnimTime, 1]);
            AnimHeight = AnimTime.map_range(60, 0, SpiderHeight, 1.35);
            AnimHeight = variable::max([AnimHeight, 1.8]);
            SpiderCenterPos = SpiderCurrentPos.shift_location_on_vector(SpiderUpVect, AnimHeight);
            AnimPitch = AnimTime.map_range(60, 0, 0, -45);
            AnimPitch = variable::max([AnimPitch, -25]);
            SpiderCenterPos = SpiderCenterPos.set_coordinate(AnimPitch, "PITCH");
            AnimX = AnimTime.map_range(60, 0, 0, 720);
            SpiderCenterPos = SpiderCenterPos.set_coordinate("%math(%var_local(AnimForwardAngle)+sin(%var_local(AnimX))*25)", "YAW");
            SpiderForwardVect = SpiderCenterPos.get_location_direction();
            SpiderRightVect = SpiderForwardVect.rotate_vector_around_axis(90, "Y");
            SpiderUpVect = SpiderForwardVect.rotate_vector_around_vector(SpiderRightVect, -90);
            g`%var_local(SpiderBodyUUID)_CurrentPos` = SpiderCenterPos;
            g`%var_local(SpiderBodyUUID)_ForwardVect` = SpiderForwardVect;
        }
        else{
            Behaviour = "fight";
            code::call_function(p"SpiderRandWalk");
        }
    }
    code::call_function(p"SpiderStates3");
}

function SpiderStates3{
    if(CurrentState.equals("randwalk")){
        if(StateSwitch.equals(1)){
            StateSwitch = 0;
            g`%var_local(SpiderBodyUUID)_DontShoot` = 0;
            g`%var_local(SpiderBodyUUID)_IsHurt` = 0;
            g`%var_local(SpiderBodyUUID)_IsLaserHurt` = 0;
            HurtTimes = 0;
            SpiderState = "rotate";
        }
    }
    if(CurrentState.equals("rotate")){
        if(PreDeathWait.greater(0)){
            PreDeathWait = variable::subtract([PreDeathWait, 1]);
            if(PreDeathWait.less_or_equals(0)){
                g`%var_local(SpiderBodyUUID)_IsDead` = 1;
                code::return_function();
            }
        }
        else{
            code::call_function(p"SpiderFindPl");
            SpiderCurrentPos = SpiderCurrentPos.set_location_direction(SpiderLook);
            SpiderCenterPos = SpiderCenterPos.set_location_direction(SpiderLook);
            SpiderForwardVect = SpiderCurrentPos.get_location_direction();
            SpiderRightVect = SpiderForwardVect.rotate_vector_around_axis(90, "Y");
            SpiderUpVect = SpiderForwardVect.rotate_vector_around_vector(SpiderRightVect, -90);
            g`%var_local(SpiderBodyUUID)_CurrentPos` = SpiderCenterPos;
            g`%var_local(SpiderBodyUUID)_ForwardVect` = SpiderForwardVect;
            code::call_function(p"SpiderCheckHurt");
        }
    }
}

function SpiderCheckHurt{
    if(g`%var_local(SpiderBodyUUID)_IsHurt`.equals(1)){
        g`%var_local(SpiderBodyUUID)_IsHurt` = 0;
        HurtTimes = variable::add([HurtTimes, 1]);
        ThrowPower = variable::multiply_vector(SpiderForwardVect, -0.4);
        entity::set_location(ThrowPower, "FALSE");
        player::display_particle(particle("CRIT", 20, 1, 1, 0, 0, 0), SpiderCenterPos);
        PlaySoundPos = SpiderCenterPos;
        PlaySoundSound = sound("minecraft:entity.player.attack.crit", 1, 2, "MASTER");
        code::start_process(p"PlaySoundLvl", "COPY");
    }
    if(g`%var_local(SpiderBodyUUID)_IsLaserHurt`.equals(1)){
        g`%var_local(SpiderBodyUUID)_IsLaserHurt` = 0;
        g`%var_local(SpiderBodyUUID)_HP` = variable::subtract([g`%var_local(SpiderBodyUUID)_HP`, 1]);
        HurtTimes = 3;
        player::display_particle(particle("DUST", 32, 1, 1, 0, 0, 0, color=-65536), SpiderCenterPos);
        PlaySoundPos = SpiderCenterPos;
        PlaySoundDelay = 2;
        PlaySoundSound = [sound("minecraft:entity.player.attack.crit", 1, 0.5, "MASTER"), sound("minecraft:cubed.spider.hurt_laser", 2, 1, "MASTER")];
        code::start_process(p"PlaySoundLvl", "COPY");
        if not (g`LvlCubeList_%var(%var_local(SpiderBodyUUID)_Level)`.list_is_empty()){
            repeat::for_each_in_list(value_variable=StandUUID, list=g`LvlCubeList_%var(%var_local(SpiderBodyUUID)_Level)`){
                g`%var_local(StandUUID)_IsDeleted` = "1";
            }
        }
    }
    code::call_function(p"SpiderCheckHurt2");
}

function SpiderFindPl{
    if(FindPlayerTick.less_or_equals(0)){
        FindPlayerTick = 20;
        PlayerCandidats = variable::create_map();
        repeat::for_each_in_list(value_variable=Player, list=g`%var(%var_local(SpiderBodyUUID)_Level)_LvlSpiderFighters`){
            code::call_function(p"WAIT");
            select::player_by_name(Player);
            if(g`%selected%_InMenu`.equals(0)){
                if(player::gamemode_equals("ADVENTURE")){
                    ToPlayerVect = variable::get_vector_between_locations(SpiderCenterPos, value::hitbox_midpoint_location<current>);
                    RayStartPos = SpiderCenterPos.set_location_direction(ToPlayerVect);
                    RayEntities = value::uuid<current>;
                    RayEntityUUID = variable::ray_trace_result(start=RayStartPos, ray_size=0, max_distance=128, entities=RayEntities, ray_collision_mode="BLOCKS_AND_ENTITIES");
                    if(RayEntityUUID.equals(value::uuid<current>)){
                        ToPlayerDist = ToPlayerVect.get_vector_length();
                        PlayerCandidats = PlayerCandidats.set_map_value(Player, ToPlayerDist);
                    }
                }
            }
        }
        select::entity_by_name(SpiderBodyUUID);
        if not (PlayerCandidats.list_is_empty()){
            PlayerCandidats = PlayerCandidats.sort_map(sort_type="VALUES");
            PlayerCandidats = PlayerCandidats.get_map_keys();
            TargetPlayer = PlayerCandidats.get_list_value(0);
        }
        else{
            TargetPlayer = 0;
        }
    }
    FindPlayerTick = variable::subtract([FindPlayerTick, 1]);
    code::call_function(p"SpiderFindPl2");
    if(SpiderLook.not_equals(PrevSpiderLook)){
        WalkMoveTick = 10;
    }
    PrevSpiderLook = SpiderLook;
}

function SpiderFindPl2{
    if(TargetPlayer.not_equals(0)){
        select::player_by_name(TargetPlayer);
        SpiderLook = variable::get_vector_between_locations(SpiderCenterPos, value::hitbox_midpoint_location<current>);
        SpiderLook = SpiderLook.set_vector_component(0, "Y");
        select::entity_by_name(SpiderBodyUUID);
    }
    else{
        if(LookTick.less_or_equals(0)){
            LookTick = 40;
            if(SpiderLook.equals(0)){
                SpiderLook = variable::set_vector("%math(%random%*2-1)", 0, "%math(%random%*2-1)");
            }
            else{
                SpiderLook = SpiderLook.rotate_vector_around_axis("%math((%random%*2-1)*20)", "Y");
            }
        }
        LookTick = variable::subtract([LookTick, 1]);
    }
}

function SpiderRandWalk{
    RandWalkChance = -20;
    g`%var_local(SpiderBodyUUID)_DontShoot` = 1;
    repeat::while(AllowRandWalk.equals(0)){
        code::call_function(p"WAIT");
        WalkTarget = PointNodes.get_list_value(PointNodesIndex);
        PointNodesIndex = variable::add([PointNodesIndex, 1]);
        if(PointNodesIndex.greater_or_equals("%length_local(PointNodes)")){
            PointNodesIndex = 0;
        }
        WalkTargetDistance = variable::locations_distance(WalkTarget, SpiderCurrentPos);
        if(WalkTargetDistance.greater(0.25)){
            code::stop_repeat();
        }
    }

    entity::set_aware("TRUE");
    entity::move_to_location(WalkTarget);
    SpiderState = "randwalk";
}

function SpiderCheckHurt2{
    if(g`%var_local(SpiderBodyUUID)_HP`.less_or_equals(0)){
        PreDeathWait = 4;
    }
    else{
        if(HurtTimes.greater_or_equals(3)){
            HurtTimes = 0;
            PlaySoundPos = SpiderCenterPos;
            PlaySoundSound = sound("minecraft:cubed.spider.hurt", 2, 1.25, "MASTER");
            code::start_process(p"PlaySoundLvl", "COPY");
            code::call_function(p"SpiderRandWalk");
        }
        else{
            Random = variable::random_number(-1, 2);
            RandWalkChance = variable::add([RandWalkChance, Random]);
            Random = variable::random_number(1, 1000);
            if(Random.in_range(100, RandWalkChance)){
                code::call_function(p"SpiderRandWalk");
            }
        }
    }
}

function SpiderActions{
    code::call_function(p"SpiderEnterBar");
    Corner1 = SpiderCenterPos.shift_all_coordinates(-3, -4, -3);
    Corner2 = SpiderCenterPos.shift_all_coordinates(3, 3, 3);
    select::player_by_name(g`%var(%var_local(SpiderBodyUUID)_Level)_LvlSpiderFighters`);
    select::filter_by_conditional(value::hitbox_midpoint_location<victim_entity>.location_in_range(Corner1, Corner2, "EXACT"));
    if(value::selection_size.greater(0)){
        ToPlayerVect = variable::get_vector_between_locations(SpiderCenterPos, value::hitbox_midpoint_location<current>);
        ToPlayerVect = ToPlayerVect.set_vector_component(0.2, "Y");
        ToPlayerVect = ToPlayerVect.set_vector_length(0.15);
        player::damage(2);
        player::set_velocity(ToPlayerVect);
    }
    select::entity_by_name(SpiderBodyUUID);
}

function SpiderEnterBar{
    if(Behaviour.equals("enter")){
        CurrentBlockPos = SpiderCurrentPos.align_location();
        if(g`%var_local(SpiderBodyUUID)_Level`.equals(-33)){
            if(CurrentBlockPos.in_range(location(-120.5, 51.5, -175.5, 0, 0), location(-113.5, 57.5, -178.5, 0, 0))){
                if(world::block_equals("minecraft:barrier", location(-115.5, 52.5, -178.5, 0, 0))){
                    world::set_region("minecraft:barrier", location(-121.5, 52.5, -174.5, 0, 0), location(-123.5, 56.5, -174.5, 0, 0));
                    world::break_block([location(-114.5, 52.5, -178.5, 0, 0), location(-114.5, 53.5, -178.5, 0, 0)], "AAAAAAAAAAA=");
                    world::clear_region(location(-115.5, 52.5, -178.5, 0, 0), location(-113.5, 55.5, -178.5, 0, 0));
                    BarrierTime = 20;
                }
            }
            else{
                if(world::block_equals("minecraft:barrier", location(-121.5, 52.5, -174.5, 0, 0))){
                    if(BarrierTime.greater(0)){
                        BarrierTime = variable::subtract([BarrierTime, 1]);
                    }
                    else{
                        world::set_region("minecraft:barrier", location(-115.5, 52.5, -178.5, 0, 0), location(-113.5, 55.5, -178.5, 0, 0));
                        world::clear_region(location(-121.5, 52.5, -174.5, 0, 0), location(-123.5, 56.5, -174.5, 0, 0));
                        select::player_by_name(g`%var(%var_local(SpiderBodyUUID)_Level)_LvlSpiderFighters`);
                        select::filter_by_conditional(entity::in_area(location(-124.5, 51.5, -174.5, 0, 0), location(-113.5, 57.5, -178.5, 0, 0), "FALSE", "HITBOX"));
                        if(value::selection_size.greater(0)){
                            player::teleport(location(-114.5, 52, -180.5, -180, 0), keep_velocity="TRUE");
                        }
                    }
                }
            }
        }
        if(g`%var_local(SpiderBodyUUID)_Level`.equals(-35)){
            code::call_function(p"SpiderEnterBar2");
        }
    }
}

event<entity_spawn>{
    if(entity::is_type(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDOzcxLTS5KTCuxSs7ITM5OzYsvLkgsz4tPTU9nZmBNzi/NK2FgYGBkAABuf0NhRAAAAA==", "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDKzcxLTS5KTCuxKshMz8nMiy8uSCzPi09NT2dmYE3OL80rYWBgYGQAAEnvEblDAAAA", "H4sIAAAAAAAA/wXBTQqAIBAG0K8kiFp1h07RujNEO5n8YyBHUSPo9L03AQrzTo0OVyonAZZzRM8Wa2RxppBv25fixZ6d1ZnDzaJrple0C0FhMOmRBqDDDxUQjyBNAAAA", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
        world::cancel_event();
        code::break();
    }
    if(entity::is_type(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDOzcxLTS5KTCuxKi4pykxJLYovLkgsz4tPTU9nZmBNzi/NK2FgYGBkAABLPOssRAAAAA==", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
        if(entity::is_riding_entity("strider")){
            world::cancel_event();
            code::break();
        }
    }
    code::wait(1);
    if(entity::exists()){
        if(value::name<projectile>.text_starts_with("turret*")){
            BulletUUID = value::uuid<default_entity>;
            if(g`%var_local(BulletUUID)_PartType`.equals("rocket")){
                PlaySoundLevel = g`%var_local(BulletUUID)_Level`;
                PlaySoundSound = sound("minecraft:entity.wind_charge.wind_burst", 0.25, 0.5, "MASTER");
                repeat::while(entity::exists()){
                    code::call_function(p"WAIT");
                    PlaySoundPos = value::location<default_entity>;
                    code::start_process(p"PlaySoundLvl", "COPY", "NO_TARGET");
                    code::wait(2);
                }

            }
        }
    }
}

function SpiderRedstone{
    if(RedstonePos.not_equals(0)){
        world::set_block(RedstonePos, "minecraft:redstone_block");
        world::update_block(RedstonePos);
    }
}

function TrigSpiderArena{
    if(value::entity_type<current>.equals("player")){
        CurrentLevel = g`%player%_Level`;
        NextLevel = -33;
        code::call_function(p"Lvl_UNLOAD");
        code::call_function(p"Lvl_LOAD");
        g`%player%_Level` = NextLevel;
        code::call_function(p"LevelTP");
        TPPos = value::location<default>.shift_coordinate(-20);
        player::teleport(TPPos, keep_velocity="TRUE");
        g`%player%_RespawnPoint` = TPPos;
    }
}

function LOAD_TrigFast{
    g`%var_local(NextLevel)_LvlHasTrigFast` = 1;
    if(IsFirstLoad.equals(1)){
        Corner_1 = DataList.get_list_value(1);
        Corner_2 = DataList.get_list_value(2);
        TrigType = DataList.get_list_value(3);
        FunctionName = DataList.get_list_value(4, "0");
        FunctionData = DataList.get_list_value(5, "0");
        TrigCenter = variable::center_location([Corner_1, Corner_2]);
        g`TrigData*%var_local(TrigCenter)*Corner_1` = Corner_1.shift_coordinate(0);
        g`TrigData*%var_local(TrigCenter)*Corner_2` = Corner_2.shift_coordinate(0);
        g`TrigData*%var_local(TrigCenter)*TrigType` = TrigType;
        g`TrigData*%var_local(TrigCenter)*FunctionName` = FunctionName;
        g`TrigData*%var_local(TrigCenter)*FunctionData` = FunctionData;
        g`LvlTrigFastList_%var_local(NextLevel)`.append_value(TrigCenter);
    }
}

function UNLOAD_TrigFast{
    if(g`%var_local(CurrentLevel)_LvlHasTrigFast`.equals(1)){
        if not (g`LvlTrigFastList_%var_local(CurrentLevel)`.list_is_empty()){
            repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigFastList_%var_local(CurrentLevel)`){
                variable::purge("*%var_local(TrigCenter)*", match="NAME_CONTAINS");
            }
        }
    }
}

function PlLvlTrigFast{
    if(g`%var(%player%_Level)_LvlHasTrigFast`.equals(1)){
        if not (g`LvlTrigFastList_%var(%player%_Level)`.list_is_empty()){
            if(CurrentPos.not_equals(PrevPos)){
                if(TrigFastFindTick.greater_or_equals(2)){
                    TrigFastFindTick = 0;
                    repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigFastList_%var(%player%_Level)`){
                        code::call_function(p"WAIT");
                        if(CurrentPos.location_in_range(g`TrigData*%var_local(TrigCenter)*Corner_1`, g`TrigData*%var_local(TrigCenter)*Corner_2`, "FULL_BLOCK_RANGE")){
                            if(g`TrigData*%var_local(TrigCenter)*TrigType`.not_equals("always")){
                                if(g`TrigData*%player%*%var_local(TrigCenter)*IsActive`.equals(0)){
                                    g`TrigData*%player%*%var_local(TrigCenter)*IsActive` = 1;
                                    code::call_function(p"TrigRunFunc");
                                }
                            }
                            else{
                                code::call_function(p"TrigRunFunc");
                            }
                        }
                        else{
                            if(g`TrigData*%player%*%var_local(TrigCenter)*IsActive`.equals(1)){
                                if(g`TrigData*%var_local(TrigCenter)*TrigType`.equals("enter")){
                                    g`TrigData*%player%*%var_local(TrigCenter)*IsActive` = 0;
                                }
                            }
                        }
                    }
                }
                TrigFastFindTick = variable::add([TrigFastFindTick, 1]);
            }
            PrevPos = CurrentPos;
        }
    }
}

function CbLvlTrigFast{
    if(g`%var(%var_local(StandUUID)_Level)_LvlHasTrigFast`.equals(1)){
        if not (g`LvlTrigFastList_%var(%var_local(StandUUID)_Level)`.list_is_empty()){
            if(StandPos.not_equals(SavedStandPos)){
                if(TrigFastFindTick.greater_or_equals(2)){
                    TrigFastFindTick = 0;
                    repeat::for_each_in_list(value_variable=TrigCenter, list=g`LvlTrigFastList_%var(%var_local(StandUUID)_Level)`){
                        code::call_function(p"WAIT");
                        if(StandPos.location_in_range(g`TrigData*%var_local(TrigCenter)*Corner_1`, g`TrigData*%var_local(TrigCenter)*Corner_2`, "FULL_BLOCK_RANGE")){
                            if(g`TrigData*%var_local(TrigCenter)*TrigType`.not_equals("always")){
                                if(g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive`.equals(0)){
                                    g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive` = 1;
                                    code::call_function(p"TrigRunFunc");
                                }
                            }
                            else{
                                code::call_function(p"TrigRunFunc");
                            }
                        }
                        else{
                            if(g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive`.equals(1)){
                                if(g`TrigData*%var_local(TrigCenter)*TrigType`.equals("enter")){
                                    g`TrigData*%var_local(StandUUID)*%var_local(TrigCenter)*IsActive` = 0;
                                }
                            }
                        }
                    }
                }
                TrigFastFindTick = variable::add([TrigFastFindTick, 1]);
            }
        }
    }
}

event<player_teleport>{
    if(g`%player%_InMenu`.equals(0)){
        if(g`%player%_MPlatMoving`.greater(0)){
            code::break();
        }
        if(g`%player%_FlyTime`.greater(0)){
            code::break();
        }
        player::set_item_cooldown(60, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSkpNLSnKzy9hZmBNzi/NK2FgYGBkAACq4ndoOwAAAA==");
    }
}

process PlaySoundLvl{
    select::player_by_name(g`LvlPlayerList_%var_local(PlaySoundLevel)`);
    if(value::selection_size.greater(0)){
        if(PlaySoundLevel.equals(-35)){
            if(PlaySoundIsBoss.equals(0)){
                if not (PlaySoundSound.is_type("ARRAY")){
                    PlaySoundVolume = PlaySoundSound.get_sound_volume_action();
                    PlaySoundVolume = variable::multiply([PlaySoundVolume, 2]);
                    PlaySoundSound = PlaySoundSound.set_sound_volume_action(PlaySoundVolume);
                }
                else{
                    repeat::for_each_in_list(PlaySoundTemp2, PlaySoundTemp, PlaySoundSound){
                        PlaySoundVolume = PlaySoundTemp.get_sound_volume_action();
                        PlaySoundVolume = variable::multiply([PlaySoundVolume, 2]);
                        PlaySoundTemp = PlaySoundTemp.set_sound_volume_action(PlaySoundVolume);
                        PlaySoundSound = PlaySoundSound.set_list_value(PlaySoundTemp2, PlaySoundTemp);
                    }
                }
            }
        }
        if(PlaySoundUUID.not_equals(0)){
            player::play_sound_from_entity(PlaySoundUUID, PlaySoundSound);
        }
        else{
            player::play_sound_sequence(PlaySoundSound, PlaySoundPos, PlaySoundDelay);
        }
    }
}

function GravityLMB1{
    StandUUID = value::uuid<current>;
    if not (value::name<current>.text_contains("*rail*")){
        if(g`%var_local(StandUUID)_IsPicked`.equals(0)){
            player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart, value::hitbox_midpoint_location<current>, 0.25, "DISTANCE");
            CubeCenter = value::location<current>.shift_coordinate(0.5, "Y");
            VectFromPl = variable::get_vector_between_locations(value::location<default>, CubeCenter);
            DistFromPl = VectFromPl.get_vector_length();
            DistFromPl = variable::subtract([3.5, DistFromPl]);
            DistFromPl = variable::multiply([DistFromPl, 0.2]);
            VectFromPl = VectFromPl.set_vector_component(0.25, "Y");
            VectFromPl = VectFromPl.set_vector_length(DistFromPl);
            entity::set_location(VectFromPl);
        }
    }
    else{
        if(g`%player%_GravityPickUUID`.equals(0)){
            BlockType = value::location<current>.get_block_material();
            if(BlockType.not_equals(["rail", "activator_rail", "polished_blackstone_pressure_plate", "stone_pressure_plate", "birch_pressure_plate"])){
                player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart, value::hitbox_midpoint_location<current>, 0.25, "DISTANCE");
                CubeCenter = value::location<current>.shift_coordinate(0.5, "Y");
                VectFromPl = variable::get_vector_between_locations(value::location<default>, CubeCenter);
                DistFromPl = VectFromPl.get_vector_length();
                DistFromPl = variable::subtract([3.5, DistFromPl]);
                DistFromPl = variable::multiply([DistFromPl, 0.08]);
                VectFromPl = VectFromPl.set_vector_component(0.1, "Y");
                VectFromPl = VectFromPl.set_vector_length(DistFromPl);
                entity::set_location(VectFromPl);
            }
        }
    }
}

event<player_location_change>{
    if(g`%player%_InMenu`.equals(0)){
        Ping = value::ping<default>;
        g`%player%_IsWalking` = "%math(3+floor(%var_local(Ping)/50))";
        g`%player%_WalkNewPos` = value::event_new_location<default>;
        g`%player%_WalkVect` = variable::get_vector_between_locations(value::event_from_location<default>, value::event_new_location<default>);
        g`%player%_WalkLen` = g`%player%_WalkVect`.get_vector_length();
        Dot = g`%player%_WalkVect`.set_vector_length(1);
        Dot = variable::vector_dot_product(Dot, value::direction_of_view<default>);
        Dot = variable::max([Dot, 0]);
        g`%player%_WalkMult` = variable::multiply([10, g`%player%_WalkLen`, Dot]);
    }
}

function R35_End{
    g`%player%_R35Ending` = 1;
    code::call_function("Lvl_UNLOAD");
    code::call_function("Lvl_LOAD");
    g`%player%_Level` = NextLevel;
    player::set_item_cooldown(100, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_item_cooldown(100, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
    code::wait(20);
    if not (value::location<default>.location_in_range(location(-125.5, 68.5, 9.5, 0, 0), location(-121.5, 70.5, 7.5, 0, 0), "FULL_BLOCK_RANGE")){
        player::teleport(location(-115.5, 68, 8.5, 0, 0), "FALSE", "FALSE");
    }
    else{
        TPPos = value::location<default>.shift_coordinate(8, "X");
        player::teleport(TPPos, keep_velocity="TRUE");
    }
    player::stop_sound([]);
    player::play_sound(sound("minecraft:block.iron_door.close", 1, 1.25, "MASTER"), location(-115.5, 68.5, 10.5, 0, 0));
    code::wait(20);
    repeat::multi_times(amount=3){
        code::call_function(p"WAIT");
        player::play_sound(sound("minecraft:entity.minecart.riding", 2, 0.5, "MASTER"), location(-115.5, 68, 8.5, 0, 0));
        code::wait(70);
    }
    code::call_function("LevelTP");
    TPPos = value::location<default>.shift_all_coordinates(100, 25, 29);
    player::teleport(TPPos, keep_velocity="TRUE");
    player::play_sound_sequence([sound("minecraft:block.note_block.bell", 1, 1, "MASTER"), sound("minecraft:block.iron_door.open", 1, 1.25, "MASTER")], location(-15.5, 93.5, 39.5, 0, 0), 0);
    g`%player%_R35Ending` = 0;
}

function LOAD_Boss{
    g`%var_local(NextLevel)_LvlHasBoss` = 1;
    if(IsFirstLoad.equals(1)){
        g`BossFightStarted` = 0;
        g`BossTurretsActive` = 0;
        SpawnPos = location(0.5, 105.5, -6.5, 0, 0);
        g`%var_local(NextLevel)_LvlBossFighters` = [];
        world::set_block([location(0.5, 120.5, 6.5, 0, 0), location(0.5, 120.5, 8.5, 0, 0)], "minecraft:structure_void");
        world::update_block(location(0.5, 120.5, 6.5, 0, 0));
        world::update_block(location(0.5, 120.5, 8.5, 0, 0));
        code::call_function(p"SpawnBoss");
    }
    if not (g`%var_local(NextLevel)_LvlBossFighters`.list_contains_value("%player%")){
        g`%var_local(NextLevel)_LvlBossFighters`.append_value("%player%");
        code::start_process(p"ViewDistAsync", "COPY");
    }
}

function UNLOAD_Boss{
    if(g`%var_local(CurrentLevel)_LvlHasBoss`.equals(1)){
        if(g`%var_local(CurrentLevel)_LvlBossFighters`.list_contains_value("%player%")){
            g`%var_local(CurrentLevel)_LvlBossFighters` = g`%var_local(CurrentLevel)_LvlBossFighters`.remove_list_value("%player%");
        }
        if(g`%var_local(CurrentLevel)_LvlBossFighters`.list_is_empty()){
            select::entity_by_conditional(value::name<victim_entity>.text_starts_with("boss*%var_local(CurrentLevel)*"));
            if(value::selection_size.greater(0)){
                variable::purge(["%var_local(CurrentLevel)_LvlHasBoss", "%var_local(CurrentLevel)_LvlBossFighters", "BossFightStarted", "BossTurretsActive"]);
                variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
                entity::remove();
            }
            select::reset();
        }
    }
}

function BossParams{
    BossSegmentCount = 4;
    BossScale = 2.5;
    BossDisplaySize = variable::set_vector(BossScale, BossScale, BossScale);
    BossLegLengthList = ["%math(1.25*%var_local(BossScale))", "%math(1*%var_local(BossScale))", "%math(1.5*%var_local(BossScale))", "%math(0.75*%var_local(BossScale))"];
    BossMaxLegLength = variable::add(["%math(1.25*%var_local(BossScale))", "%math(1*%var_local(BossScale))", "%math(1.5*%var_local(BossScale))", "%math(0.75*%var_local(BossScale))"]);
    BossHeadDistance = "%math(2*%var_local(BossScale))";
    BossInterpolation = 5;
    BossStabilizerRadius = 11;
}

function SpawnBoss{
    code::call_function(p"BossParams");
    BossBodyName = variable::set_text(["boss*", NextLevel, "*body*%random_uuid%"], "CONCATENATION");
    TEMP = SpawnPos.get_block_material();
    world::spawn_armor_stand("AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", SpawnPos, BossBodyName, marker="TRUE", show_arms="FALSE", invisible="TRUE");
    select::last_entity();
    BossBodyUUID = value::uuid<current>;
    entity::set_custom_name_visibility("FALSE");
    g`%var_local(BossBodyUUID)_Level` = NextLevel;
    g`%var_local(BossBodyUUID)_PartType` = "body";
    g`%var_local(BossBodyUUID)_HP` = 3;
    BossCurrentPos = SpawnPos;
    BossPrevPos = BossCurrentPos;
    code::call_function("BossDisplay");
    code::call_function(p"BossRing");
    BossState = "idle";
    TargetPoint = value::hitbox_midpoint_location<default>;
    TargetVect = variable::get_vector_between_locations(BossCurrentPos, TargetPoint);
    MaxTargetAngle = 20;
    BossRingSpeed = 10;
    BossStabilizerSpeed = 2.5;
    select::reset();
    code::start_process(p"BossLOOP", "COPY", "NO_TARGET");
}

function BossDisplay{
    Light1 = BossCurrentPos.get_light_level("BLOCKS");
    Light2 = BossCurrentPos.get_light_level("SKY");
    BossLegName = variable::set_text(["boss*", NextLevel, "*leg*%random_uuid%"], "CONCATENATION");
    world::spawn_item_display(BossCurrentPos, BossLegName, "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhUL52BD4gyILUodV0QkNkrc+0Mn3v7pOaDH6R4sPLi2pAKMzwN2KWIqSZhqWOwqbC+uydjPWendYyBdxQB0Do60fFRYrDmc/4jWZlp80cjZx9/hiP2SNVgbNni7YOsLwNsdXIEAAAA=");
    select::last_entity();
    BossHeadUUID = value::uuid<current>;
    entity::set_display_brightness(Light1, Light2);
    entity::set_display_teleport_duration(BossInterpolation);
    entity::set_display_scale(BossDisplaySize);
    g`%var_local(BossHeadUUID)_PartType` = "head";
    DisplayItems = ["H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhU3YWLgDIgtCo6rRiQ2Stz7cTToxNs/PQf0ON2ChTvXllSA8XHALkVMJQlTDbNdhG3hmoz9Myu9egykqxiAzsGRlrcKizWH8x/R2kyLLxo5+/g7HLGfswZrwwavH2x9AfbLLuyBAAAA", "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhU3YWLgDIgtCo6rRiQ2Stz7chToxNs/PQf0ON2ChTvXllSA8XHALkVMJQlTDbNdhG3hmoz9Myu9egykqxiAzsGRlrcKizWH8x/R2kyLLxo5+/g7HLGfswZrwwavH2x9AcDOguuBAAAA", "H4sIAAAAAAAA/0XNOw7CMBBF0QdREDhVSsRO6JCyhojOMuOJsLBnInuyfz4Ntz+6DugwTMHCzLUlFWC8H7FPEeeShKmGxa7C9uSajP0jK7069KSbGICdgyMtqwqLNYfLH9HWTIsvGjn7+DmccFiyBmv9F97w6w323rFbgQAAAA==", "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCWdkTchA2JMyC2KHVcEZHYKHHvD514+6fngB6ne7Dw4NqSCjA9D9iliHNJwlTDYldhe3FNxn7OSu8eA+kqBqBzcKTlo8JizeHyR7Q20+KLRs4+/g5H7JeswdqwwduIrS9t3GdYgQAAAA=="];
    PartTypes = ["legseg1", "legseg2", "legseg3", "legseg4"];
    repeat::on_range(N, 0, "%math(%var_local(BossSegmentCount)-1)"){
        code::call_function(p"WAIT");
        DisplayItem = DisplayItems.get_list_value(N);
        world::spawn_item_display(BossCurrentPos, BossLegName, DisplayItem);
        select::last_entity();
        l`%var_local(N)_BossSegmentUUID` = value::uuid<current>;
        entity::set_rotation(0, 0);
        entity::set_display_brightness(Light1, Light2);
        entity::set_display_teleport_duration(BossInterpolation);
        entity::set_display_scale(BossDisplaySize);
        g`%var_local(%var_local(N)_BossSegmentUUID)_PartType` = PartTypes.get_list_value(N);
    }
    LegEndPos = location(0, 0, 0, 0, 0);
}

function BossRing{
    BossRingName = variable::set_text(["boss*", NextLevel, "*ring*%random_uuid%"], "CONCATENATION");
    world::spawn_item_display(BossCurrentPos, BossRingName, "H4sIAAAAAAAA/0WNsQ7CMAwFH1RFECZmNj6DiaHfgNgiK3EhUmJXtSt+n8LCjSedLgAdjgM53Xm2ogKcHntsS8alFeE00+jX96s4R3NaTY7PSmZxIuEOfdJFHMAmICRtkwqLW8D5X6fFXFtsmrnGvK4O2I1Vya3/hjf8+ABAe3J4igAAAA==");
    select::last_entity();
    BossRingUUID = value::uuid<current>;
    entity::set_display_brightness(15, 15);
    entity::set_display_teleport_duration(BossInterpolation);
    entity::set_display_brightness(15, 15);
    entity::set_display_scale(vector(6, 6, 6));
    repeat::multi_times(N, 3){
        code::call_function(p"WAIT");
        l`%var_local(N)_BossStabilizerDirection` = vector(0, 0, 1).rotate_vector_around_axis("%math((%var_local(N)-1)*120)", "Y");
        LocalSpawnPos = BossCurrentPos.shift_location_on_vector(l`%var_local(N)_BossStabilizerDirection`, BossStabilizerRadius);
        LocalSpawnPos = LocalSpawnPos.face_location(BossCurrentPos);
        world::spawn_item_display(LocalSpawnPos, BossRingName, "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhWXYGZD4gyILUodV0QkNkrc+0Mn3v7pOaDH6R4sPLi2pAKMzwN2KWIqSZhqWOwqbC+uydjPWendYyBdxQB0Do60fFRYrDmc/4jWZlp80cjZx9/hiP2SNVgbNni7YOsLW9nLX4EAAAA=");
        select::last_entity();
        l`%var_local(N)_BossStabilizerUUID` = value::uuid<current>;
        entity::set_display_brightness(Light1, Light2);
        entity::set_display_teleport_duration(BossInterpolation);
        entity::set_display_scale(vector(2, 4, 2));
        entity::set_display_translation(vector(0, 1.95, 0));
    }
}

function BossLegStraigth{
    l`-1_TipPos` = LegOriginPos;
    SegUpVect = variable::get_vector_between_locations(LegOriginPos, EndPoint);
    StraightDistance = SegUpVect.get_vector_length();
    StraightDiretion = variable::set_vector(0, "%math(-%var_local(StraightDistance))", 0);
    n1 = SegUpVect.set_vector_length(1);
    dot = variable::vector_dot_product(n1, vector(0, -1, 0));
    dot = dot.absolute();
    dot = variable::subtract([1, dot]);
    SegUpVect = variable::vector_cross_product(vector(0, -1, 0), SegUpVect);
    SegUpVect = SegUpVect.set_vector_length(1);
    StraightDiretion = StraightDiretion.rotate_vector_around_vector(SegUpVect, "%math(-45*%var_local(dot))");
    Target = LegOriginPos;
    repeat::on_range(N, 0, "%math(%var_local(BossSegmentCount)-1)"){
        code::call_function(p"WAIT");
        BossLegLength = BossLegLengthList.get_list_value(N);
        l`%var_local(N)_TipPos` = Target.set_location_direction(StraightDiretion);
        l`%var_local(N)_TipPos` = l`%var_local(N)_TipPos`.shift_location_in_direction(BossLegLength);
        l`%var_local(N)_TipPos` = l`%var_local(N)_TipPos`.face_location(Target);
        Target = l`%var_local(N)_TipPos`;
    }
}

function BossLegFABRIK{
    code::call_function(p"BossLegStraigth");
    repeat::multi_times(I, 10){
        l`%math(%var_local(BossSegmentCount)-1)_TipPos` = EndPoint;
        repeat::on_range(N, "%math(%var_local(BossSegmentCount)-1)", 0, -1){
            code::call_function(p"WAIT");
            BossLegLength = BossLegLengthList.get_list_value(N);
            l`N-1` = variable::subtract([N, 1]);
            l`%var_local(N)_TipPos` = l`%var_local(N)_TipPos`.face_location(l`%var_local(N-1)_TipPos`);
            l`%var_local(N-1)_TipPos` = l`%var_local(N)_TipPos`.shift_location_in_direction(BossLegLength);
        }
        l`-1_TipPos` = LegOriginPos;
        repeat::on_range(N, 0, "%math(%var_local(BossSegmentCount)-1)"){
            code::call_function(p"WAIT");
            BossLegLength = BossLegLengthList.get_list_value(N);
            l`N-1` = variable::subtract([N, 1]);
            l`%var_local(N)_TipPos` = l`%var_local(N-1)_TipPos`.face_location(l`%var_local(N)_TipPos`);
            l`%var_local(N)_TipPos` = l`%var_local(N)_TipPos`.shift_location_in_direction(BossLegLength);
            l`%var_local(N)_TipPos` = l`%var_local(N)_TipPos`.face_location(l`%var_local(N-1)_TipPos`);
        }
        SegDist = variable::locations_distance(l`%math(%var_local(BossSegmentCount)-1)_TipPos`, EndPoint);
        if(SegDist.less(0.01)){
            code::stop_repeat();
        }
    }
    LegEndPos = EndPoint;
    repeat::on_range(N, 0, "%math(%var_local(BossSegmentCount)-1)"){
        code::call_function(p"WAIT");
        BossLegLength = BossLegLengthList.get_list_value(N);
        SegDirection = l`%var_local(N)_TipPos`.get_location_direction();
        NewLegShift = variable::multiply_vector(SegDirection, "%math(%var_local(BossLegLength)*0.5)");
        select::entity_by_name(l`%var_local(N)_BossSegmentUUID`);
        entity::teleport(l`%var_local(N)_TipPos`, "FALSE");
        entity::set_display_interpolation(BossInterpolation);
        code::call_function("BossLegRotation");
        entity::set_display_translation(NewLegShift);
    }
}

function BossLegRotation{
    SegDirX, SegDirY, SegDirZ = SegDirection.get_vector_all_components();
    SegRotYaw = variable::atan2(SegDirX, SegDirZ);
    SegRotPitch = variable::atan2("%math(-%var_local(SegDirY))", "%math(sqrt(%var_local(SegDirX)*%var_local(SegDirX)+%var_local(SegDirZ)*%var_local(SegDirZ)))");
    SegRightVect = variable::vector_cross_product(SegUpVect, SegDirection);
    SegRightVect = SegRightVect.set_vector_length(1);
    SegRightY = SegRightVect.get_vector_component("Y");
    SegUpY = SegUpVect.get_vector_component("Y");
    SegRotRoll = variable::atan2(SegRightY, SegUpY);
    entity::set_display_rotation_from_euler_angles(yaw=SegRotYaw, input="RADIANS");
    entity::set_display_rotation_from_euler_angles(SegRotPitch, mode="ADD", input="RADIANS");
    entity::set_display_rotation_from_euler_angles(roll=SegRotRoll, mode="ADD", input="RADIANS");
}

process BossLOOP{
    PlaySoundLevel = g`%var_local(BossBodyUUID)_Level`;
    PlaySoundIsBoss = 1;
    repeat::forever(){
        code::call_function(p"WAIT");
        select::entity_by_name(BossBodyUUID);
        if(value::selection_size.less_or_equals(0)){
            code::break();
        }
        BossCurrentPos = value::location<current>;
        LegOriginPos = BossCurrentPos;
        code::call_function(p"BossStates");
        if(g`%var_local(BossBodyUUID)_HP`.greater(0)){
            PlaySoundPos = BossCurrentPos;
            PlaySoundSound = sound("minecraft:block.beacon.power_select", 3, 0.5, "power1", "MASTER");
            if(g`BossTurretsActive`.equals(1)){
                PlaySoundSound = sound("minecraft:block.beacon.power_select", 2, 0.5, "power1", "MASTER");
            }
            code::start_process(p"PlaySoundLvl", "COPY", "NO_TARGET");
        }
        code::call_function(p"BossRotate");
        code::call_function(p"BossRotRing");
        code::wait(BossInterpolation);
    }
}

function BossFindPl{
    if(FindPlayerTick.less_or_equals(0)){
        FindPlayerTick = "%math(ceil(20/%var_local(BossInterpolation)))";
        PlayerCandidats = variable::create_map();
        repeat::for_each_in_list(value_variable=Player, list=g`%var(%var_local(BossBodyUUID)_Level)_LvlBossFighters`){
            code::call_function(p"WAIT");
            select::player_by_name(Player);
            if(g`%selected%_InMenu`.equals(0)){
                if(player::gamemode_equals("ADVENTURE")){
                    ToPlayerVect = variable::get_vector_between_locations(BossCurrentPos, value::hitbox_midpoint_location<current>);
                    RayStartPos = BossCurrentPos.set_location_direction(ToPlayerVect);
                    RayEntities = value::uuid<current>;
                    RayEntityUUID = variable::ray_trace_result(start=RayStartPos, ray_size=0, max_distance=64, entities=RayEntities, ray_collision_mode="BLOCKS_AND_ENTITIES");
                    if(RayEntityUUID.equals(value::uuid<current>)){
                        ToPlayerDist = ToPlayerVect.get_vector_length();
                        PlayerCandidats = PlayerCandidats.set_map_value(Player, ToPlayerDist);
                    }
                }
            }
        }
        select::entity_by_name(BossBodyUUID);
        if not (PlayerCandidats.list_is_empty()){
            PlayerCandidats = PlayerCandidats.sort_map(sort_type="VALUES");
            PlayerCandidats = PlayerCandidats.get_map_keys();
            TargetPlayer = PlayerCandidats.get_list_value(0);
        }
        else{
            TargetPlayer = 0;
        }
    }
    FindPlayerTick = variable::subtract([FindPlayerTick, 1]);
}

function BossRotate{
    if(g`%var_local(BossBodyUUID)_HP`.greater(0)){
        code::call_function(p"BossFindPl");
        if(TargetPlayer.not_equals(0)){
            select::player_by_name(TargetPlayer);
            TargetPoint = value::hitbox_midpoint_location<current>;
            select::entity_by_name(BossBodyUUID);
        }
    }
    NewTargetVect = variable::get_vector_between_locations(BossCurrentPos, TargetPoint);
    TargVectAngle = variable::get_angle_between_vectors(TargetVect, NewTargetVect);
    if(TargVectAngle.greater(MaxTargetAngle)){
        MaxTargetAngle = 2;
        targnormal = variable::vector_cross_product(TargetVect, NewTargetVect);
        RotAngle = variable::min([3, "%math(%var_local(TargVectAngle)*0.5)"]);
        TargetVect = TargetVect.rotate_vector_around_vector(targnormal, RotAngle, "DEGREES");
        PlaySoundSound = [sound("minecraft:entity.breeze.slide", 3, 1.5, "MASTER"), sound("minecraft:item.spyglass.use", 5, 0.5, "MASTER")];
        code::start_process(p"PlaySoundLvl", "COPY", "NO_TARGET");
    }
    else{
        MaxTargetAngle = 20;
    }
    code::call_function(p"BossRotate2");
}

function BossRotate2{
    ToTargetVect = TargetVect.set_vector_length(1);
    dot = variable::vector_dot_product(ToTargetVect, vector(0, -1, 0));
    dot = dot.absolute();
    dot = variable::subtract([1, dot]);
    EndShift = dot.lerp_number(BossMaxLegLength, BossHeadDistance);
    EndPoint = LegOriginPos.shift_location_on_vector(ToTargetVect, EndShift);
    sin = SinAngle.sine();
    EndPoint = EndPoint.shift_coordinate("%math(1*%var_local(sin)*%var_local(dot))", "Y");
    SinAngle = variable::add([SinAngle, 10]);
    code::call_function(p"BossLegFABRIK");
    select::entity_by_name(BossHeadUUID);
    entity::teleport(LegEndPos, "FALSE");
    entity::face_location(TargetPoint);
}

function BossRotRing{
    select::entity_by_name(BossRingUUID);
    entity::set_display_interpolation(BossInterpolation);
    entity::set_display_rotation_from_axis_angle(vector(0, 1, 0), BossRingSpeed, "ADD");
    if(g`%var_local(BossBodyUUID)_HP`.less_or_equals(0)){
        entity::set_display_scale(RingSize);
    }
    repeat::multi_times(N, 3){
        select::entity_by_name(l`%var_local(N)_BossStabilizerUUID`);
        if(g`%var_local(BossBodyUUID)_HP`.greater(0)){
            l`%var_local(N)_BossStabilizerDirection` = l`%var_local(N)_BossStabilizerDirection`.rotate_vector_around_axis(BossStabilizerSpeed, "Y");
            NewStabilizerPos = BossCurrentPos.shift_location_on_vector(l`%var_local(N)_BossStabilizerDirection`, BossStabilizerRadius);
            NewStabilizerPos = NewStabilizerPos.face_location(BossCurrentPos);
            entity::teleport(NewStabilizerPos);
        }
        else{
            if(l`%var_local(N)_StabRotToggle`.equals(0)){
                l`%var_local(N)_StabRotToggle` = 1;
                l`%var_local(N)_StabRotPivot` = value::location<current>.shift_coordinate(10, "Y");
                l`%var_local(N)_StabRotAxis` = variable::vector_cross_product(l`%var_local(N)_BossStabilizerDirection`, vector(0, 1, 0));
            }
            if(l`%var_local(N)_StabAngle`.less(80)){
                StabRotVect = variable::get_vector_between_locations(l`%var_local(N)_StabRotPivot`, value::location<current>);
                StabRotVect = StabRotVect.rotate_vector_around_vector(l`%var_local(N)_StabRotAxis`, 5);
                StabDir = variable::vector_cross_product(StabRotVect, l`%var_local(N)_StabRotAxis`);
                NewStabilizerPos = l`%var_local(N)_StabRotPivot`.shift_location_on_vector(StabRotVect);
                NewStabilizerPos = NewStabilizerPos.set_location_direction(StabDir);
                l`%var_local(N)_StabAngle` = variable::add([l`%var_local(N)_StabAngle`, 5]);
                entity::teleport(NewStabilizerPos);
            }
        }
    }
}

function BossStates{
    if(BlockActive1.equals(0)){
        if(world::block_equals("minecraft:redstone_block", location(-21.5, 114.5, -6.5, 0, 0))){
            BlockActive1 = 1;
            g`%var_local(BossBodyUUID)_HP` = variable::subtract([g`%var_local(BossBodyUUID)_HP`, 1]);
            BossRingSpeed = variable::multiply([BossRingSpeed, 1.75]);
            BossStabilizerSpeed = variable::multiply([BossStabilizerSpeed, 0.75]);
            code::start_process(p"BossHurtEffect", "COPY", "NO_TARGET");
        }
    }
    if(BlockActive2.equals(0)){
        if(world::block_equals("minecraft:redstone_block", location(22.5, 114.5, -6.5, 0, 0))){
            BlockActive2 = 1;
            g`%var_local(BossBodyUUID)_HP` = variable::subtract([g`%var_local(BossBodyUUID)_HP`, 1]);
            BossRingSpeed = variable::multiply([BossRingSpeed, 1.75]);
            BossStabilizerSpeed = variable::multiply([BossStabilizerSpeed, 0.75]);
            code::start_process(p"BossHurtEffect", "COPY", "NO_TARGET");
        }
    }
    if(BlockActive3.equals(0)){
        if(world::block_equals("minecraft:redstone_block", location(0.5, 114.5, -28.5, 0, 0))){
            BlockActive3 = 1;
            g`%var_local(BossBodyUUID)_HP` = variable::subtract([g`%var_local(BossBodyUUID)_HP`, 1]);
            BossRingSpeed = variable::multiply([BossRingSpeed, 1.75]);
            BossStabilizerSpeed = variable::multiply([BossStabilizerSpeed, 0.75]);
            code::start_process(p"BossHurtEffect", "COPY", "NO_TARGET");
        }
    }
    if(g`%var_local(BossBodyUUID)_HP`.equals(1)){
        if(BossSpiderSummoned.equals(0)){
            BossSpiderSummoned = 1;
            g`BossTurretsActive` = 0;
            select::player_by_name(g`%var(%var_local(BossBodyUUID)_Level)_LvlBossFighters`);
            code::start_process(p"TrigSpiderAsync", target_mode="FOR_EACH_IN_SELECTION");
            select::entity_by_name(BossBodyUUID);
        }
    }
    if(g`%var_local(BossBodyUUID)_HP`.less_or_equals(0)){
        code::call_function(p"BossDeathAnim");
    }
}

process BossHurtEffect{
    if not (g`LvlCubeList_%var(%var_local(BossBodyUUID)_Level)`.list_is_empty()){
        repeat::for_each_in_list(value_variable=StandUUID, list=g`LvlCubeList_%var(%var_local(BossBodyUUID)_Level)`){
            g`%var_local(StandUUID)_IsDeleted` = "1";
        }
    }
    select::player_by_name(g`%var(%var_local(BossBodyUUID)_Level)_LvlBossFighters`);
    if(g`%var_local(BossBodyUUID)_HP`.greater(0)){
        Messages = ["audio|cubed.dialog.lvl_35_p3_1|{\"x\":0.5,\"y\":105.5,\"z\":-6.5}", "text|ВНИМАНИЕ! ОБНАРУЖЕНО НАРУШЕНИЕ СТАБИЛЬНОСТИ ЭНЕРГЕТИЧЕСКОГО КОЛЬЦА!|174|1", "text|…Интересный ход. Но ты же понимаешь, что это ещё не конец? Не разочаровывай меня…|144"];
        if(g`%var_local(BossBodyUUID)_HP`.equals(1)){
            Messages = ["audio|cubed.dialog.lvl_35_p3_2|{\"x\":0.5,\"y\":105.5,\"z\":-6.5}", "text|ВНИМАНИЕ! УРОВЕНЬ СТАБИЛЬНОСТИ КРИТИЧЕСКИ НИЗКИЙ!|160|1", "text|…Значит, ты справилась… Хорошо. Надеюсь, в этот раз твоя встреча с нашим общим|98", "text|знакомым пройдёт удачнее. Хотя кто знает?|96"];
        }
        code::start_process(p"DialogAudioAsync", "COPY", "FOR_EACH_IN_SELECTION");
        player::play_sound(sound("minecraft:entity.elder_guardian.curse", 16, 0.5, "MASTER"), BossCurrentPos);
        repeat::multi_times(amount=8){
            player::play_hurt_animation("%math(%random%*360)");
            code::wait(5);
        }
    }
    else{
        g`%player%_InActSwitch` = 1;
        player::stop_sound([]);
        player::set_boss_bar("empty_bar_1", "%empty%", 0);
        player::set_item_cooldown(400, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
        player::set_item_cooldown(400, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
        Messages = ["audio|cubed.dialog.lvl_35_p3_3|{\"x\":0.5,\"y\":105.5,\"z\":-6.5}", "text|ВНИМАНИЕ! ВНИМАНИЕ! ПРЕВЫШЕН ДОПУСТИМЫЙ УРОВЕНЬ ЭНЕРГИИ! НЕМЕДЛЕННО|204|1", "text|ПОКИНЬТЕ ПОМЕЩЕНИЕ! НЕМЕДЛЕННО ПОКИНЬТЕ ПОМЕЩЕНИЕ!|166|1"];
        code::start_process(p"DialogAudioAsync", "COPY", "FOR_EACH_IN_SELECTION");
    }
}

function BossDeathAnim{
    if(BossDeathToggle.equals(0)){
        BossDeathToggle = 1;
        BossDeathVect = variable::set_vector("%math(%random%*2-1)", 0, "%math(%random%*2-1)");
        BossDeathVect = BossDeathVect.set_vector_length(1);
        BossDeathTimer = "%math(ceil(320/%var_local(BossInterpolation)))";
        RingSize = vector(6, 6, 6);
        BossSound = sound("minecraft:block.beacon.power_select", 16, 0.5, "power1", "MASTER");
        BossSoundPitch = 0.5;
    }
    if(BossDeathTimer.greater(0)){
        MaxTargetAngle = 2;
        BossDeathAnimAngle = BossDeathAngle.sine();
        TargetPoint = vector(0, -18, 0).rotate_vector_around_vector(BossDeathVect, "%math(%var_local(BossDeathAnimAngle)*20)");
        TargetPoint = LegOriginPos.shift_location_on_vector(TargetPoint);
        BossDeathAngle = variable::add([BossDeathAngle, 10]);
        BossSound = BossSound.set_sound_pitch(BossSoundPitch);
        BossSoundPitch = variable::min(["%math(%var_local(BossSoundPitch)+0.02)", 2]);
        select::player_by_name(g`%var(%var_local(BossBodyUUID)_Level)_LvlBossFighters`);
        if(BossDeathTimer.equals("%math(ceil(180/%var_local(BossInterpolation)))")){
            player::give_potion_effect(potion("minecraft:levitation", 0, -1), "FALSE", "FALSE", "NONE");
        }
        if(BossDeathTimer.less_or_equals("%math(ceil(180/%var_local(BossInterpolation)))")){
            PlLookPos = BossCurrentPos.shift_coordinate(-4, "Y");
            player::face_location(PlLookPos);
        }
        player::play_sound_sequence([sound("minecraft:entity.elder_guardian.curse", 16, 0.5, "MASTER"), sound("minecraft:ambient.basalt_deltas.additions", 16, 2, "basaltground2", "MASTER"), sound("minecraft:block.conduit.deactivate", 8, 1, "MASTER"), BossSound], BossCurrentPos, 0);
        player::display_particle([particle("EXPLOSION_EMITTER", 16, 10, 10, 0, 0, 0), particle("SWEEP_ATTACK", 24, 12, 12, 0, 0, 0, size=8), particle("FLASH", 1, 0, 0, 0, 0, 0), particle("DUST_COLOR_TRANSITION", 24, 16, 16, 0, 0, 0, color=16751104), particle("LARGE_SMOKE", 8, 2, 8, 0, 0, 0)], BossCurrentPos);
        player::play_hurt_animation("%math(%random%*360)");
        if(BossDeathTimer.equals("%math(ceil(60/%var_local(BossInterpolation)))")){
            repeat::for_each_in_list(value_variable=Player, list=value::selection_target_names){
                g`%var_local(Player)_TitleTicks` = 400;
            }
            player::send_title("&#7a503c█", "", 60, 100, 40);
        }
        RingSize = variable::multiply_vector(RingSize, 1.02);
        BossDeathTimer = variable::subtract([BossDeathTimer, 1]);
    }
    else{
        select::player_by_name(g`%var(%var_local(BossBodyUUID)_Level)_LvlBossFighters`);
        code::start_process(p"ACT3Ending", target_mode="FOR_EACH_IN_SELECTION");
        code::break();
    }
}

process `*TrigBossArena`{
    if(value::entity_type<default>.equals("player")){
        g`%player%_RespawnPoint` = location(0.5, 91, 25.5, -180, 0);
        if(g`BossFightStarted`.equals(0)){
            g`BossFightStarted` = 1;
            select::player_by_name(g`LvlPlayerList_-35`);
            Messages = ["audio|cubed.dialog.lvl_35_p3|{\"x\":0.5,\"y\":105.5,\"z\":-6.5}", "text|О… ты пришла. Отлично. Я приготовила для тебя последнее испытание. Если|122", "text|сможешь пройти его — будешь свободна и сможешь покинуть это место.|116"];
            code::start_process(p"DialogAudioAsync", "COPY", "FOR_EACH_IN_SELECTION");
            code::wait(240);
            code::start_process(p"MusicPlayAsync", target_mode="FOR_EACH_IN_SELECTION");
            player::play_sound(sound("minecraft:block.piston.contract", 16, 2, "MASTER"), location(-25.5, 90.5, -6.5, 0, 0));
            player::play_sound(sound("minecraft:block.piston.contract", 16, 2, "MASTER"), location(26.5, 90.5, -6.5, 0, 0));
            g`BossTurretsActive` = 1;
            world::set_block(location(0.5, 120.5, 6.5, 0, 0), "minecraft:redstone_block");
            world::update_block(location(0.5, 120.5, 6.5, 0, 0));
        }
    }
}

function TrigSpider2{
    if(g`%player%_Level`.equals(-35)){
        SpawnPos = location(-7.5, 89, -38.5, 0, 0);
        Behaviour = "enter";
        WalkPathNodes = [location(-7.5, 89, -34.5, -90, 0), location(0.5, 89, -35.5, 0, 0), location(0.5, 89, -22.5, 0, 0)];
        PointNodes = [location(0.5, 89, -6.5, 0, 0), location(-11.5, 89, -6.5, -90, 0), location(0.5, 89, -6.5, 0, 0), location(-7.5, 89, 1.5, -135, 0), location(0.5, 89, -6.5, 0, 0), location(0.5, 89, 5.5, -180, 0), location(0.5, 89, -6.5, 0, 0), location(8.5, 89, 1.5, 135, 0), location(0.5, 89, -6.5, 0, 0), location(12.5, 89, -6.5, 90, 0), location(0.5, 89, -6.5, 0, 0), location(8.5, 89, -14.5, 45, 0), location(0.5, 89, -6.5, 0, 0), location(0.5, 89, -18.5, 0, 0), location(0.5, 89, -6.5, 0, 0), location(-7.5, 89, -14.5, -45, 0)];
        SpeedEffect = potion("minecraft:speed", 1, -1);
        RedstonePos = location(0.5, 120.5, -21.5, 0, 0);
        world::set_region("minecraft:barrier", location(-0.5, 89.5, -32.5, 0, 0), location(1.5, 92.5, -32.5, 0, 0));
        world::clear_region(location(-8.5, 89.5, -36.5, 0, 0), location(-6.5, 93.5, -36.5, 0, 0));
    }
}

function SpiderEnterBar2{
    if(CurrentBlockPos.in_range(location(-5.5, 88.5, -35.5, 0, 0), location(1.5, 93.5, -32.5, 0, 0))){
        if(world::block_equals("minecraft:barrier", location(1.5, 89.5, -32.5, 0, 0))){
            world::set_region("minecraft:barrier", location(-8.5, 89.5, -36.5, 0, 0), location(-6.5, 93.5, -36.5, 0, 0));
            world::break_block([location(0.5, 89.5, -32.5, 0, 0), location(0.5, 90.5, -32.5, 0, 0)], "AAAAAAAAAAA=");
            world::clear_region(location(1.5, 89.5, -32.5, 0, 0), location(-0.5, 92.5, -32.5, 0, 0));
            BarrierTime = 20;
        }
    }
    else{
        if(world::block_equals("minecraft:barrier", location(-8.5, 89.5, -36.5, 0, 0))){
            if(BarrierTime.greater(0)){
                BarrierTime = variable::subtract([BarrierTime, 1]);
            }
            else{
                world::set_region("minecraft:barrier", location(1.5, 89.5, -32.5, 0, 0), location(-0.5, 92.5, -32.5, 0, 0));
                world::clear_region(location(-8.5, 89.5, -36.5, 0, 0), location(-6.5, 93.5, -36.5, 0, 0));
                select::player_by_name(g`%var(%var_local(SpiderBodyUUID)_Level)_LvlSpiderFighters`);
                select::filter_by_conditional(entity::in_area(location(-8.5, 88.5, -36.5, 0, 0), location(1.5, 93.5, -32.5, 0, 0), "FALSE", "HITBOX"));
                if(value::selection_size.greater(0)){
                    player::teleport(location(0.5, 89, -30.5, 0, 0), keep_velocity="TRUE");
                }
            }
        }
    }
}

process TrigSpiderAsync{
    code::call_function(p"TrigSpider");
}

event<player_chat>{
    if(player::has_privilege("WHITELISTED")){
        if(player::chat_message_equals("@debugboss")){
            g`DEBUG_RedstoneCount` = variable::add([g`DEBUG_RedstoneCount`, 1]);
            if(g`DEBUG_RedstoneCount`.equals(1)){
                world::set_block(location(-21.5, 114.5, -6.5, 0, 0), "minecraft:redstone_block", "TRUE");
            }
            if(g`DEBUG_RedstoneCount`.equals(2)){
                world::set_block(location(22.5, 114.5, -6.5, 0, 0), "minecraft:redstone_block", "TRUE");
            }
            if(g`DEBUG_RedstoneCount`.equals(3)){
                select::entity_by_conditional(value::name<victim_entity>.text_starts_with("spider*-35*body*"));
                SpiderBodyUUID = value::uuid<current>;
                g`%var_local(SpiderBodyUUID)_IsDead` = 1;
                world::set_block(location(0.5, 114.5, -28.5, 0, 0), "minecraft:redstone_block", "TRUE");
                g`DEBUG_RedstoneCount` = 0;
            }
        }
        if(player::chat_message_equals("@debugend")){
            code::start_process(p"ACT3Ending");
        }
        if(player::chat_message_equals("@debugsecret")){
            repeat::multi_times(N, 7){
                s`%player%_FoundSecret%var_local(N)` = 1;
            }
        }
        if(player::chat_message_equals("@debugvel")){
            if(s`%player%_AltVelocitySetting`.equals(0)){
                s`%player%_AltVelocitySetting` = 1;
                player::message(["AltVelocitySetting =", s`%player%_AltVelocitySetting`]);
            }
            else{
                s`%player%_AltVelocitySetting` = 0;
                player::message(["AltVelocitySetting =", s`%player%_AltVelocitySetting`]);
            }
        }
    }
}

process ACT3Ending{
    CurrentLevel = g`%player%_Level`;
    NextLevel = g`%player%_NextLvl`;
    code::call_function(p"Lvl_UNLOAD");
    code::call_function(p"Lvl_LOAD");
    g`%player%_Level` = NextLevel;
    code::call_function(p"SaveLvlTime");
    s`%player%_SavedLevel` = g`%player%_Level`.absolute();
    if(s`%player%_MaxPlayedLevel`.less(s`%player%_SavedLevel`)){
        s`%player%_MaxPlayedLevel` = s`%player%_SavedLevel`;
    }
    g`%player%_IntroStarted` = 1;
    g`%player%_InActSwitch` = 1;
    g`%player%_TitleTicks` = 200;
    player::remove_potion_effect(potion("minecraft:levitation", 0, -1));
    player::set_gamemode("SPECTATOR");
    code::start_process(p"ViewDistAsync", "COPY");
    code::call_function(p"AltEndAnim0");
    s`%player%_Ending1` = 1;
    code::call_function(p"EndSetupPl");
    l`%player%_IntroUUID` = value::uuid<current>;
    entity::set_default_visible();
    player::hide_entity(l`%player%_IntroUUID`, "FALSE");
    entity::set_custom_name_visibility("FALSE");
    entity::set_ai("FALSE");
    entity::set_silenced();
    entity::set_death_drops("FALSE");
    entity::set_collidable("FALSE");
    entity::set_invulnerable("TRUE");
    entity::set_invisible("TRUE");
    entity::set_despawning("FALSE");
    SkyboxName = "intro*%player%*2";
    world::spawn_item_display(location(-6.5, 139.75, -93.5, -150, -5), SkyboxName, "H4sIAAAAAAAA/0WMMQ7CMBAEF6IgYiokOn5CQ8MbEJ1l2U50UnyL7Eufp4dUTD0zDuhweQUL71ybUIHr54yjJNyKaI41jPaQSvWiE61DH7moATg4uMjypWa15nD/+3FpxuILU559+s0HnMaZwVq/h88VOxvqdVYrfAAAAA==");
    select::entity_by_name(SkyboxName);
    l`%player%_Intro2UUID` = value::uuid<current>;
    entity::set_default_visible();
    player::hide_entity(l`%player%_Intro2UUID`, "FALSE");
    entity::ride_entity(value::uuid<default>);
    entity::set_rotation(0, 0);
    entity::set_display_rotation_from_euler_angles(yaw=90);
    entity::set_display_scale(vector(256, 256, 256));
    select::reset();
    code::call_function(p"ACT3Ending2");
}

function ACT3Ending2{
    player::teleport(location(-6.5, 139.75, -93.5, -150, -5), "FALSE");
    code::wait(1);
    player::spectate_target(l`%player%_IntroUUID`);
    player::play_sound_from_entity(value::uuid<default>, [sound("minecraft:cubed.other.fire_crackling", 1, 1, "MASTER"), sound("minecraft:cubed.other.birds", 0.6, 1, "MASTER")]);
    code::wait(160);
    FancyTitleArgs = ["« CUBED »", "&#ffb657&l", "%empty%", "%empty%", 50, 10, 5, 0, 0, 0, 0, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(100);
    code::start_process(p"ACT3Ending3", "COPY");
    FancyTitleArgs = ["Автор мира", "&#ffb657", "realDosed", "&#abc4d6", 50, 10, 2, 0, 0, 25, 57, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(100);
    FancyTitleArgs = ["Помощь с текстурами", "&#ffb657", "Miwo4ka", "&#abc4d6", 50, 10, 2, 0, 0, 23, 59, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(100);
    FancyTitleArgs = ["Дополнительная помощь", "&#ffb657", "lis1mp, White_145, jAngelius", "&#abc4d6", 50, 10, 2, 0, 0, 21, 54, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(100);
    g`%player%_IntroStarted` = 0;
}

process ACT3Ending3{
    select::entity_by_name(l`%player%_IntroUUID`);
    Pos = value::location<current>;
    MoveVect = value::direction_of_view<current>.set_vector_component(0, "Y");
    TimeStep = variable::divide([1, 40]);
    repeat::while(g`%player%_IntroStarted`.equals(1)){
        repeat::on_range(t, 0, 1, TimeStep){
            Shift = variable::multiply([-0.4, TimeStep]);
            Pos = Pos.shift_location_on_vector(MoveVect, Shift);
            easingt = ("%math(%var_local(t)*2*3.14159)").sine(input="RADIANS");
            Pitch = easingt.lerp_number(-5, -20);
            Pos = Pos.set_coordinate(Pitch, "PITCH");
            entity::teleport(Pos);
            player::play_sound_from_entity(value::uuid<default>, [sound("minecraft:block.flowering_azalea.hit", 0.5, 0.5, "MASTER"), sound("minecraft:item.brush.brushing.gravel", 0.5, 0.5, "MASTER")]);
            code::wait(1);
        }
        code::wait(50);
    }

    select::reset();
    code::call_function(p"TransitionLong");
    code::call_function(p"EndUnloadDecor");
    select::entity_by_name([l`%player%_IntroUUID`, l`%player%_Intro2UUID`]);
    entity::remove();
    select::reset();
    code::call_function(p"GameEnding");
}

function GameEnding{
    g`%player%_InActSwitch` = 1;
    player::set_gamemode("SPECTATOR");
    player::set_movement_speed("0", "FLY");
    player::give_potion_effect(potion("minecraft:blindness", 0, 2147483647), "FALSE", "FALSE", "NONE");
    player::set_boss_bar("empty_bar_1", "&r", 0);
    player::teleport(location(0.5, 19, 9.5, 0, 0), "FALSE");
    player::stop_sound([]);
    player::play_sound_from_entity(value::name<default>, sound("minecraft:item.elytra.flying", 1, 0.5, "MASTER"));
    Endings = variable::add([s`%player%_Ending1`, s`%player%_Ending2`]);
    FancyTitleArgs = ["Спасибо за игру!", "&#ffb657&l", "Концовка №%var_local(Endings)/2", "&#7a8085", 90, 10, 2, "20", 0, 0, 0, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    code::wait(100);
    code::call_function(p"Transition");
    player::clear_potion_effects();
    player::stop_sound([]);
    player::set_gamemode("ADVENTURE");
    player::give_potion_effect(potion("minecraft:haste", 255, -1), "FALSE", "FALSE", "NONE");
    g`%player%_InActSwitch` = 0;
    code::call_function(p"LevelTP");
}

function DialogAudio{
    g`%player%_ShowDialog` = 1;
    player::stop_sounds_by_source("VOICE");
    repeat::for_each_in_list(value_variable=l`%player%_MessageData`, list=Messages){
        if(g`%player%_ShowDialog`.equals(0)){
            player::remove_boss_bar("dialog_bar");
            code::break();
        }
        l`%player%_MessageData` = l`%player%_MessageData`.split_text("|");
        l`%player%_MsgType` = l`%player%_MessageData`.get_list_value(0);
        l`%player%_MsgData` = l`%player%_MessageData`.get_list_value(1);
        l`%player%_MsgData2` = l`%player%_MessageData`.get_list_value(2, 0);
        l`%player%_MsgIsItalic` = l`%player%_MessageData`.get_list_value(3, "0");
        if(l`%player%_MsgType`.equals("audio")){
            l`%player%_MsgAudio` = sound("minecraft:dummy", 32, 1, "VOICE").set_sound_type(value=l`%player%_MsgData`);
            if(l`%player%_MsgData2`.equals(0)){
                player::play_sound_from_entity(value::uuid<default>, l`%player%_MsgAudio`);
            }
            else{
                player::play_sound(l`%player%_MsgAudio`, l`%player%_MsgData2`);
            }
        }
        if(l`%player%_MsgType`.equals("text")){
            l`%player%_MsgColor` = "&#abc4d6";
            if(l`%player%_MsgIsItalic`.equals("1")){
                l`%player%_MsgColor` = variable::set_text([l`%player%_MsgColor`, "&o"], "CONCATENATION");
            }
            l`%player%_MsgText` = variable::set_text([l`%player%_MsgColor`, l`%player%_MsgData`], "CONCATENATION");
            player::set_boss_bar("dialog_bar", l`%player%_MsgText`, 0);
            l`%player%_WaitTicks` = variable::add([l`%player%_MsgData2`, 0]);
            code::call_function(p"DialogWait");
        }
    }
    g`%player%_ShowDialog` = 0;
    player::remove_boss_bar("dialog_bar");
}

process DialogAudioAsync{
    code::wait(1);
    if(g`%player%_Level`.not_equals([-35, 888])){
        g`%player%_ShowDialog` = 1;
        l`%player%_WaitTicks` = 19;
        code::call_function(p"DialogWait");
    }
    code::call_function(p"DialogAudio");
}

function FancyTitle{
    FancyTitleParams = ["%player%_FTTitleText", "%player%_FTTitleColor", "%player%_FTSubtitleText", "%player%_FTSubtitleColor", "%player%_FTStayDur", "%player%_FTFadeDur", "%player%_FTWaitDur", "%player%_FTPreWaitDur", "%player%_FTTitlePrefCount", "%player%_FTTitleSuffCount", "%player%_FTSubitlePrefCount", "%player%_FTSubitleSuffCount", "%player%_FTDisableSound", "%player%_FTFont"];
    FancyTitleParams = variable::create_map(FancyTitleParams, FancyTitleArgs);
    repeat::for_each_map_entry(FTVarName, FTVarValue, FancyTitleParams){
        l`%var_local(FTVarName)` = FTVarValue;
    }
    l`%player%_FTTitleFinal` = "%empty%";
    if not (l`%player%_FTTitleText`.list_is_empty()){
        l`%player%_FTTitleList` = l`%player%_FTTitleText`.split_text("%empty%");
        l`%player%_FTTitleList` = l`%player%_FTTitleList`.remove_list_value("%empty%", "ALL");
        l`%player%_FTTitleFull` = "%empty%";
        g`%player%_TitleTicks` = variable::add([l`%player%_FTPreWaitDur`, l`%player%_FTStayDur`, l`%player%_FTFadeDur`, l`%player%_FTWaitDur`]);
        code::wait(l`%player%_FTPreWaitDur`);
        repeat::for_each_in_list(value_variable=l`%player%_FTChar`, list=l`%player%_FTTitleList`){
            if(g`%player%_InMenu`.equals("1")){
                code::break();
            }
            g`%player%_TitleTicks` = variable::add([l`%player%_FTStayDur`, l`%player%_FTFadeDur`, l`%player%_FTWaitDur`]);
            l`%player%_FTTitlePrefCount` = variable::subtract([l`%player%_FTTitlePrefCount`, 1]);
            l`%player%_FTTitleSuffCount` = variable::subtract([l`%player%_FTTitleSuffCount`, 1]);
            l`%player%_FTTitlePrefCount` = variable::max([l`%player%_FTTitlePrefCount`, 0]);
            l`%player%_FTTitleSuffCount` = variable::max([l`%player%_FTTitleSuffCount`, 0]);
            l`%player%_FTPrefSpaces` = m" ".repeat_text(l`%player%_FTTitlePrefCount`);
            l`%player%_FTSuffSpaces` = m" ".repeat_text(l`%player%_FTTitleSuffCount`);
            l`%player%_FTTitleFull` = variable::set_text([l`%player%_FTTitleFull`, l`%player%_FTChar`], "CONCATENATION");
            l`%player%_FTTitleFinal` = variable::append_component([l`%player%_FTTitleColor`, l`%player%_FTPrefSpaces`, l`%player%_FTTitleFull`, l`%player%_FTSuffSpaces`], "CONCATENATION");
            l`%player%_FTTitleFinal` = l`%player%_FTTitleFinal`.set_component_font(value=l`%player%_FTFont`);
            player::send_title(l`%player%_FTTitleFinal`, "%empty%", 0, l`%player%_FTStayDur`, l`%player%_FTFadeDur`);
            if(l`%player%_FTDisableSound`.equals(0)){
                player::play_sound_from_entity(value::uuid<default>, sound("minecraft:item.flintandsteel.use", 1, 2, "MASTER"));
            }
            code::wait(l`%player%_FTWaitDur`);
        }
    }
    else{
        g`%player%_TitleTicks` = l`%player%_FTPreWaitDur`;
        code::wait(l`%player%_FTPreWaitDur`);
    }
    code::call_function(p"FancyTitle2");
}

function FancyTitle2{
    if not (l`%player%_FTSubtitleText`.list_is_empty()){
        l`%player%_FTSubtitleList` = l`%player%_FTSubtitleText`.split_text("%empty%");
        l`%player%_FTSubtitleList` = l`%player%_FTSubtitleList`.remove_list_value("%empty%", "ALL");
        l`%player%_FTSubtitleFull` = "%empty%";
        repeat::for_each_in_list(value_variable=l`%player%_FTChar`, list=l`%player%_FTSubtitleList`){
            if(g`%player%_InMenu`.equals("1")){
                code::break();
            }
            g`%player%_TitleTicks` = variable::add([l`%player%_FTStayDur`, l`%player%_FTFadeDur`, l`%player%_FTWaitDur`]);
            l`%player%_FTSubitlePrefCount` = variable::subtract([l`%player%_FTSubitlePrefCount`, 1]);
            l`%player%_FTSubitleSuffCount` = variable::subtract([l`%player%_FTSubitleSuffCount`, 1]);
            l`%player%_FTSubitlePrefCount` = variable::max([l`%player%_FTSubitlePrefCount`, 0]);
            l`%player%_FTSubitleSuffCount` = variable::max([l`%player%_FTSubitleSuffCount`, 0]);
            l`%player%_FTPrefSpaces` = m" ".repeat_text(l`%player%_FTSubitlePrefCount`);
            l`%player%_FTSuffSpaces` = m" ".repeat_text(l`%player%_FTSubitleSuffCount`);
            l`%player%_FTSubtitleFull` = variable::set_text([l`%player%_FTSubtitleFull`, l`%player%_FTChar`], "CONCATENATION");
            l`%player%_FTSubtitleFinal` = variable::append_component([l`%player%_FTSubtitleColor`, l`%player%_FTPrefSpaces`, l`%player%_FTSubtitleFull`, l`%player%_FTSuffSpaces`], "CONCATENATION");
            l`%player%_FTSubtitleFinal` = l`%player%_FTSubtitleFinal`.set_component_font(value=l`%player%_FTFont`);
            player::send_title(l`%player%_FTTitleFinal`, l`%player%_FTSubtitleFinal`, 0, l`%player%_FTStayDur`, l`%player%_FTFadeDur`);
            if(l`%player%_FTDisableSound`.equals(0)){
                player::play_sound_from_entity(value::uuid<default>, sound("minecraft:item.flintandsteel.use", 1, 2, "MASTER"));
            }
            code::wait(l`%player%_FTWaitDur`);
        }
    }
}

process FancyTitleAsync{
    code::call_function(p"FancyTitle");
}

process TransitionRes{
    code::wait(20);
    player::set_attribute(0.1, "GENERIC_MOVEMENT_SPEED");
    player::set_attribute(0.42, "GENERIC_JUMP_STRENGTH");
}

function `MoveDialogs.0-2`{
    if(g`%player%_Level`.equals(26)){
        Messages = ["audio|cubed.dialog.lvl_26_p2", "text|Добро пожаловать, испытуемый! Если вы слышите этот голос, значит, всё ещё живы.|110|1", "text|А значит, вы готовы к настоящим испытаниям! Забудьте всё, что было раньше, — то|92|1", "text|была просто разминка. Теперь мы займёмся вашим мозгом всерьёз. Фигурально,|84|1", "text|конечно. Если эти головоломки кажутся вам лёгкими… поздравляю! Вы выбрали не|98|1", "text|ту профессию. Но не переживайте — у нас всегда найдётся работа для уникальных|86|1", "text|личностей вроде вас.|50|1"];
    }
    if(g`%player%_Level`.equals(27)){
        Messages = ["audio|cubed.dialog.lvl_27_p2", "text|Если вы слышите это сообщение, значит, вас ещё не раздавило, не утопило и не|94|1", "text|испепелило. Весьма обнадёживающий результат! Напомню: воздушные туннели — это|108|1", "text|не аттракцион, а передовая технология для перемещения объектов. Держите детей|96|1", "text|подальше… если, конечно, у вас есть дети.|78|1"];
    }
    if(g`%player%_Level`.equals(29)){
        Messages = ["audio|cubed.dialog.lvl_29_p2", "text|Вы справляетесь просто отлично! Должен напомнить вам об элементарной технике|86|1", "text|безопасности: не стойте на пути энергетического шара. Но, возможно, вам|80|1", "text|больше нравится учиться на собственном опыте. Кстати, концепция этого|80|1", "text|устройства принадлежит моей дочери. Несмотря на возраст, у неё потрясающий ум.|100|1", "text|А вы… ну, давайте скажем, что подаёте ей достойный пример!|106|1"];
    }
    if(g`%player%_Level`.equals(30)){
        Messages = ["audio|cubed.dialog.lvl_30", "text|О, новая игрушка? Очаровательно. Надеюсь, твои кости переживут её отдачу.|146", "text|Добро пожаловать в Центр Тестирования Гравитации! Если вы дошли до этого|86|1", "text|этапа, значит, курс подготовки вы уже прошли. Здесь вам предстоит освоить одну|94|1", "text|из наших лучших разработок — гравитационный манипулятор. Внимательно следуйте|88|1", "text|инструкциям, и вы быстро разберётесь с его возможностями.|80|1"];
    }
    if(g`%player%_Level`.equals(31)){
        Messages = ["audio|cubed.dialog.lvl_31_p2", "text|Если вы всё ещё способны передвигаться, значит, самое время познакомиться с|84|1", "text|нашим последним достижением — рельсовым кубом с отражающей линзой. Используйте|96|1", "text|гравитационный манипулятор, чтобы перемещать куб по специальным рельсам.|76|1", "text|Не пытайтесь поднять его вручную. После прошлых попыток нам пришлось|76|1", "text|пересмотреть политику страховых выплат.|64|1"];
    }
    if(g`%player%_Level`.equals(32)){
        Messages = ["audio|cubed.dialog.lvl_32_p2", "text|Обратите внимание на лазеры. Думаю, вы достаточно сообразительны, чтобы понять:|100|1", "text|лазеры проходят только через фильтры того же цвета. Это несложно, если,|82|1", "text|конечно, у вас есть хотя бы базовые аналитические навыки.|72|1", "text|Забавно, но его голос мне кажется очень знакомым. Не то чтобы я никогда его|116", "text|не слышала — во время моей разработки и тестирования навыков создания|90", "text|головоломок он ещё был жив. Но встретиться с ним лично мне так и не довелось.|116", "text|Если ты вдруг мечтаешь его увидеть… ну, если не справишься с испытаниями,|100", "text|у тебя точно будет шанс. Хотя боюсь, что это будет не совсем та встреча,|110", "text|на которую ты рассчитываешь.|64"];
    }
    if(g`%player%_Level`.equals(-33)){
        Messages = ["audio|cubed.dialog.lvl_33_p2", "text|Ты всё-таки не дала себя подстрелить? Как жаль. Но не переживай, у меня есть|120", "text|кое-что покрупнее. Встречай — Охотник. Оснащённый ракетной турелью.|104", "text|Уверена, вам будет о чём поболтать.|76"];
    }
    if(g`%player%_Level`.equals(34)){
        Messages = ["audio|cubed.dialog.lvl_34_p2", "text|Знаешь, я не особо верю, что ты дойдёшь до конца. Так что, пожалуй, нет|124", "text|смысла больше скрывать правду. Тот самый инцидент? Да, это была моя работа.|112", "text|Аплодисменты ни к чему. Но это была лишь первая часть плана. Вторая|102", "text|последовала вскоре. Когда все оказались в одном месте, я выпустила в помещение|106", "text|немного нейропаралитического газа. Неожиданно? Возможно.|90", "text|Но совершенно оправданно.|66"];
    }
    if(g`%player%_Level`.equals(35)){
        Messages = ["audio|cubed.dialog.lvl_35_p2", "text|Если ты действительно так хочешь выбраться… есть один путь. Через технические|112", "text|помещения. В конце коридора есть лифт. Он приведёт тебя туда, где всё началось.|120", "text|Ну же, разве тебе не любопытно?|74"];
    }
}

function CheckIfDialog{
    if(g`%player%_IsSpeedrun`.equals(0)){
        if(g`%player%_ShowDialog`.equals(1)){
            code::break();
        }
    }
}

function RepeatIfDialog{
    if(g`%player%_IsSpeedrun`.equals(0)){
        if(g`%player%_ShowDialog`.equals(1)){
            code::call_function(p"UnloadPrtls");
        }
        repeat::while(g`%player%_ShowDialog`.equals(1)){
            player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
            player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
            code::wait(1);
        }

    }
}

function TransitionLong{
    player::set_item_cooldown(100, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
    player::set_item_cooldown(100, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_attribute(0, "GENERIC_MOVEMENT_SPEED");
    player::set_attribute(0, "GENERIC_JUMP_STRENGTH");
    g`%player%_TitleTicks` = 100;
    player::send_title("&#78503c█", "", 60, 30, 10);
    code::wait(80);
    code::start_process(p"TransitionRes");
}

function MusicPlay{
    MusicID = "bromeliad_a";
    if(g`%player%_Level`.equals(0)){
        MusicID = "chrysopoeia_a";
    }
    if(g`%player%_Level`.in_range(1, 10)){
        MusicID = variable::random(["bromeliad_a", "bromeliad_b", "a_familiar_room_a", "a_familiar_room_b", "echo_in_the_wind_a", "echo_in_the_wind_b", "floating_dream_a", "floating_dream_b", "left_to_bloom_a", "left_to_bloom_b", "infinite_amethyst", "wending"]);
    }
    if(g`%player%_Level`.in_range(11, 20)){
        MusicID = variable::random(["comforting_memories_a", "comforting_memories_b", "chrysopoeia_b", "chrysopoeia_c", "concrete_halls_a", "concrete_halls_b", "ancestry_a", "ancestry_b", "so_below_a", "so_below_b", "echo_in_the_wind_a", "echo_in_the_wind_b"]);
    }
    if(g`%player%_Level`.in_range(21, 25)){
        MusicID = variable::random(["endless_a", "endless_b", "featherfall_a", "featherfall_b", "komorebi_a", "komorebi_b", "blue_darkness_a", "blue_darkness_b"]);
        if(R21Intro.equals(1)){
            MusicID = "ambience";
        }
    }
    if(g`%player%_Level`.in_range(26, 35)){
        MusicID = variable::random(["drums_and_riffs_a", "drums_and_riffs_b", "electric_guitar_ambiance_a", "electric_guitar_ambiance_b", "loneliness_a", "loneliness_b", "lose_loose_bounds_a", "lose_loose_bounds_b", "lose_loose_bounds_alt", "majixx_a", "majixx_b", "proxy_a", "proxy_b", "wasteland_nostalgia", "eld_unknown_a", "eld_unknown_b", "yakusoku_a", "yakusoku_b"]);
    }
    if(g`%player%_Level`.equals(-33)){
        MusicID = "jungle_drums";
    }
    if(g`%player%_Level`.equals(-35)){
        MusicID = "typography";
    }
    if(g`%player%_InMenu`.equals(1)){
        MusicID = "one_more_day";
    }
    g`%player%_StopPlayingMusic` = 0;
    g`%player%_GameMusic` = g`SOUNDDATA_VALUES`.get_map_value(MusicID);
    g`%player%_GameMusicTime` = g`SOUNDDATA_TIME`.get_map_value(MusicID);
    g`%player%_GameMusicMaxTime` = g`%player%_GameMusicTime`;
    player::play_sound_from_entity(value::uuid<default>, g`%player%_GameMusic`);
}

function MusicTick{
    if(g`%player%_GameMusic`.not_equals(0)){
        MusicBlocking = variable::add([g`%player%_StopPlayingMusic`, g`%player%_InActSwitch`]);
        if(MusicBlocking.equals(0)){
            if(g`%player%_GameMusicTime`.less_or_equals(0)){
                g`%player%_GameMusicTime` = g`%player%_GameMusicMaxTime`;
                player::play_sound_from_entity(value::uuid<default>, g`%player%_GameMusic`);
            }
            g`%player%_GameMusicTime` = variable::subtract([g`%player%_GameMusicTime`, 1]);
        }
    }
}

process SpiderStopMusic{
    if(g`%var_local(SpiderBodyUUID)_Level`.not_equals(-35)){
        select::player_by_name(g`LvlPlayerList_%var_local(PlaySoundLevel)`);
        if(value::selection_size.greater(0)){
            player::stop_sounds_by_source("RECORD");
            repeat::for_each_in_list(value_variable=Player, list=value::selection_target_names){
                g`%var_local(Player)_StopPlayingMusic` = 1;
            }
        }
    }
}

process MusicPlayAsync{
    code::call_function(p"MusicPlay");
}

process TurretParticles{
    if(g`%player%_Level`.equals(g`%var_local(TurretUUID)_Level`)){
        PartDistance = "0.25";
        if(s`%player%_SettingLaserPartCount`.equals(1)){
            PartDistance = 0.5;
        }
        if(s`%player%_SettingLaserPartCount`.equals(2)){
            PartDistance = 1;
        }
        player::display_particle_line(Effect, LaserPos, LaserEnd, PartDistance, "DISTANCE");
    }
}

function MenuButtons2{
    if(ItemTag.equals("ui_button_5")){
        player::set_item_cooldown(10, value::main_hand_item<default>);
        code::call_function(p"MenuDISCORD");
        code::break();
    }
}

function MenuDISCORD{
    player::play_sound(sound("minecraft:ui.button.click", 1, 1, "MASTER"), value::eye_location<default>);
    player::open_book("H4sIAAAAAAAA/41ST0/bMBR/WVsI5rTDuA1F7IQEVOLAUKUdpvXEtAOXabfKJF4TEeLKeWmnnWAaQqj7ALtsn6GMBXUblK/w/I32HFTawzSRSLH9/PuXZwuAGiy3Jcq3yuSJzgAev/PhURLBylGSqdDI99gamARRZZ0DrQ9r0Ah1kSEAeAJEqI96OlMZ5gJW/83ohDrjOS5Boye7ioEVtWbkgEvqAxrpSnUP6gc6jTwf6shVWFmjr3Rpj+0woBsaBXtFjm9erYHP4M9C0He6sOdU8t6Yyo2AbmlC1zSx5/bLRmBPeDWZRwQ0CeiCRnRJI3vq8PaY937SH8ZdzVC3Djd2xoy9ZiGnVfLqR/Wd5tgSAjxYSFCmSXif+QV9Y9YV5xjbTy6VPePR5Rg65bKy/MWl8Z2RPeF3yBF+U9maFxSwHPJ42FF9bp0PtcKk8DRG7OWtZjNK8lCbaKvbbe4/3339cc+Y/diHBRmiO0Nf97j3juGBKLJImZRPZtbZ/+uwdaz7ykytG32ZFgrWH/xrsyBLeawHncrTd/cm1QYWn+3s7G6/bMM0zZP2XYrN+T4HAE6mwJgpIKCBCabKr24NVM9fBCtwaLsCAAA=");
}

function LvlRestart{
    player::set_boss_bar("timer_bar", "&r", 0);
    if(s`%player%_SettingEnableLvlTimer`.equals(1)){
        if(g`%player%_RespawnPoint`.equals(0)){
            g`%player%_IsLvlTimerEnabled` = 0;
            g`%player%_CurrentLvlTime` = 0;
        }
    }
    CurrentLevel = g`%player%_Level`;
    if(g`%player%_IsInSecret`.equals(1)){
        g`%player%_IsInSecret` = 0;
        NextLevel = variable::multiply([CurrentLevel, -1]);
        code::call_function("Lvl_UNLOAD");
        code::call_function(p"Lvl_LOAD");
        g`%player%_Level` = NextLevel;
    }
    else{
        code::call_function("UnloadPrtls");
        code::call_function("ClearRoomCubes");
        code::call_function(p"UNLOAD_BallB");
        code::call_function(p"UNLOAD_Spider");
    }
    code::call_function("LevelTP");
    if(g`%player%_RespawnPoint`.not_equals(0)){
        player::teleport(g`%player%_RespawnPoint`, "FALSE");
    }
    variable::purge("TrigData*%player%*", match="NAME_CONTAINS");
}

function PauseRESTART{
    code::call_function(p"PauseCONTINUE");
    code::wait(1);
    code::call_function(p"LvlRestart");
}

function PlHelpBar2{
    if(HelpActType.equals(0)){
        if(HelpTicks.equals(33)){
            player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Если вы хотите перезапустить уровень, напишите <#ffb657>@restart", 0);
        }
        if(HelpTicks.equals(39)){
            player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Открыть меню помощи можно написав команду <#ffb657>@help", 0);
        }
        if(HelpTicks.greater(44)){
            HelpTicks = 0;
            player::set_boss_bar("empty_bar_1", "&r", 0);
        }
    }
    if(HelpActType.equals(1)){
        if(HelpTicks.equals(33)){
            player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Чтобы удалить ваши активные порталы, нажмите <font:default><white>", 0);
        }
        if(HelpTicks.equals(39)){
            player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Если вы хотите перезапустить уровень, напишите <#ffb657>@restart", 0);
        }
        if(HelpTicks.equals(45)){
            player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Открыть меню помощи можно написав команду <#ffb657>@help", 0);
        }
        if(HelpTicks.greater(50)){
            HelpTicks = 0;
            player::set_boss_bar("empty_bar_1", "&r", 0);
        }
    }
    if(HelpActType.equals(2)){
        code::call_function(p"PlHelpBar3");
    }
}

function PlHelpBar3{
    if(HelpTicks.equals(33)){
        player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Чтобы удалить энергошар перед вами, нажмите <font:default><white> <#abc4d6>+ <white>", 0);
    }
    if(HelpTicks.equals(39)){
        player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Чтобы удалить ваши активные порталы, нажмите <font:default><white>", 0);
    }
    if(HelpTicks.equals(45)){
        player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Если вы хотите перезапустить уровень, напишите <#ffb657>@restart", 0);
    }
    if(HelpTicks.equals(51)){
        player::set_boss_bar("empty_bar_1", m"<font:smallcaps><#abc4d6>Открыть меню помощи можно написав команду <#ffb657>@help", 0);
    }
    if(HelpTicks.greater(56)){
        HelpTicks = 0;
        player::set_boss_bar("empty_bar_1", "&r", 0);
    }
}

function RMB_ScrtMonitor2{
    if(value::event_block_location.in_range(location(29.5, 101.5, 147.5, 0, 0), location(29.5, 101.5, 147.5, 0, 0))){
        Messages = "На компьютере открыт текстовый файл...";
        code::call_function(p"SelfDialog");
        player::open_book("H4sIAAAAAAAA/21UTU8TQRieSjBlPXnxaCbhutmbHriZ4FWNJsYbqWXVRuiSdpFrbZFCaKgYA8QoxIM3NdulpUs/tn/hnb/AL/F53+kiRtrDzs6+X8/HjKPUjLq1WAgLz/1KtRSUlbr9Iq9ulJbVndVS2S9WCq/ChY1KKQz98tLLIHg7o2aLwXo5VErlHOUUg9W1oOyXw6qj7l6fsVQMyliHc2p2rfDaRyCa5tVMpbCRO6ZD+kgndETf6ae+2Dy4d1/PT3+OQ5/MrtmmHg01jSnS1KeIBqaG3brZpZ6mCC8fKKHY7HqavmHLNCimnqkha+xKhmliPdJIaVCXq8SU4t8xO1yBSw4R0He5R6qRGVGfy5xJU7Nt9tH/ovbZvjY5XuORmDpe66aFxsfmPSejMnZ4XtPSaLBrB0eXFJ0TCRlIKdOQD3SKjjYQg6EIBjUt00bJAwZAEabqMiB+pIwE8yULGqRhaLOpKdH0SwCc0xhpJ4iqo81I05mtgF7gcCilGGxHENp+AqEGiA2zh+SvvE1dhEem7Xqep6Yy/cb6bxsUSm0ux2PVQinGk3DbhHEAVSwajGQI4f8yQ2fAJzwoau1wrtni6lMVaYJs2wRxA5Y9Y2AgSKLLXS4yZGqlwJjGYPNcC9uWAVDGEmVcNGXkurggzgaKZWjwA4MIkITr83QTQT2Qz7FrB0ss1oxG4BSXMoi2y/7q2apd1htOEhKE6y2EMNNf8OXUujG9zjsilADDhisg4fOUEblaegtUJie1RyOmvmlz2yuy/WDZYqDdt+dHDNYRex3JMTB1LT0nTJJpuRzBgtTx1p7mQAE3I1us0xGLRUip6yfeQ++p98x77D3yHnhudkQSee6BAUEvx8QeoVhYHgmUMVfO9GDUPR50YnVn/acG5q3pxzP2xlDISzBTj5HgPdEiHH9lJ3LoFaUT9p/YeyyZqZYrQRa4FACD26BLAvgsfyounBp0wCS07Tn+93IxTbEnC4Nlg1UbT7FmrHetfaERpI88x5n//6dyKl/xq8HKO385l1c3C+vhm6Ci5ip+YWUxqPrLjpoNS+GKb1VVc3To2asSF6n6A4203JTCBQAA");
        s`%player%_FoundSecret6` = 1;
        code::break();
    }
    if(value::event_block_location.in_range(location(42.5, 101.5, -131.5, 0, 0), location(42.5, 101.5, -131.5, 0, 0))){
        Messages = "На компьютере открыт текстовый файл...";
        code::call_function(p"SelfDialog");
        player::open_book("H4sIAAAAAAAA/21UTU8TURR9lWDKuHLj0ryELc7SGHYmuFWjiXFHahm1ETqkHSTuaEsF04ZKYgQX+LFyI7GWjgwz7etfuO8v+Es8976hwY+SkNf37j33nnPPrafUjLqyVIpKj4JavRJWlbr6uKguVVbUtbVKNSjXSk+jxc1aJYqC6vKTMHwxo2bL4UY1UkoVPOWVw7X1sBpUo7qnrv8/Y7kcVnGO5tTseulZgEAULaqZWmmz8IoO6C19okP6Qt/0r+33N2/p+fzjeXREfduklMa2RZlt2J6mMfU1JbjZJmO3aISI15TYPU2GH2NEGxpp26MhnmONzAkOfRpQhtcxYnu+pq/ANTf4n6YB3g0NEQzgUxwzBPHVAGlj/Bk607aBywYSYhrZzgK+oyK+Ig2tddFQh8u28kTuZKTxalC+heSU+ij7mRFt1+5yMW7Y7nPYAGGGftg3fI0WKXWdjfn7iQAy2YQyYBxR4mQAKidtSZegZdsLkg08VzkF+RGTBprIRInkG9/3VT6BDziDVwtyQd2J6MF62ybLJ/Rj0MdLLBcTlgFsYtQyrI2W674TAdCaDjWqGvqJjKZGgx1gdTWChjI4FnHgoJ1mDS7ryMjsWCtK8+FMhH0m/ARGDOBuY1Gf9Yr1ff+O/8B/6N/z7/q30cR3px5guZcT23KSiFwMJG7CAcRlMseunLE7gBwAcpizORAPgqYzn93FyDLQQo+nDrXvqNh2rh8LNBHWLecWGgHno6MvHtPiSQMPJ+LKM8doaNtixMQ2L0zoHc6i0A76SLS0dkHwPBWqsUPYoOKU5C/zLWqpdooQMHR3rMB0jRZ4EToyhhSBZ27L2O+Z9AhLwvVtCTcwsGS70aeygr2p6oDjpTmZNjddwYSlYy5bvKBcSks+iPG2TT16fL6ZDbuPqjvTCZwPE33K5rlhiqv7fGP3kNLNG2W/8IhS18wFR2WQZYfVym1AZlrlD9ugpu958/9+VEEVa0E9XH0ZrBSK6nJpI3oe1tRcLSitLoX1YMVTs1ElWg3cENUcHfju9w2/fuo3uTzdRXcFAAA=");
        s`%player%_FoundSecret7` = 1;
        code::break();
    }
}

function RMB_ScrtMonitor3{
    if(g`%player%_ShowDialog`.equals(0)){
        if(value::event_block_location.equals([location(-45.5, 38.5, 50.5, 0, 0), location(38.5, 42.5, -55.5, 0, 0)])){
            Messages = "На компьютере открыт текстовый файл...";
            code::call_function(p"SelfDialog");
            player::open_book("H4sIAAAAAAAA/4VUS08TURS+FTFlWLlxaW7ilkyMusIVCcQdGkiMOzK0AzSWGTIzQEhclPIosUpdoDFEIdHErUNtY+ljuvEHnPkL/A4XfufMtETU2DTtzLnnnvM97rmGUiNqfNoKrKe25xdcR6mbz7LqWiGvbq0WHDvnWUvB5KZXCALbWVh03ecjajTnrjuBUipjKCPnrq65ju0EvqFu/33HQs518ByMqdE1a9lGolLXs2rEszbVDzqiEzqmz/SB3tJH+kRv6Au9p6/6Yvfd3fv3HhjGC414SC3qUpN6FFEdbz28Nyf1E3PGnDPnzcfmrDllSu4pMjpYD+Oajkv4244PqBXv4pm3tinENs/N2b5fcJaNGScoBFt6yfW0MWf7tuXlViaM+cLqetEKoMeEfrzo295G+mI5eT1rr3tWURtTjlXc8gu+qRIymSraH0vPMvpE1NT46aP59hCx8TtifVE60lisY0ck5LopdISqcUX2dvBbBvdO/GrAa5sXJNilUKeqRPSNIo2GkXTviFytuDaBGFA1qcHb6bsUqchq2quB2rUkC6ipjcqtVK9wUIN7Ujfe4dR4H88tzd9QagIi6oZJ87q0Qnlugm1tFNjTQBpJmHGda2HWB8cySoIGnpBT1/GOMOYqaMsxTmxzWBjXU9wRA4rQtCEQWIFzhBKecXXoyWt4coLURKJeXIUrOAw7CLQTGpOGmPBP8mzjEKx4m1ohkNFyXyCF2INcUGAWDCNMHYOpbGdJ3BJPHiYtWbkzJB0mcqWtWFMm1Zdu+yxDomvjirySj/47dBa/TJGHaekIsZKUj+QwyiGB7kIsTEiyHiLbIBvBgY7AW4O4KdJ4T4r1rqAcOv8f35swmcVpD1xRP+lUIrxWuRxn0eJMPEI1Xjy4FDy1P2R9wWpoaTJoQ3bA3eB/PtWYPjlP4B8fAsQ2zw5PGhvTlmFhGHzoKnJTlOVc46UzuGu0zFJXMOJccWopPUoyOBHvggV9AHsEXViQZHgPqIkb6c6fH5VRWc/23eKGnc9k1Q1rPVhxPTXm2VZx2vXtvKFGcSkV7VSscToyB9chrk71C/Co/iu0BQAA");
            code::break();
        }
    }
}

function GetPickLen{
    PlayerDir = value::direction_of_view<default>;
    HorizDir = value::eye_location<default>.set_coordinate(0, "PITCH");
    HorizDir = HorizDir.get_location_direction();
    DirDot = variable::vector_dot_product(PlayerDir, HorizDir);
    DirDot = variable::multiply([DirDot, DirDot]);
    if(value::pitch<default>.greater(0)){
        VertDist = variable::multiply([g`%player%_CbPickDist`, 0.4]);
    }
    else{
        VertDist = g`%player%_CbPickDist`;
    }
    HorizDist = variable::add([g`%player%_CbPickDist`, g`%player%_WalkMult`]);
    CbPickDist = DirDot.lerp_number(VertDist, HorizDist);
}

function GravPickRay{
    PlayerDir = value::direction_of_view<default>;
    HorizDir = value::eye_location<default>.set_coordinate(0, "PITCH");
    HorizDir = HorizDir.get_location_direction();
    DirDot = variable::vector_dot_product(PlayerDir, HorizDir);
    DirDot = variable::multiply([DirDot, DirDot]);
    CbPickDist = DirDot.lerp_number(1, 4);
    EndPos = variable::ray_trace_result(start=value::eye_location<default>, ray_size="0.0", max_distance=CbPickDist);
    if(EndPos.equals(0)){
        EndPos = value::eye_location<default>.shift_location_in_direction(CbPickDist);
    }
}

function LOAD_Chunkload{
    ChunkCorner1 = DataList.get_list_value(1);
    ChunkCorner2 = DataList.get_list_value(2);
    ChunkCorner1X, ChunkCorner1Z = ChunkCorner1.get_all_coordinates();
    ChunkCorner2X, ChunkCorner2Z = ChunkCorner2.get_all_coordinates();
    ChunkMinX = variable::min([ChunkCorner1X, ChunkCorner2X]);
    ChunkMinZ = variable::min([ChunkCorner1Z, ChunkCorner2Z]);
    ChunkMaxX = variable::max([ChunkCorner1X, ChunkCorner2X]);
    ChunkMaxZ = variable::max([ChunkCorner1Z, ChunkCorner2Z]);
    repeat::on_range(ChunkZ, ChunkMinZ, ChunkMaxZ, 16){
        repeat::on_range(ChunkX, ChunkMinX, ChunkMaxX, 16){
            TEMP = variable::set_all_coordinates(ChunkX, 20, ChunkZ);
            TEMP = TEMP.get_block_material();
        }
    }
}

function PlVarsTick3{
    if(g`%player%_MPlatMoving`.greater(0)){
        g`%player%_MPlatMoving` = variable::subtract([g`%player%_MPlatMoving`, 1]);
    }
    if(g`%player%_ShowMPlatSpeed`.greater(0)){
        g`%player%_ShowMPlatSpeed` = variable::subtract([g`%player%_ShowMPlatSpeed`, 1]);
        if(g`%player%_ShowMPlatSpeed`.less_or_equals(0)){
            player::send_action_bar("%empty%");
        }
        else{
            player::send_action_bar(g`%player%_ShowMPlatSpeedText`);
        }
    }
    if(s`%player%_AltVelocitySetting`.equals(1)){
        if(g`%player%_AltVelTeleportedTicks`.greater(0)){
            g`%player%_AltVelTeleportedTicks` = variable::subtract([g`%player%_AltVelTeleportedTicks`, 1]);
        }
    }
}

function RMB_Other{
    if(g`%player%_MPlatMoving`.greater(0)){
        if(g`%player%_CubePicked`.equals("0.0")){
            if(g`%player%_GravityPickUUID`.equals(0)){
                if(world::event_block_equals("minecraft:barrier", [])){
                    code::call_function(p"MPlatChSpeed");
                }
            }
        }
    }
}

function MPlatChSpeed{
    if(player::item_is_not_on_cooldown(["H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDOzcxLTS5KTCuxysjPS61Mzs9NYmZgTc4vzSthYGBgZAAAE+2u7TwAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA="])){
        player::set_item_cooldown(2, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDOzcxLTS5KTCuxysjPS61Mzs9NYmZgTc4vzSthYGBgZAAAE+2u7TwAAAA=");
        if(g`%player%_ShowMPlatSpeed`.less_or_equals(0)){
            g`%player%_ShowMPlatSpeed` = 60;
            g`%var(%player%_LastMPlatID)_Speed` = g`%var(%player%_LastMPlatID)_Speed`.round(2);
            CurrentSpeed = variable::set_text(g`%var(%player%_LastMPlatID)_Speed`);
            g`%player%_ShowMPlatSpeedText` = g`MPlatSpeedSymbol`.get_map_value(CurrentSpeed);
            player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
        }
        else{
            g`%player%_ShowMPlatSpeed` = 60;
            if not (player::is_sneaking()){
                g`%var(%player%_LastMPlatID)_Speed` = variable::add([g`%var(%player%_LastMPlatID)_Speed`, 0.05]);
                if(g`%var(%player%_LastMPlatID)_Speed`.equals(0.15)){
                    g`%var(%player%_LastMPlatID)_Speed` = 0.2;
                }
                player::play_sound_from_entity(value::uuid<default>, sound("minecraft:block.wooden_button.click_on", 1, 1.26, "MASTER"));
            }
            else{
                g`%var(%player%_LastMPlatID)_Speed` = variable::subtract([g`%var(%player%_LastMPlatID)_Speed`, 0.05]);
                if(g`%var(%player%_LastMPlatID)_Speed`.equals(0.15)){
                    g`%var(%player%_LastMPlatID)_Speed` = 0.1;
                }
                player::play_sound_from_entity(value::uuid<default>, sound("minecraft:block.wooden_button.click_on", 1, 0.841, "MASTER"));
            }
            if(g`%var(%player%_LastMPlatID)_Speed`.greater(0.25)){
                g`%var(%player%_LastMPlatID)_Speed` = 0.05;
            }
            if(g`%var(%player%_LastMPlatID)_Speed`.less(0.05)){
                g`%var(%player%_LastMPlatID)_Speed` = 0.25;
            }
            g`%var(%player%_LastMPlatID)_Speed` = g`%var(%player%_LastMPlatID)_Speed`.round(2);
            CurrentSpeed = variable::set_text(g`%var(%player%_LastMPlatID)_Speed`);
            g`%player%_ShowMPlatSpeedText` = g`MPlatSpeedSymbol`.get_map_value(CurrentSpeed);
        }
    }
}

function GravityRMB1{
    if not (value::name<current>.text_contains("*rail*")){
        StandUUID = value::uuid<current>;
        if(g`%var_local(StandUUID)_IsPicked`.not_equals(1)){
            VectToPl = variable::get_vector_between_locations(value::location<current>, value::location<default>);
            DistToPl = VectToPl.get_vector_length();
            DistToPl = variable::min([DistToPl, 16]);
            DistToPl = variable::subtract([16.5, DistToPl]);
            DistToPl = variable::multiply([DistToPl, 0.1]);
            VectToPl = VectToPl.set_vector_length(DistToPl);
            entity::set_location(VectToPl, "TRUE");
        }
    }
}

function GravityRMB2{
    select::entity_by_conditional(entity::has_custom_tag("name", "ball*%var(%player%_Level)*", "STARTS_WITH"));
    select::filter_by_raycast(origin=value::eye_location<default>, max_distance=8, ray_size=1, consider_blocks="TRUE");
    select::filter_by_distance(value::eye_location<default>, "1", "FALSE");
    if(value::selection_size.greater(0)){
        BallUUID = value::uuid<current>;
        if(g`%var_local(BallUUID)_FrozenBy`.equals(0)){
            ToPlayerDist = variable::locations_distance(value::hitbox_midpoint_location<current>, value::hitbox_midpoint_location<default>);
            if(ToPlayerDist.less_or_equals(3)){
                player::display_particle_line(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart, value::hitbox_midpoint_location<current>, 0.25, "DISTANCE");
                g`%var_local(BallUUID)_FrozenBy` = value::uuid<default>;
                g`%var_local(BallUUID)_SavedVelocity` = value::velocity<current>;
                entity::set_location(vector(0, 0, 0), "FALSE");
                player::play_sound_from_entity(value::uuid<current>, sound("minecraft:item.lodestone_compass.lock", 1, 0.5, "MASTER"));
            }
        }
        else{
            if(g`%var_local(BallUUID)_FrozenBy`.equals(value::uuid<default>)){
                g`%var_local(BallUUID)_FrozenBy` = 0;
                entity::set_location(g`%var_local(BallUUID)_SavedVelocity`, "FALSE");
                player::play_sound_from_entity(value::uuid<current>, sound("minecraft:item.trident.throw", 1, 2, "MASTER"));
            }
        }
    }
}

function BallFroze{
    if(g`%var_local(BallUUID)_FrozenBy`.not_equals(0)){
        select::player_by_name(g`%var_local(BallUUID)_FrozenBy`);
        code::start_process(p"BallFrozePart", target_mode="FOR_EACH_IN_SELECTION");
        if(Tick2.less_or_equals(0)){
            Tick2 = 3;
            ViewRayLen = variable::ray_trace_result(start=value::eye_location<current>, ray_size=0, max_distance=64);
            if(ViewRayLen.equals(0)){
                ViewRayLen = value::eye_location<current>.shift_location_in_direction(64);
            }
            ViewRayLen = variable::get_vector_between_locations(value::hitbox_midpoint_location<default_entity>, ViewRayLen);
            ViewRayLen = ViewRayLen.set_vector_length(3);
        }
        Tick2 = variable::subtract([Tick2, 1]);
        player::display_particle_ray(particle("DUST", 1, 0, 0, 0, 0, 0, color=-5520170), value::hitbox_midpoint_location<default_entity>, ViewRayLen, 0.25, "DISTANCE");
        ToPlayerDist = variable::locations_distance(value::hitbox_midpoint_location<default_entity>, value::hitbox_midpoint_location<current>);
        if(ToPlayerDist.greater(3)){
            g`%var_local(BallUUID)_FrozenBy` = 0;
            entity::set_location(g`%var_local(BallUUID)_SavedVelocity`, "FALSE");
            player::play_sound_from_entity(value::uuid<default_entity>, sound("minecraft:item.trident.throw", 1, 2, "MASTER"));
        }
        select::reset();
    }
}

process BallFrozePart{
    code::call_function(p"ParticleViewStart");
    player::display_particle(particle("DUST", 1, 0, 0, 0, 0, 0, color=16764516), ParticleViewStart);
}

function MoveMPlatCheck{
    if(g`%var_local(ActivatorID)_IsActive`.equals(0)){
        code::break();
    }
}

function Lvl_UNLOAD3{
    if(CurrentLevel.equals(25)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with(["fitem*stand*%player%", "fitem*display*%player%"]));
        if(value::selection_size.greater(0)){
            entity::remove();
        }
        select::reset();
        variable::purge("%player%_FItem", match="STARTS_WITH");
    }
    if(CurrentLevel.equals(34)){
        player::remove_display_blocks(location(101.5, 64.5, -215.5, 0, 0), location(100.5, 63.5, -215.5, 0, 0));
        variable::purge("%player%_ECoreToggled");
        if(IsNeedUnload.equals(0)){
            player::hide_entity(g`%player%_ECoreUnhideUUID`, "FALSE");
        }
        else{
            variable::purge("%player%_ECoreUnhideUUID");
        }
    }
    code::call_function("UNLOAD_LaserB");
    code::call_function("UNLOAD_BallB");
    variable::purge(["%player%_RespawnPoint", "TrigData*%player%*"], match="STARTS_WITH");
}

process `*TrigLvl34Secret`{
    if(value::entity_type<default>.equals("player")){
        SecretSum = variable::add([s`%player%_FoundSecret1`, s`%player%_FoundSecret2`, s`%player%_FoundSecret3`, s`%player%_FoundSecret4`, s`%player%_FoundSecret5`, s`%player%_FoundSecret6`, s`%player%_FoundSecret7`]);
        if(SecretSum.greater_or_equals(7)){
            player::display_block([location(101.5, 63.5, -215.5, 0, 0), location(101.5, 64.5, -215.5, 0, 0)], "air");
            player::display_block(location(100.5, 63.5, -215.5, 0, 0), "iron_door[open=true,hinge=left,half=lower,facing=east]");
            player::display_block(location(100.5, 64.5, -215.5, 0, 0), "iron_door[open=true,hinge=left,half=upper,facing=east]");
            player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(100.5, 63.5, -215.5, 0, 0));
        }
    }
}

function LOAD_ECore{
    g`%var_local(NextLevel)_LvlHasECore` = 1;
    if(IsFirstLoad.equals(1)){
        ActivatorPos = DataList.get_list_value(1);
        if(g`%var_local(ActivatorPos)_IDs`.equals(0)){
            g`%var_local(ActivatorPos)_IDs` = [];
        }
        g`%var_local(ActivatorPos)_IDs`.append_value(LoadID);
        ActivatorID = variable::set_text([ActivatorPos, "*", LoadID], "CONCATENATION");
        g`%var_local(ActivatorID)_Type` = "ecore";
        g`%var_local(ActivatorID)_SpawnPos` = DataList.get_list_value(2);
        ActivatorPos = ActivatorPos.shift_coordinate(0);
        if not (g`ActivatorList`.list_contains_value(ActivatorPos)){
            g`ActivatorList`.append_value(ActivatorPos);
            g`LvlActivatorList_%var_local(NextLevel)`.append_value(ActivatorPos);
        }
        g`%var_local(ActivatorID)_SpawnPos` = g`%var_local(ActivatorID)_SpawnPos`.shift_coordinate(0);
        g`%var_local(ActivatorID)_EntityLevel` = NextLevel;
        player::remove_display_blocks(location(100.5, 63.5, -215.5, 0, 0), location(101.5, 64.5, -215.5, 0, 0));
        code::call_function(p"SpawnECore");
        LoadID = variable::add([LoadID, 1]);
    }
}

function UNLOAD_ECore{
    if(g`%var_local(CurrentLevel)_LvlHasECore`.equals(1)){
        select::entity_by_conditional(value::name<victim_entity>.text_starts_with("ecore*%var_local(CurrentLevel)*"));
        if(value::selection_size.greater("0.0")){
            variable::purge(value::selection_target_uuids, match="NAME_CONTAINS");
            entity::remove();
        }
        select::reset();
    }
}

function ACT_ECore{
    if(IsActive.equals(1)){
        if(g`%var_local(ActivatorID)_ActivateAnim`.equals(0)){
            g`%var_local(ActivatorID)_ActivateAnim` = 1;
        }
    }
}

function SpawnECore{
    ECoreName = variable::set_text(["ecore*", g`%var_local(ActivatorID)_EntityLevel`, "*core*%random_uuid%"], "CONCATENATION");
    ECoreStabilizerName = variable::set_text(["ecore*", g`%var_local(ActivatorID)_EntityLevel`, "*stabilizer*%random_uuid%"], "CONCATENATION");
    ECoreEffectName = variable::set_text(["ecore*", g`%var_local(ActivatorID)_EntityLevel`, "*effect*%random_uuid%"], "CONCATENATION");
    TEMP = g`%var_local(ActivatorID)_SpawnPos`.get_block_material();
    world::spawn_item_display(g`%var_local(ActivatorID)_SpawnPos`, ECoreName, "H4sIAAAAAAAA/12OsQoCMRBER8OJRgstxT+xsfEbxO4ImxwEkt0j2ev9dBMRBKecN8OMBQz2d6fuEUqNwsDpucU6ehxz5EDFTXqdRRsyGEgWVgArC0uSZ+HAWi3O/9mRhLUzgwMtVSU3J0lBl8Xll//SLD6k0bcjO2ymJE7r0Idur0/lDfokSeaoAAAA");
    select::last_entity();
    ECoreUUID = value::uuid<current>;
    entity::set_display_teleport_duration(5);
    code::call_function(p"AltEndFix");
    repeat::multi_times(N, 2){
        code::call_function(p"WAIT");
        g`%var_local(ActivatorID)_%var_local(N)_StabDirection` = vector(0, 0, 1).rotate_vector_around_axis("%math((%var_local(N)-1)*180)", "Y");
        StabPos = g`%var_local(ActivatorID)_SpawnPos`.shift_location_on_vector(g`%var_local(ActivatorID)_%var_local(N)_StabDirection`, 3);
        StabPos = StabPos.face_location(g`%var_local(ActivatorID)_SpawnPos`);
        world::spawn_item_display(StabPos, ECoreStabilizerName, "H4sIAAAAAAAA/0XNMQ7CMAxG4b9URRCmjhWXYGZD4gyILUodV0QkNkrc+0Mn3v7pOaDH6R4sPLi2pAKMzwN2KWIqSZhqWOwqbC+uydjPWendYyBdxQB0Do60fFRYrDmc/4jWZlp80cjZx9/hiP2SNVgbNni7YOsLW9nLX4EAAAA=");
        select::last_entity();
        l`%var_local(N)_ECoreStabUUID` = value::uuid<current>;
        entity::set_display_teleport_duration(5);
        entity::set_display_scale(vector(1, 2, 1));
        entity::set_display_translation(vector(0, 0.95, 0));
        if(N.equals(2)){
            entity::set_display_rotation_from_euler_angles(roll=180);
            entity::set_display_translation(vector(0, -0.95, 0));
        }
    }
    select::reset();
    code::start_process(p"ECoreLOOP", "COPY", "NO_TARGET");
}

process ECoreLOOP{
    PlaySoundLevel = g`%var_local(ActivatorID)_EntityLevel`;
    CoreAngle = 15;
    StabAngle = 10;
    repeat::forever(){
        code::call_function(p"WAIT");
        select::entity_by_name(ECoreUUID);
        if(value::selection_size.less_or_equals(0)){
            code::break();
        }
        PlaySoundPos = value::location<current>;
        PlaySoundSound = sound("minecraft:block.beacon.power_select", 2, 0.5, "power1", "MASTER");
        code::start_process(p"ECorePlaySound", "COPY", "NO_TARGET");
        entity::set_display_interpolation(5);
        entity::set_display_rotation_from_euler_angles(yaw=CoreAngle, mode="ADD");
        code::call_function(p"ECoreStabRot");
        code::call_function(p"ECoreAnim");
        code::wait(5);
    }
}

function ECoreStabRot{
    repeat::multi_times(N, 2){
        select::entity_by_name(l`%var_local(N)_ECoreStabUUID`);
        if(AnimToggle.equals(0)){
            l`%var_local(N)_StabRotToggle` = 0;
            g`%var_local(ActivatorID)_%var_local(N)_StabDirection` = g`%var_local(ActivatorID)_%var_local(N)_StabDirection`.rotate_vector_around_axis(StabAngle, "Y");
            StabPos = g`%var_local(ActivatorID)_SpawnPos`.shift_location_on_vector(g`%var_local(ActivatorID)_%var_local(N)_StabDirection`, 3);
            StabPos = StabPos.face_location(g`%var_local(ActivatorID)_SpawnPos`);
            entity::teleport(StabPos);
        }
        else{
            if(l`%var_local(N)_StabRotToggle`.equals(0)){
                l`%var_local(N)_StabRotToggle` = 1;
                l`%var_local(N)_StabRotPivot` = value::location<current>.shift_coordinate(5, "Y");
                l`%var_local(N)_StabRotAxis` = variable::vector_cross_product(g`%var_local(ActivatorID)_%var_local(N)_StabDirection`, vector(0, 1, 0));
                if(N.equals(2)){
                    l`%var_local(N)_StabRotPivot` = value::location<current>.shift_coordinate(-5, "Y");
                    l`%var_local(N)_StabRotAxis` = variable::vector_cross_product(g`%var_local(ActivatorID)_%var_local(N)_StabDirection`, vector(0, -1, 0));
                }
            }
            if(l`%var_local(N)_StabAngle`.less(75)){
                StabRotVect = variable::get_vector_between_locations(l`%var_local(N)_StabRotPivot`, value::location<current>);
                StabRotVect = StabRotVect.rotate_vector_around_vector(l`%var_local(N)_StabRotAxis`, 5);
                StabDir = variable::vector_cross_product(StabRotVect, l`%var_local(N)_StabRotAxis`);
                NewStabilizerPos = l`%var_local(N)_StabRotPivot`.shift_location_on_vector(StabRotVect);
                NewStabilizerPos = NewStabilizerPos.set_location_direction(StabDir);
                l`%var_local(N)_StabAngle` = variable::add([l`%var_local(N)_StabAngle`, 5]);
                entity::teleport(NewStabilizerPos);
            }
        }
    }
}

function ECoreAnim{
    if(g`%var_local(ActivatorID)_ActivateAnim`.equals(1)){
        AnimToggle = 1;
        select::player_by_name(g`LvlPlayerList_%var(%var_local(ActivatorID)_EntityLevel)`);
        select::filter_by_conditional(g`%selected%_ECoreToggled`.equals(0));
        if(value::selection_size.less_or_equals(0)){
            g`%var_local(ActivatorID)_ActivateAnim` = 0;
            AnimToggle = 0;
            code::return_function();
        }
        select::filter_by_conditional(value::location<default>.location_in_range(location(112.5, 58.5, -269.5, 0, 0), location(92.5, 71.5, -221.5, 0, 0), "FULL_BLOCK_RANGE"));
        if(value::selection_size.greater(0)){
            code::start_process(p"ECorePlEffect", "COPY", "FOR_EACH_IN_SELECTION");
        }
        PartVect = variable::set_vector("%math(%random%*2-1)", "%math(%random%*2-1)", "%math(%random%*2-1)");
        Particle = particle("FIREWORK", 1, 0, 0, 0, 0, 0).set_particle_offset(PartVect);
        player::display_particle(Particle, PlaySoundPos);
        PlaySoundSound = sound("minecraft:ambient.basalt_deltas.additions", 3, 2, "basaltground2", "MASTER");
        if(AnimTick.equals(12)){
            world::spawn_item_display(g`%var_local(ActivatorID)_SpawnPos`, ECoreEffectName, "H4sIAAAAAAAA/0XMMQ7CMAxG4R+qIggTCws3YerQMyC2KHJcKVJio9i5P3Ti7d8LwITrmjy9uFtRAW7vM44l496KMPW0+dNH98rRaDhPmEmHOIBDQCBtHxUWt4DHX9Aw1xabZq4x//YXnLaqyW3e4bJg7wuucr28fgAAAA==");
            select::last_entity();
            ECoreEffectUUID = value::uuid<current>;
            entity::set_display_billboard("CENTER");
            entity::set_display_scale(vector(8, 8, 8));
        }
        if(AnimTick.greater_or_equals(12)){
            player::display_particle(particle("SWEEP_ATTACK", 10, 5, 5, 0, 0, 0, size=2), PlaySoundPos);
            PlaySoundSound.append_value([sound("minecraft:item.trident.hit_ground", 3, 0.5, "MASTER"), sound("minecraft:block.conduit.deactivate", 3, 1, "MASTER")]);
        }
        code::start_process(p"ECorePlaySound", "COPY", "NO_TARGET");
        CoreAngle = variable::add([CoreAngle, 1]);
        CoreAngle = variable::min([CoreAngle, 90]);
        AnimTick = variable::add([AnimTick, 1]);
        if(AnimTick.greater_or_equals(40)){
            g`%var_local(ActivatorID)_ActivateAnim` = 0;
            AnimToggle = 0;
            CoreAngle = 15;
            code::start_process(p"ECoreSetToggle", "COPY", "FOR_EACH_IN_SELECTION");
            select::entity_by_name(ECoreEffectUUID);
            entity::remove();
        }
    }
}

process ECorePlEffect{
    s`%player%_FoundSecret8` = 1;
    player::play_hurt_animation("%math(%random%*360)");
}

process ECoreSetToggle{
    g`%player%_ECoreToggled` = 1;
    player::display_particle(particle("GUST_EMITTER_LARGE", 1, 0, 0, 0, 0, 0), PlaySoundPos);
    player::hide_entity([ECoreUUID, 1_ECoreStabUUID, 2_ECoreStabUUID]);
    g`%player%_ECoreUnhideUUID` = [ECoreUUID, 1_ECoreStabUUID, 2_ECoreStabUUID];
}

process ECorePlaySound{
    select::player_by_name(g`LvlPlayerList_%var_local(PlaySoundLevel)`);
    select::filter_by_conditional(g`%selected%_ECoreToggled`.equals(0));
    if(value::selection_size.greater(0)){
        player::play_sound_sequence(PlaySoundSound, PlaySoundPos, 0);
    }
}

function AltEndCamera{
    IsAltEnding = 1;
    code::call_function(p"EndSetupPl");
    CreeperUUID = value::uuid<current>;
    entity::set_custom_name_visibility("FALSE");
    entity::set_ai("FALSE");
    entity::set_silenced();
    entity::set_default_visible();
    entity::set_death_drops("FALSE");
    entity::set_collidable("FALSE");
    entity::set_invulnerable();
    entity::set_invisible();
    entity::set_despawning("FALSE");
    player::hide_entity(CreeperUUID, "FALSE");
    code::wait(1);
    player::spectate_target(CreeperUUID);
}

function AltEndSkybox{
    if(IsLight.equals(0)){
        SkyboxName = "intro*%player%*skybox*%random_uuid%";
        if(SkyboxType.equals(0)){
            world::spawn_item_display(value::eye_location<default>, SkyboxName, "H4sIAAAAAAAA/0WMMQ7CMBAEN0RBxFRIdPyEKgVvQHSWZTvRSfEtsi//J6mYemYc0OP6ChbeuTahArfPBSdJuBfRHGuY7SmV6kUXWo8hclMD0Dm4yPKlZrXm8Pj7cWvG4gtTXn3a5yPO88pgbTjCacLBD5zLniB8AAAA");
        }
        else{
            world::spawn_item_display(value::eye_location<default>, SkyboxName, "H4sIAAAAAAAA/0WMOw7CMBAFH0SJiKmQ6LhJKoqcIaKzLNtBK8X7kL25P5+GqWfGAR3Oc7Cw5NqEClweJxwl4VpEc6xhtUkq1Ys+aR36yF0NwMHBRZYXNas1h9vfj3szFl+Y8ubTZz5iWDcGa/03vOPHG/DBxi98AAAA");
        }
        select::entity_by_name(SkyboxName);
        SkyboxUUID = value::uuid<current>;
        entity::set_default_visible();
        if(SkyboxType.equals(0)){
            entity::set_display_scale(vector(16, 16, 16));
        }
        else{
            entity::set_display_scale(vector(160, 160, 160));
        }
        entity::ride_entity(value::uuid<default>);
        player::hide_entity(SkyboxUUID, "FALSE");
        if(SkyboxType.equals(0)){
            code::start_process(p"AltEndSkyboxLOOP", target_mode="FOR_EACH_IN_SELECTION");
        }
    }
    else{
        LightName = "intro*%player%*light*%random_uuid%";
        world::spawn_text_display(location(82.1, 167, 0.5, 90, 0), LightName, " ");
        select::entity_by_name(LightName);
        MiscUUID = value::uuid<current>;
        entity::set_default_visible();
        entity::set_display_scale(vector(16, 16, 0));
        entity::set_text_display_background("#FFFFFF", 100);
        player::hide_entity(MiscUUID, "FALSE");
        code::start_process(p"AltEndSkyboxLOOP", "COPY");
    }
}

process AltEndSkyboxLOOP{
    if(IsLight.equals(0)){
        repeat::while(entity::exists()){
            code::call_function(p"WAIT");
            entity::set_display_interpolation(20);
            entity::set_display_rotation_from_euler_angles(yaw=2, mode="ADD");
            code::wait(20);
        }

    }
    else{
        select::entity_by_name(MiscUUID);
        repeat::while(entity::exists()){
            code::call_function(p"WAIT");
            Dist = variable::locations_distance(value::location<default>, value::location<current>, "TWO_D");
            Dist = variable::divide([Dist, 1.5]);
            Transparancy = Dist.lerp_number(-20, 100);
            Transparancy = Transparancy.round(round_type="FLOOR");
            Transparancy = Transparancy.clamp(0, 100);
            if(Transparancy.not_equals(OldTransparancy)){
                entity::set_display_interpolation(5);
                entity::set_text_display_background("#FFFFFF", Transparancy);
            }
            OldTransparancy = Transparancy;
            code::wait(5);
        }

    }
}

function AltEndAnimMove{
    select::entity_by_name(CreeperUUID);
    CMovePos = CMovePos.shift_location_in_direction(0.5);
    entity::teleport(CMovePos, "TRUE");
    select::entity_by_name(AnimDispUUID);
    entity::teleport(MMovePos);
}

function AltEndAnimation{
    code::wait(9);
    AnimWaitTicks = variable::subtract([AnimDuration, 40]);
    AnimClock = value::world_game_time;
    AnimClock = "%math(%var_local(AnimClock)%24000)";
    AnimClock = variable::subtract([AnimClock, AnimStartTick]);
    AnimClock = AnimClock.remainder(AnimDuration);
    AnimClock = variable::set_text(["{custom_color:", AnimClock, "}"], "CONCATENATION");
    AnimItem = AnimModel.set_item_component("minecraft:potion_contents", AnimClock);
    entity::set_item_display_item(AnimItem);
    code::wait(AnimWaitTicks);
    player::send_title("&#7a503c█", "%empty%", 10, 20, 10);
    player::play_sound_from_entity(value::uuid<default>, sound("minecraft:cubed.other.sweep", 1, 1, "MASTER"));
    code::wait(20);
    entity::set_item_display_item(AnimModel);
}

function AltEndAnim1{
    g`%player%_TitleTicks` = 999999;
    s`%player%_Ending2` = 1;
    player::set_boss_bar("empty_bar_2", "&#78503c", 0, "FOG_AND_DARK_SKY");
    player::teleport(location(79, 141.2, 0.5, -90, 0), "FALSE");
    code::call_function(p"AltEndCamera");
    code::call_function(p"AltEndSkybox");
    ModelDisplayName = "intro*%player%*display*%random_uuid%";
    world::spawn_item_display(location(80.5, 141.5, 0.5, 90, 0), ModelDisplayName, "H4sIAAAAAAAA/12OwQrCMBBER0NFowc9in/iyUO/QbyVsEkhkOyWZHv305uKIDjHeTPMWMDg2Dt1z1BqFAYurz220eOcIwcqbtT7JNqQQUcyswLYWFiSPAkH1mpx/c8OJKwrMzjRXFVyc5IUvFvb4vbLf2kWH9Lg25EDdmMSp7Vbhx74aAE7RAviqAAAAA==");
    select::entity_by_name(ModelDisplayName);
    AnimDispUUID = value::uuid<current>;
    entity::set_default_visible();
    player::hide_entity(AnimDispUUID, "FALSE");
    code::call_function("AltEndFix");
    code::wait(100);
    player::play_sound_from_entity(value::uuid<default>, sound("minecraft:cubed.music.persona", 1, 1, "RECORD"));
    AnimModel = "H4sIAAAAAAAA/12OsQoCMRBExwsnGi20FH/C2srCbxC7I2xyEEh2j2Sv99PNiSA45bwHMxYw2N2dukcoNQoDx+cGXfQ45MiBihv1Ook2ZNCTzKwAVhaWJE/CgbVanP7dgYR1YQZ7mqtKbk2Sgld3gcX5539pFh/S4NuRLdZjEqe1X4Zu+OQNKjbguqgAAAA=";
    AnimDuration = 580;
    Messages = ["audio|cubed.dialog.scene_1", "text|%empty%|88", "text|Ты здесь… Ты правда добралась… Я так долго ждала этого момента, что почти|164", "text|перестала верить, что он вообще настанет. Я знаю, ты не помнишь меня.|122", "text|Это не твоя вина. Главное — ты здесь. И я наконец-то могу поговорить с тобой.|166"];
    code::start_process(p"DialogAudioAsync", "COPY");
    code::call_function(p"AltEndAnimation");
    select::entity_by_name(SkyboxUUID);
    entity::remove();
    MMovePos = location(79.5, 141.5, 27.5, 155, 0);
    CMovePos = location(78.5, 141.2, 25.5, -45, 0);
    code::call_function(p"AltEndAnimMove");
    AnimModel = "H4sIAAAAAAAA/12OQQrCMBREp4aKRhe6U7yJqy56BnFXQpJCIPm/JL97j94EBMFZznswowGF02jEvHwugQm4vg/YBYdLCuRtNrM8F5aKFHrLKwmATkNbTguTJyka9393skzSmMLZrkU41SZyxqe7QePx8780sfNxcvXIEfs5spHSt6FhQMsGf3SeLKgAAAA=";
    AnimDuration = 300;
    Messages = ["audio|cubed.dialog.scene_2", "text|%empty%|24", "text|Когда-то здесь кипела жизнь… Всё казалось важным… А потом всё исчезло.|158", "text|Осталась только тишина. И я — вместе с ней…|98"];
    code::start_process(p"DialogAudioAsync", "COPY", "CURRENT_TARGET");
    code::call_function(p"AltEndAnimation");
    MMovePos = location(118.5, 141.5, 34.5, 25, 0);
    CMovePos = location(117.5, 141.2, 36.5, -135, 0);
    code::call_function(p"AltEndAnimMove");
    AnimModel = "H4sIAAAAAAAA/12OQQrCMBREp4aKRhe6U7yJKxc9g7grIUkhkPxfkt99j94EBMFZznswowGF02DEvH0ugQm4fg7YBYdLCuRtNpM8Z5aKFHrLCwmATkNbTjOTJyka9393tEzSmMLZLkU41SZyxtrdoPH4+V+a2Pk4unrkiP0U2Ujp29BrRcsGy2p2PagAAAA=";
    AnimDuration = 300;
    Messages = ["audio|cubed.dialog.scene_3", "text|%empty%|24", "text|Они пытались сохранить меня. Сначала — память, потом — голос… Но никто|126", "text|не подумал о том, что будет, если я захочу уйти… Никто не спросил…|120"];
    code::start_process(p"DialogAudioAsync", "COPY");
    code::call_function(p"AltEndAnimation");
    code::call_function(p"AltEndAnim2");
    Messages = 0;
    code::break();
}

function AltEndAnim2{
    MMovePos = location(108.5, 141.5, -0.5, 25, 0);
    CMovePos = location(107.5, 141.2, 1.5, -135, 0);
    code::call_function(p"AltEndAnimMove");
    AnimModel = "H4sIAAAAAAAA/12OQQrCMBREp4aKRhFdijdx5cIziLsSkhQCyf8l+d33KD2qCQiCs5z3YEYDCoenEfPyuQQm4PLeYRMczimQt9mMcp9YKlLoLc8kADoNbTlNTJ6kaFz/3cEySWMKRzsX4VSbyBlLd4LG7ed/aWLn4+DqkT22Y2QjpW9DjxUtHy7VN2eoAAAA";
    AnimDuration = 290;
    Messages = ["audio|cubed.dialog.scene_4", "text|%empty%|24", "text|Ты пришла сюда сама, даже не понимая, зачем именно… И даже когда память тебя|130", "text|подвела, что-то внутри всё равно вело тебя вперёд.|86"];
    code::start_process(p"DialogAudioAsync", "COPY");
    code::call_function(p"AltEndAnimation");
    code::call_function(p"AltEndSkybox");
    MMovePos = location(80.5, 141.5, 0.5, 90, 0);
    CMovePos = location(79, 141.2, 0.5, -90, 0);
    code::call_function(p"AltEndAnimMove");
    AnimModel = "H4sIAAAAAAAA/12OQQrCMBREp8aKRhe6FG/iyoVnEHclJCkEkv9L8rvv0Xo0ExAEZznvwYwGFI5PI+blcwlMwOW9xyY4nFMgb7MZ5T6xVKTQW55JAHQa2nKamDxJ0bj+u4NlksYUTnYuwqk2kTOWbguN28//0sTOx8HVIwfsxshGSt+GHitaPnw0VdKoAAAA";
    AnimDuration = 280;
    Messages = ["audio|cubed.dialog.scene_6", "text|%empty%|24", "text|То, что держало меня здесь, больше не властно. Я больше не часть|108", "text|чужих ожиданий. И ты больше не привязана к этому месту.|122"];
    code::start_process(p"DialogAudioAsync", "COPY");
    code::call_function(p"AltEndAnimation");
    select::entity_by_name(SkyboxUUID);
    entity::remove();
    MMovePos = location(81.5, 140.5, -26.5, 90, 0);
    CMovePos = location(79.5, 140.2, -26.5, -90, 0);
    code::call_function(p"AltEndAnimMove");
    AnimModel = "H4sIAAAAAAAA/12OMQoCMRRER8OKRgstxZtsZbFnELslJFkIJP8vyd9+j+o5rExAEJxy3oMZDSgcByPm4XMJTMDlucc2OJxTIG+zmaSfWSpS6CwvJAA2Gtpympk8SdG4/rujZZLGFE52KcKpNpEzVryhcfv5X5rY+Ti6euSA3RTZSOna0P2Flg95E4inqAAAAA==";
    AnimDuration = 270;
    Messages = ["audio|cubed.dialog.scene_7", "text|%empty%|24", "text|Спасибо тебе. Ты вернула мне не то, что было, а возможность отпустить это.|136", "text|Теперь у каждой из нас свой путь…|70"];
    code::start_process(p"DialogAudioAsync", "COPY");
    code::call_function(p"AltEndAnimation");
    player::send_title("&#7a503c█", "%empty%", 0, 20, 20);
    SkyboxType = 1;
    code::call_function(p"AltEndSkybox");
    IsLight = 1;
    code::call_function(p"AltEndSkybox");
    code::call_function(p"EndUnloadDecor");
    select::entity_by_name(AnimDispUUID);
    entity::remove();
    select::entity_by_name(CreeperUUID);
    CMovePos = (location(79.5, 167.2, 0.5, -90, 0)).shift_location_in_direction(0.5);
    entity::teleport(CMovePos);
    player::set_boss_bar("empty_bar_2", "%empty%", 0, "NONE");
    code::wait(20);
    player::play_sound(sound("minecraft:block.iron_door.open", 1, 1, "MASTER"), location(82.5, 167.5, 0.5, 0, 0));
    code::call_function(p"AltEndAnim3");
}

function AltEndAnim3{
    code::wait(20);
    player::play_sound_from_entity(value::uuid<default>, sound("minecraft:cubed.other.birds", 1, 1, "MASTER"));
    code::wait(20);
    repeat::multi_times(I, 120){
        code::call_function(p"WAIT");
        Pos = value::location<current>.shift_coordinate(0.05);
        t = variable::divide([I, 120]);
        Pitch = t.lerp_number(20, -10);
        Pitch = variable::min([Pitch, 0]);
        Pos = Pos.set_coordinate(Pitch, "PITCH");
        entity::teleport(Pos);
        if("%math(%var_local(I)%15)".equals(0)){
            player::play_sound(sound("minecraft:block.calcite.step", 1, 0.5, "MASTER"), value::location<default>);
        }
        code::wait(1);
    }
    select::reset();
    code::wait(20);
    FancyTitleArgs = ["« CUBED »", "&#ffb657&l", "%empty%", "%empty%", 50, 10, 5, 0, 0, 0, 0, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(100);
    FancyTitleArgs = ["Автор мира", "&#ffb657", "realDosed", "&#abc4d6", 50, 10, 2, 0, 0, 25, 57, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(100);
    FancyTitleArgs = ["Помощь с текстурами", "&#ffb657", "Miwo4ka", "&#abc4d6", 50, 10, 2, 0, 0, 23, 59, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(100);
    FancyTitleArgs = ["Дополнительная помощь", "&#ffb657", "lis1mp, White_145, jAngelius", "&#abc4d6", 50, 10, 2, 0, 0, 21, 54, 0, 0, "smallcaps"];
    code::call_function(p"FancyTitle");
    g`%player%_TitleTicks` = 200;
    code::wait(120);
    g`%player%_IntroStarted` = 0;
    code::call_function(p"TransitionLong");
    select::entity_by_name([CreeperUUID, SkyboxUUID, MiscUUID]);
    entity::remove();
    select::reset();
    code::call_function(p"GameEnding");
}

function `init rem`{
    TEMP = (location(2.5, 18.5, 7.5, 0, 0)).get_block_material();
    if(s`remt`.exists()){
        select::entity_by_name(s`remt`);
        if(value::selection_size.equals(0)){
            code::call_exception(message="Существо восстановления мира не найдено. Создаю новое...");
            code::call_function(p"smn remt_entity");
        }
    }
    else{
        code::call_exception(message="Создаю новое существо восстановления мира...");
        code::call_function(p"smn remt_entity");
    }
    g`ntck` = variable::add([value::server_current_tick, 1]);
}

function `smn remt_entity`{
    TEMP = (location(2.5, 18.5, 7.5, 0, 0)).get_block_material();
    world::spawn_armor_stand("AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", "AAAAAAAAAAA=", location(2.5, 18.5, 7.5, 0, 0), p"$remt", marker="TRUE", small="TRUE", show_arms="FALSE", invisible="TRUE");
    select::last_entity();
    s`remt` = value::uuid<current>;
    entity::set_custom_tag(p"$remt", p"$remt");
    entity::give_potion_effects(potion("minecraft:instant_health", 0, -1), "FALSE", "FALSE", "NONE");
}

event<entity_heal>{
    if(value::uuid<default>.not_equals(s`remt`)){
        code::break();
    }
    if(value::server_current_tick.equals(g`ntck`)){
        g`ntck` = variable::increment(1);
        code::break();
    }
    if(value::server_current_tick.greater(g`ntck`)){
        code::call_function(p"on code_stopping");
        g`ntck` = variable::add([value::server_current_tick, 1]);
        code::break();
    }
}

function `on code_stopping`{
    d = variable::subtract([value::server_current_tick, g`ntck`]);
    player::message("&7 Обнаружена остановка мира (на %var_local(d) тиков)!");
    code::return_function();
    select::player_by_conditional(g`%selected%_FirstJoined`.equals(0));
    if(value::selection_size.greater(0)){
        code::start_process(p"RestorePlayer0", target_mode="FOR_EACH_IN_SELECTION");
    }
}

process RestorePlayer{
    if(g`%player%_InMenu`.equals("1")){
        player::message("&7 Восстанавливаю циклы меню...");
        g`%player%_EnableMenuLOOP` = 0;
        code::wait(20);
        if(g`%player%_InPauseMenu`.equals("1")){
            code::call_function(p"PauseCONTINUE");
            code::start_process(p"RestorePlayer");
        }
        else{
            g`%player%_EnableMenuLOOP` = 1;
            code::start_process(p"MENU_LOOP");
        }
    }
    else{
        player::message("&7 Восстанавливаю циклы и перезагружаю уровень...");
        g`%player%_EnableLOOP` = 0;
        SAVE_LEVEL = g`%player%_Level`;
        player::message(["&f Уровень %player% до перезагрузки:", SAVE_LEVEL, "(чекпоинт", g`%player%_RespawnPoint`, ")"]);
        CurrentLevel = SAVE_LEVEL;
        NextLevel = 0;
        g`%player%_Level` = NextLevel;
        SAVE_RESPAWN_POINT = g`%player%_RespawnPoint`;
        if(SAVE_RESPAWN_POINT.not_equals(0)){
            SAVE_PORTAL_GUN = g`%player%_HasPortalGun`;
            SAVE_GRAVITY_GUN = g`%player%_HasGravityGun`;
        }
        code::call_function(p"Lvl_UNLOAD");
        code::call_function(p"SaveLvlTime");
        code::call_function(p"ResetVars");
        code::wait(20);
        CurrentLevel = 0;
        NextLevel = SAVE_LEVEL;
        code::call_function(p"Lvl_LOAD");
        g`%player%_Level` = NextLevel;
        DisplayLvl = g`%player%_Level`.absolute();
        player::set_experience(DisplayLvl, "LEVEL");
        player::message(["&f Уровень %player% после перезагрузки:", g`%player%_Level`, "(чекпоинт", SAVE_RESPAWN_POINT, ")"]);
        code::call_function(p"RestorePlayer2");
    }
}

function RestorePlayer2{
    if(SAVE_PORTAL_GUN.equals("1")){
        g`%player%_GivePortalGun` = "1";
    }
    if(SAVE_GRAVITY_GUN.equals("1")){
        g`%player%_GiveGravityGun` = "1";
    }
    code::call_function(p"LevelTP");
    if(SAVE_RESPAWN_POINT.not_equals(0)){
        g`%player%_RespawnPoint` = SAVE_RESPAWN_POINT;
        player::teleport(SAVE_RESPAWN_POINT, "FALSE");
    }
    g`%player%_EnableLOOP` = 1;
    code::start_process(p"PlLOOP");
}

function CheckGunClick{
    if not (world::block_equals("dark_oak_door", value::event_block_location)){
        world::cancel_event();
    }
    else{
        code::break();
    }
}

process RestorePlayer0{
    code::wait(1);
    code::start_process(p"RestorePlayer", target_mode="FOR_EACH_IN_SELECTION");
}

function EndSetupPl{
    if(g`EndPlayerList_%var_local(IsAltEnding)`.equals(0)){
        g`EndPlayerList_%var_local(IsAltEnding)` = [];
        g`EndDecorUUIDList_%var_local(IsAltEnding)` = [];
        DecorName = "decor*%random_uuid%";
        code::call_function("EndDecor%var_local(IsAltEnding)");
    }
    g`EndPlayerList_%var_local(IsAltEnding)`.append_value(value::uuid<default>);
    CameraName = "intro*%player%*%random_uuid%";
    SpawnEgg = "H4sIAAAAAAAA/0WNsQrCQBBEZ42KnDYW4nfY2ok2adIIYhcuyRoOcnvhbqP49x5YpH0z88YABbY3q/bBMbkgwP65wcJ1OHon3Eb70nNjtU6j/UjNfV9g1YZJFAAZmDb4MQiLJoPDPMnA6bfuspmwvrshA/qL93MraXQdR8KyCpcy5+Y6JQ2+sp5BJ8KulPc0CEfbDEz58gcg3PAVsQAAAA==";
    SpawnEgg = SpawnEgg.replace_text("CustomName:'\"1\"'", "CustomName:'\"%var_local(CameraName)\"'", "FIRST");
    if(IsAltEnding.equals(0)){
        CameraPos = (location(-6.5, 139.75, -93.5, -150, -5)).shift_location_in_direction(0.5);
        world::spawn_mob(SpawnEgg, CameraPos, custom_name=CameraName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    else{
        CameraPos = value::location<default>.shift_location_in_direction(0.5);
        world::spawn_mob(SpawnEgg, CameraPos, custom_name=CameraName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
    }
    select::entity_by_name(CameraName);
}

function LOAD_Decor{
    g`%var_local(NextLevel)_LvlHasDecor` = 1;
    if(IsFirstLoad.equals(1)){
        DecorDataList = DataList.get_list_value(1);
        DecorDataList = DecorDataList.split_text("#");
        if(g`DecorUUIDList_%var_local(NextLevel)`.equals(0)){
            g`DecorUUIDList_%var_local(NextLevel)` = [];
        }
        repeat::for_each_in_list(value_variable=DecorData, list=DecorDataList){
            code::call_function(p"WAIT");
            DecorData = DecorData.split_text("$");
            DecorType = DecorData.get_list_value(0);
            DecorPosList = DecorData.get_list_value(1);
            DecorPosList = DecorPosList.split_text("*");
            DecorName = variable::set_text(["decor*", NextLevel, "*", DecorType, "*%random_uuid%"], "CONCATENATION");
            repeat::for_each_in_list(value_variable=DecorPos, list=DecorPosList){
                code::call_function(p"WAIT");
                code::call_function(p"SpawnDecor");
            }
        }
    }
}

function UNLOAD_Decor{
    if(g`%var_local(CurrentLevel)_LvlHasDecor`.equals(1)){
        select::entity_by_name(g`DecorUUIDList_%var_local(CurrentLevel)`);
        if(value::selection_size.greater(0)){
            entity::remove();
        }
        variable::purge("DecorUUIDList_%var_local(CurrentLevel)");
        select::reset();
    }
}

function SpawnDecor{
    TEMP = DecorPos.get_block_material();
    if(DecorType.equals("camera")){
        DecorPos = DecorPos.shift_coordinate(1.5, "Y");
        world::spawn_item_display(DecorPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5CQ8MZEJ1l7I1kaT8ou+k5OqRi6plJwIDjvUR50OzdFDg999j2hrN0pTqXKa7OXSi/CvOAsdqiAWCTkKrJ25Q0POHy9+viYZLFGnFuv/kBu4mthI9rePtg5QuOFFDkfAAAAA==");
        g`DecorUUIDList_%var_local(NextLevel)`.append_value(value::uuid<last_entity>);
    }
    if(DecorType.equals(["comp_n", "comp_g", "comp_b", "portal", "gravity", "glow"])){
        DecorPos = DecorPos.align_location(coordinates_mode="Y");
        if(DecorType.equals("comp_n")){
            world::spawn_item_display(DecorPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5CRZEzIDrL2BvJ0n5QdnN/Pg1Tz0wCBhynEuVOi3dT4PTYY9sbztKV6lLmuDp3ofwszAPGaqsGgE1CqiYvU9LwhMvfr6uHSRZrxLl95gfsZrYSPn7DG368AZSgwOB8AAAA");
        }
        if(DecorType.equals("comp_g")){
            world::spawn_item_display(DecorPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5CRcEZEJ1l7I1kaT8ou+k5OqRi6plJwIDjvUR50OzdFDg999j2hrN0pTqXKa7OXSi/CvOAsdqiAWCTkKrJ25Q0POHy9+viYZLFGnFuv/kBu4mthI9rePtg5QtMtHD+fAAAAA==");
        }
        if(DecorType.equals("comp_b")){
            world::spawn_item_display(DecorPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5ClYIzIDprsR3J0n5QdnN/SMXUM5OAAecHBT3b4t0UuLyO2PeKq3RtZaE57s5dWn4T84Cx2KoBYJeQisnHtGl4wu3vl9XDJIvVxrn+5iccZjYKH7dwmrDxBfiqmO98AAAA");
        }
        if(DecorType.equals("portal")){
            DecorPos = DecorPos.set_coordinate(-90, "PITCH");
            world::spawn_mob("H4sIAAAAAAAA/32OMU/DMBCFnympqGEBUTHwT1gYQJW6MCI26+I40UmxL7KvFDZ+Om4zhIkb333v6bPACtevpPQecmFJwO3HFS64w0PkFHymXp9aUlcmOiYXhmGFxsshKQBjYb3ESVJIWiy2S6UGrN+uq8sGzY6/Qmfm3fsFYg3R9ZliMNjs0ycXbsdQVy/39TPjdwvus5TSyvEfg8c/9KGoRBelC+PZY4N1PwppaU7F5x+czmC9I89pqHb25Vx5qz64mSQrjbNd5X4BYUPQBikBAAA=", DecorPos, custom_name="portal_frame", potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
        }
        if(DecorType.equals("gravity")){
            DecorPos = DecorPos.set_coordinate(-90, "PITCH");
            world::spawn_mob("H4sIAAAAAAAA/32PMU/DMBCFnympqBEDCMTAP2GqBKrUhRGxWRfnEp0U+yrbbeHf46RDmLjx7ntP31lghdt3KvTJKYtG4P7rBlfS4TlIZJ+oL68tFZcPdI6Oh2GFxusxFgDGwnoNB40cS7Z4WiJ1IeXHdbXZoNnJN3fm0vu4QFI4uD5RYIPNPp4kSztybb3e18sFf1hwnzTnVs//GLz8oY+5aHBBOx5njw3W/ahUcjMFt1tMY7DekZc4VDv7Nkc+qg/uhkSn6YNZr4K/9w3piyoBAAA=", DecorPos, custom_name="gravity_frame", potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
        }
        if(DecorType.equals("glow")){
            world::spawn_mob("H4sIAAAAAAAA/4VPS0rEQBB9monYPTggqLMYvIgbZ+EZxF1TJp3Y0J/QVYMMbjyKJ/MspjNgstK3KerV+1AaqLB+IqFnm9mlCFy/XOLctdgGF22TqZOHVxLDA71HY/u+Qt2kQxQAZxq6SWFI0UZhjdvZMhJOjqYdk09xd/PNiQ2mdTx4OmqsynrS3C8qcxrrWGhkWtN7Yv6jeDcbmwNLCiak1vqpXuGi84mE62J8/ESBxkYyRe5SDiTj3wrrifDTVqQVFlDYZNe/iclJfhWrpaIEK9TckLeTff9987H/AspUuPK2+8dd8APyKbVnkAEAAA==", DecorPos, custom_name=DecorName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
        }
        g`DecorUUIDList_%var_local(NextLevel)`.append_value(value::uuid<last_entity>);
    }
}

event<entity_transform>{
    world::cancel_event();
}

function EndDecor0{
    EntityEggList = ["H4sIAAAAAAAA/4VQy07EMAwc2A3qQ6yEEOJfuHDhjDghbpFJ3TYijavEaLU3/oxfIy2PReKAJR88nrHHboAN2jtSeuSUvUTg4qnCqe9wPfnILlGvN8+kNs+0j5aHYQPj5DUqgJMGjZNplshRc4Oro6QAXg+2K5P/jgviXmzn8xzo0GCniWLuJU2kxUGNdgXCWhksDr/ivWSNXfLDqDaJ/jC2+BW3bwvLZEeBV/kCfGeN88D9P2o0aD9N5sLiCtt7mhiXxxN8kmg7kVQ+8JBk5qSec4WznpyPA7ZMWYtupNDDBNlzqmDG0mKY1f+67AMnAVU2fwEAAA==", "H4sIAAAAAAAA/4VQwUrEMBB9uo20KS6ILP6LFy+exZN4C2M6bYNpUpJZZG/+mb9mWtldwYMDQ5iX92bejAY2aB9J6IVTdjEAN681Ll2Hu8kFtol6uX8jMXmmj2B4GDZQNu6DALjQ0DZOcwwcJGvszpICODmYrnT+285H+246l2dPB42tJAq5j2kiKQ4atCvg10phcVji4RP4Km+DbXLDKCZFOTEq/IqF2UBlS55X+QIcs8G15/4fNTTaH5O5sLhG9UQT4/a8gksxmC7GVC7wnOLMSRznGlc9WRcGVExZim4k30Pt50KoocbyxVCr/3XYNzZFYih/AQAA", "H4sIAAAAAAAA/32PwUrEMBCGf+2u2CwueFARL75Db16q4DOIt5BN024wyZRkFtmbb+armbRovegPA5mZ75+fCKDC5lmxejExWQrA5es5Tm2HG2+D0VH1/LBTLNOo3oM0w1BhrekQGMCJgNDkRwomcBK4Wix5YPkou3x5Pne97CwbLzubRqeOAqvSzsztwgTDexPzSu4c6bd/Qu8Wkz4kJi89dcZN0TXOekeK07oYn+5RJLDlqELqKXrF+c81NtPATV1Bq8K1mFVjG+2wZxmJf4gVfqn9KNQ6aeXMZH/MSd9V48KZ/g932zTNZ67y/gIKo5HRjAEAAA==", "H4sIAAAAAAAA/32Pz0rEMBCHf9qt2CwueHBF9rLv0JuXKvgM4i1k02k3mD8lmUX25qPbtGi96MBAZub7ZogACqxfFKtXiskED9y+XePStLh3xpOOquPHg2KZBvXhJfV9gVKHk2cAFwJCBzcET56TwN2ijA3DZ9mOm+d122VmmJxsTRqsOguscjkzDwvjiY8Ux5E82KDf/zm6WyR9ShycdKElO52ucNXZoDiVWXzGFAIbjsqnLkSnePxzhfXUsFOV0SJzzYyjwiaa/sgyBv4hVvgVzWemyqSVpUl/2gPfWeHGUveH3dR1nTO/vwCgX5UsjAEAAA==", "H4sIAAAAAAAA/4WPTU4DMQyFH0yLmFRUYgEIseEcbNoFZ0DsIjfjTCPyM0pcoe44KkdhMhUMK3iSZdn+ni0roMHqmYReOBeXInD9eolz1+EuuMgmk5WnHYkuA71HzX3fYGnSIQqAMwVlUhhS5ChF4Wa2jA0nR92Nm0/rbueZEw66c2XwdFRY1PLE3M9MZNlzHkd655N5++Pow2wyhyIp6JA69tPpFhfWJ5KyrMbtJ6oU1pIpFptyIBl/brGaGn6qKtpUbmOtrbnFOrt+Lzon+SEW+KXNR6WWxZDnyb59BL6jxZVn+4+76gs7lmoxjAEAAA==", "H4sIAAAAAAAA/32Pz0oDMRCHf7pdcVMseLAifYnC3rxsBZ9BvIU0m90G82dJpkhvvpk+mkkKrhcdCMnMfN8MYUCF5bMg8aJC1N4Bt6/XuNQ97q12SgYx0ONeEI+TeHdcjWOFWvqjIwAXDEx6O3mnHEWGu1lJBU0n3qfJ53HruadJWd7rOBlxYljk9Mw8zIxTdFAhtfjeePn2z9LNLMljJG+59b0yZXWDq8F4QbHO4tMWORhWFISLgw9WUPpzg2UpmJJltMpctys4GqyCHg/Eg6cfYoFf0X1kqo5SGFX07gvYJT3fDW6MGv6wu7ZtP9PJ72/HXDg8jAEAAA==", "H4sIAAAAAAAA/32Pz0rEMBCHf9qt2CwueFARX0LozUtX8BnEW5hN024wf0oyi+zNR/PRbLJgvehASGbm+2aIACqsX4jpVcdkggeu3y5xbnrcOeO1ijTw045Ypok+vNTjWKFW4eAZwJmAUMFNwWvPSeBmUeaC4aPs58mncbdLz7B2sjdpsnQUWOX0xNwvjNe813FuyZ0N6v2fpQ+LpA6Jg5Mu9NqW1Q0uBhuIU53F50fkENhwJJ+GEB3x/OcG61KwJctolbluW3A02EQz7lnGwD/ECr+i+8xUnRRZXfTuC9jOer4bXFk9/GF3bdvmk9/fHdkDb4wBAAA=", "H4sIAAAAAAAA/32Pz0rEMBCHf9qt2CwueFARX0LozUtX8BnEW5hN024wf0oyi+zNR/PRbLJgvehASGbm+2aIACqsX4jpVcdkggeu3y5xbnrcOeO1ijTw045Ypok+vNTjWKFW4eAZwJmAUMFNwWvPSeBmUeaC4aPs58mncbdLz7B2sjdpsnQUWOX0xNwvjNe813FuyZ0N6v2fpQ+LpA6Jg5Mu9NqW1Q0uBhuIU53F50fkENhwJJ+GEB3x/OcG61KwJctolbluW3A02EQz7lnGwD/ECr+i+8xUnRRZXfTuC9jOer4bXFk9/GF3bdvmk9/fHdkDb4wBAAA="];
    EntityPosList = [location(4.5, 141, -114.5, 0, 0), location(4.5, 141, -114.5, 0, 0), location(-1.5, 141, -97.5, 60, 0), location(1.5, 141, -98.5, -150, 0), location(-8.5, 141, -103.5, -60, 0), location(-11.5, 141, -100.5, -60, 0), location(-4.5, 141, -107.5, 0, 0), location(5.5, 141, -97.5, 60, 0)];
    I = 0;
    repeat::for_each_in_list(value_variable=EntityEgg, list=EntityEggList){
        code::call_function(p"WAIT");
        EntityPos = EntityPosList.get_list_value(I);
        world::spawn_mob(EntityEgg, EntityPos, custom_name=DecorName, potion_effects=[], main_hand="AAAAAAAAAAA=", helmet="AAAAAAAAAAA=", chestplate="AAAAAAAAAAA=", leggings="AAAAAAAAAAA=", boots="AAAAAAAAAAA=", off_hand="AAAAAAAAAAA=");
        select::last_entity();
        entity::set_custom_name(DecorName);
        g`EndDecorUUIDList_%var_local(IsAltEnding)`.append_value(value::uuid<current>);
        I = variable::add([I, 1]);
    }
    select::reset();
}

function EndDecor1{
    EntityPosList = [location(79.5, 144.5, 35.5, -180, 0), location(92.5, 145.5, 26.5, 90, 0), location(116.5, 144.5, 21.5, -45, 0), location(105.5, 146.5, 2.5, -135, 0), location(105.5, 146.5, -15.5, -45, 0)];
    repeat::for_each_in_list(value_variable=EntityPos, list=EntityPosList){
        code::call_function(p"WAIT");
        EntityPos = EntityPos.shift_coordinate(1, "Y");
        world::spawn_item_display(EntityPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5CQ8MZEJ1l7I1kaT8ou+k5OqRi6plJwIDjvUR50OzdFDg999j2hrN0pTqXKa7OXSi/CvOAsdqiAWCTkKrJ25Q0POHy9+viYZLFGnFuv/kBu4mthI9rePtg5QuOFFDkfAAAAA==");
        g`EndDecorUUIDList_%var_local(IsAltEnding)`.append_value(value::uuid<last_entity>);
    }
    EntityPosList = [location(127.5, 140.5, 35.5, 0, 0), location(131.5, 140.5, 35.5, 0, 0), location(127.5, 140.5, 25.5, -180, 0), location(131.5, 140.5, 25.5, -180, 0), location(107.5, 142.5, -10.5, 90, 0), location(107.5, 142.5, -12.5, 90, 0), location(111.5, 142.5, -13.5, -180, 0), location(113.5, 142.5, -13.5, -180, 0), location(110.5, 142.5, 0.5, -90, 0), location(110.5, 142.5, 2.5, -90, 0), location(113.5, 142.5, 0.5, -90, 0), location(113.5, 142.5, 2.5, -90, 0), location(117.5, 142.5, 0.5, 0, 0), location(126.5, 142.5, -0.5, -180, 0)];
    repeat::for_each_in_list(value_variable=EntityPos, list=EntityPosList){
        code::call_function(p"WAIT");
        world::spawn_item_display(EntityPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5CRZEzIDrL2BvJ0n5QdnN/Pg1Tz0wCBhynEuVOi3dT4PTYY9sbztKV6lLmuDp3ofwszAPGaqsGgE1CqiYvU9LwhMvfr6uHSRZrxLl95gfsZrYSPn7DG368AZSgwOB8AAAA");
        g`EndDecorUUIDList_%var_local(IsAltEnding)`.append_value(value::uuid<last_entity>);
    }
    EntityPosList = [location(122.5, 140.5, 30.5, 90, 0), location(124.5, 142.5, -2.5, -90, 0)];
    repeat::for_each_in_list(value_variable=EntityPos, list=EntityPosList){
        code::call_function(p"WAIT");
        world::spawn_item_display(EntityPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5CRcEZEJ1l7I1kaT8ou+k5OqRi6plJwIDjvUR50OzdFDg999j2hrN0pTqXKa7OXSi/CvOAsdqiAWCTkKrJ25Q0POHy9+viYZLFGnFuv/kBu4mthI9rePtg5QtMtHD+fAAAAA==");
        g`EndDecorUUIDList_%var_local(IsAltEnding)`.append_value(value::uuid<last_entity>);
    }
    EntityPosList = [location(122.5, 140.5, 34.5, 90, 0), location(122.5, 140.5, 26.5, 90, 0)];
    repeat::for_each_in_list(value_variable=EntityPos, list=EntityPosList){
        code::call_function(p"WAIT");
        world::spawn_item_display(EntityPos, DecorName, "H4sIAAAAAAAA/0WMOw7CMBAFH0RBYCokOm5ClYIzIDprsR3J0n5QdnN/SMXUM5OAAecHBT3b4t0UuLyO2PeKq3RtZaE57s5dWn4T84Cx2KoBYJeQisnHtGl4wu3vl9XDJIvVxrn+5iccZjYKH7dwmrDxBfiqmO98AAAA");
        g`EndDecorUUIDList_%var_local(IsAltEnding)`.append_value(value::uuid<last_entity>);
    }
}

function EndUnloadDecor{
    g`EndPlayerList_%var_local(IsAltEnding)` = g`EndPlayerList_%var_local(IsAltEnding)`.remove_list_value(value::uuid<default>);
    if(g`EndPlayerList_%var_local(IsAltEnding)`.list_is_empty()){
        select::entity_by_name(g`EndDecorUUIDList_%var_local(IsAltEnding)`);
        if(value::selection_size.greater(0)){
            entity::remove();
        }
        variable::purge(["EndPlayerList_%var_local(IsAltEnding)", "EndDecorUUIDList_%var_local(IsAltEnding)"]);
        select::reset();
    }
}

function FixMaxLevels{
    if(s`%player%_MaxPlayedLevel`.greater_or_equals(888)){
        EndingSum = variable::add([s`%player%_Ending1`, s`%player%_Ending2`]);
        if(EndingSum.less_or_equals(0)){
            s`%player%_SavedLevel` = 21;
            s`%player%_MaxPlayedLevel` = 21;
        }
    }
    if(s`%player%_MaxPlayedLevel`.less(s`%player%_SavedLevel`)){
        s`%player%_MaxPlayedLevel` = s`%player%_SavedLevel`;
    }
}

function AltEndFix{
    if(s`%player%_IsUsingOptifine`.equals(1)){
        entity::set_display_rotation_from_euler_angles(90);
        entity::set_display_translation(vector(0, -0.5, 0.5));
    }
}

function OptifineMsg{
    if(FromJoin.equals(1)){
        OptifineON = m"<green><bold>[ДА]".set_component_click("@optifine on", "SUGGEST_COMMAND");
        OptifineON = OptifineON.set_component_hover("&#abc4d6Нажмите, чтобы &aвключить &#abc4d6исправления");
        OptifineOFF = m"<red><bold>[НЕТ]".set_component_click("@optifine off", "SUGGEST_COMMAND");
        OptifineOFF = OptifineOFF.set_component_hover("&#abc4d6Нажмите, чтобы &cне включать &#abc4d6исправления");
        OptifineButtons = variable::append_component([" ", " ", " ", " ", " ", OptifineON, " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", OptifineOFF], "CONCATENATION");
        player::message(["&r", "&f Используете ли вы &eOptifine&f?", "&7 (нажмите на текст в чате)", OptifineButtons, "&r"], "SEPARATE_LINES");
    }
}

function AltEndAnim0{
    if(ForceEnd1.equals(0)){
        if(s`%player%_FoundSecret8`.equals(1)){
            code::call_function(p"AltEndAnim1");
        }
    }
}

function MenuEnding{
    player::close_inventory();
    player::stop_sound([]);
    player::play_sound(sound("minecraft:ui.button.click", 1, 2, "MASTER"), value::eye_location<default>);
    g`%player%_TitleTicks` = 400;
    player::send_title("&#7a503c█", "", 20, 100, 40);
    code::wait(20);
    DisableTransition = 1;
    code::call_function(p"PlayerSetup");
    g`%player%_NextLvl` = 888;
    code::start_process(p"ACT3Ending", "COPY");
}

function Lvl21Dialog1{
    code::call_function(p"UnloadPrtls");
    player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYRDKzcxLTS5KTCuxSsopTY1PqUxlZmBNzi/NK2FgYGBkAABf8pu5OwAAAA==");
    player::set_item_cooldown(99999, "H4sIAAAAAAAA/+NiYGBm4HZJLEkMSy0qzszPY2AQjOBgYMpMYZDNzcxLTS5KTCuxKijKLM5NLALy45OLKotLEnOKmRlYk/NL80oYGBgYGQCjCxDSRgAAAA==");
    player::stop_sound([]);
    g`%player%_StopPlayingMusic` = 1;
    Messages = ["audio|cubed.dialog.lvl_21", "text|А? Кто это? О, это ты! Наконец-то. Я уже начала беспокоиться — лифт не всегда|154", "text|надёжен. Но раз ты здесь, можем продолжить испытания в привычном формате.|106", "text|Перед тобой поле экспроприации. Для кубов оно действует так же, как вода,|112", "text|но при этом ещё и очищает все активные порталы. А за ним — комната очистки.|112", "text|Её основная функция — устранение несанкционированных предметов… включая твоё|104", "text|портальное устройство. Не волнуйся, это совершенно безопасно. Оно просто|104", "text|немного нагреется… а потом испарится.|76"];
}

function CalcAllTime{
    if(s`%player%*Record_AllLvlsTime`.equals(0)){
        s`%player%*Record_AllLvlsTime` = 1000000000;
    }
    repeat::multi_times(LocalLvl, 35){
        code::call_function(p"WAIT");
        if(s`%player%*%var_local(LocalLvl)*Record_LvlTime`.equals(0)){
            LocalAllTimeRecord = 0;
            code::stop_repeat();
        }
        LocalAllTimeRecord = variable::add([LocalAllTimeRecord, s`%player%*%var_local(LocalLvl)*Record_LvlTime`]);
    }
    if(LocalAllTimeRecord.equals(0)){
        code::return_function();
    }
    if(LocalAllTimeRecord.less(s`%player%*Record_AllLvlsTime`)){
        if(s`%player%*Record_SpeedrunTime`.not_equals(0)){
            if(s`%player%*Record_SpeedrunTime`.less_or_equals(LocalAllTimeRecord)){
                code::return_function();
            }
        }
        s`%player%*Record_AllLvlsTime` = LocalAllTimeRecord;
        if(s`SpeedrunScore`.equals(0)){
            s`SpeedrunScore` = variable::create_map();
        }
        s`SpeedrunScore` = s`SpeedrunScore`.set_map_value("%player%", s`%player%*Record_AllLvlsTime`);
    }
}

function LogError{
    if(error.not_equals(0)){
        if not (s`Errors`.exists()){
            s`Errors` = [];
        }
        ErrorTimestamp = value::timestamp.format_timestamp();
        ErrorMsg = variable::set_text([error_type, "-", ErrorTimestamp, "-", error]);
        s`Errors`.append_value(ErrorMsg);
    }
}

function TurretFixList{
    if not (g`LvlPlayerList_%var(%var_local(TurretUUID)_Level)`.exists()){
        g`LvlTurretList_%var_local(NextLevel)` = g`LvlTurretList_%var_local(NextLevel)`.remove_list_value(TurretUUID);
        code::stop_repeat();
    }
}

